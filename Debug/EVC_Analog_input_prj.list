
EVC_Analog_input_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007890  08007890  00008890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  000091d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d00  08007d00  000091d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d00  08007d00  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001d4  08007edc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08007edc  0000958c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7d6  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcd  00000000  00000000  000189d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0001b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000967  00000000  00000000  0001be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e07  00000000  00000000  0001c7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001117a  00000000  00000000  000315de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000799d8  00000000  00000000  00042758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f0  00000000  00000000  000bc174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004567  00000000  00000000  000be964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000c2ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007874 	.word	0x08007874

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08007874 	.word	0x08007874

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8e9 	bl	8001614 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f829 	bl	80014a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8db 	bl	8001614 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8d1 	bl	8001614 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f853 	bl	800152c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f849 	bl	800152c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	0045      	lsls	r5, r0, #1
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	4699      	mov	r9, r3
 80004ba:	1c0f      	adds	r7, r1, #0
 80004bc:	0e2d      	lsrs	r5, r5, #24
 80004be:	0fc6      	lsrs	r6, r0, #31
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_fmul+0x1e>
 80004c4:	e088      	b.n	80005d8 <__aeabi_fmul+0x130>
 80004c6:	2dff      	cmp	r5, #255	@ 0xff
 80004c8:	d100      	bne.n	80004cc <__aeabi_fmul+0x24>
 80004ca:	e08d      	b.n	80005e8 <__aeabi_fmul+0x140>
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	04d2      	lsls	r2, r2, #19
 80004d2:	431a      	orrs	r2, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	4691      	mov	r9, r2
 80004d8:	4698      	mov	r8, r3
 80004da:	469a      	mov	sl, r3
 80004dc:	3d7f      	subs	r5, #127	@ 0x7f
 80004de:	027c      	lsls	r4, r7, #9
 80004e0:	007b      	lsls	r3, r7, #1
 80004e2:	0a64      	lsrs	r4, r4, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	0fff      	lsrs	r7, r7, #31
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d068      	beq.n	80005be <__aeabi_fmul+0x116>
 80004ec:	2bff      	cmp	r3, #255	@ 0xff
 80004ee:	d021      	beq.n	8000534 <__aeabi_fmul+0x8c>
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	00e4      	lsls	r4, r4, #3
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4314      	orrs	r4, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	3b7f      	subs	r3, #127	@ 0x7f
 80004fc:	195b      	adds	r3, r3, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	1c5d      	adds	r5, r3, #1
 8000502:	2a0a      	cmp	r2, #10
 8000504:	dc2e      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000506:	407e      	eors	r6, r7
 8000508:	4642      	mov	r2, r8
 800050a:	2a02      	cmp	r2, #2
 800050c:	dc23      	bgt.n	8000556 <__aeabi_fmul+0xae>
 800050e:	3a01      	subs	r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d900      	bls.n	8000516 <__aeabi_fmul+0x6e>
 8000514:	e0bd      	b.n	8000692 <__aeabi_fmul+0x1ea>
 8000516:	2902      	cmp	r1, #2
 8000518:	d06e      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800051a:	2901      	cmp	r1, #1
 800051c:	d12c      	bne.n	8000578 <__aeabi_fmul+0xd0>
 800051e:	2000      	movs	r0, #0
 8000520:	2200      	movs	r2, #0
 8000522:	05c0      	lsls	r0, r0, #23
 8000524:	07f6      	lsls	r6, r6, #31
 8000526:	4310      	orrs	r0, r2
 8000528:	4330      	orrs	r0, r6
 800052a:	bce0      	pop	{r5, r6, r7}
 800052c:	46ba      	mov	sl, r7
 800052e:	46b1      	mov	r9, r6
 8000530:	46a8      	mov	r8, r5
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	002b      	movs	r3, r5
 8000536:	33ff      	adds	r3, #255	@ 0xff
 8000538:	2c00      	cmp	r4, #0
 800053a:	d065      	beq.n	8000608 <__aeabi_fmul+0x160>
 800053c:	2203      	movs	r2, #3
 800053e:	4641      	mov	r1, r8
 8000540:	4311      	orrs	r1, r2
 8000542:	0032      	movs	r2, r6
 8000544:	3501      	adds	r5, #1
 8000546:	4688      	mov	r8, r1
 8000548:	407a      	eors	r2, r7
 800054a:	35ff      	adds	r5, #255	@ 0xff
 800054c:	290a      	cmp	r1, #10
 800054e:	dd00      	ble.n	8000552 <__aeabi_fmul+0xaa>
 8000550:	e0d8      	b.n	8000704 <__aeabi_fmul+0x25c>
 8000552:	0016      	movs	r6, r2
 8000554:	2103      	movs	r1, #3
 8000556:	4640      	mov	r0, r8
 8000558:	2201      	movs	r2, #1
 800055a:	4082      	lsls	r2, r0
 800055c:	20a6      	movs	r0, #166	@ 0xa6
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	4202      	tst	r2, r0
 8000562:	d020      	beq.n	80005a6 <__aeabi_fmul+0xfe>
 8000564:	4653      	mov	r3, sl
 8000566:	2b02      	cmp	r3, #2
 8000568:	d046      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800056a:	2b03      	cmp	r3, #3
 800056c:	d100      	bne.n	8000570 <__aeabi_fmul+0xc8>
 800056e:	e0bb      	b.n	80006e8 <__aeabi_fmul+0x240>
 8000570:	4651      	mov	r1, sl
 8000572:	464c      	mov	r4, r9
 8000574:	2901      	cmp	r1, #1
 8000576:	d0d2      	beq.n	800051e <__aeabi_fmul+0x76>
 8000578:	002b      	movs	r3, r5
 800057a:	337f      	adds	r3, #127	@ 0x7f
 800057c:	2b00      	cmp	r3, #0
 800057e:	dd70      	ble.n	8000662 <__aeabi_fmul+0x1ba>
 8000580:	0762      	lsls	r2, r4, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fmul+0xe6>
 8000584:	220f      	movs	r2, #15
 8000586:	4022      	ands	r2, r4
 8000588:	2a04      	cmp	r2, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fmul+0xe6>
 800058c:	3404      	adds	r4, #4
 800058e:	0122      	lsls	r2, r4, #4
 8000590:	d503      	bpl.n	800059a <__aeabi_fmul+0xf2>
 8000592:	4b63      	ldr	r3, [pc, #396]	@ (8000720 <__aeabi_fmul+0x278>)
 8000594:	401c      	ands	r4, r3
 8000596:	002b      	movs	r3, r5
 8000598:	3380      	adds	r3, #128	@ 0x80
 800059a:	2bfe      	cmp	r3, #254	@ 0xfe
 800059c:	dc2c      	bgt.n	80005f8 <__aeabi_fmul+0x150>
 800059e:	01a2      	lsls	r2, r4, #6
 80005a0:	0a52      	lsrs	r2, r2, #9
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	e7bd      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005a6:	2090      	movs	r0, #144	@ 0x90
 80005a8:	0080      	lsls	r0, r0, #2
 80005aa:	4202      	tst	r2, r0
 80005ac:	d127      	bne.n	80005fe <__aeabi_fmul+0x156>
 80005ae:	38b9      	subs	r0, #185	@ 0xb9
 80005b0:	38ff      	subs	r0, #255	@ 0xff
 80005b2:	4210      	tst	r0, r2
 80005b4:	d06d      	beq.n	8000692 <__aeabi_fmul+0x1ea>
 80005b6:	003e      	movs	r6, r7
 80005b8:	46a1      	mov	r9, r4
 80005ba:	468a      	mov	sl, r1
 80005bc:	e7d2      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d141      	bne.n	8000646 <__aeabi_fmul+0x19e>
 80005c2:	2301      	movs	r3, #1
 80005c4:	4642      	mov	r2, r8
 80005c6:	431a      	orrs	r2, r3
 80005c8:	4690      	mov	r8, r2
 80005ca:	002b      	movs	r3, r5
 80005cc:	4642      	mov	r2, r8
 80005ce:	2101      	movs	r1, #1
 80005d0:	1c5d      	adds	r5, r3, #1
 80005d2:	2a0a      	cmp	r2, #10
 80005d4:	dd97      	ble.n	8000506 <__aeabi_fmul+0x5e>
 80005d6:	e7c5      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d126      	bne.n	800062a <__aeabi_fmul+0x182>
 80005dc:	2304      	movs	r3, #4
 80005de:	4698      	mov	r8, r3
 80005e0:	3b03      	subs	r3, #3
 80005e2:	2500      	movs	r5, #0
 80005e4:	469a      	mov	sl, r3
 80005e6:	e77a      	b.n	80004de <__aeabi_fmul+0x36>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d118      	bne.n	800061e <__aeabi_fmul+0x176>
 80005ec:	2308      	movs	r3, #8
 80005ee:	4698      	mov	r8, r3
 80005f0:	3b06      	subs	r3, #6
 80005f2:	25ff      	movs	r5, #255	@ 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e772      	b.n	80004de <__aeabi_fmul+0x36>
 80005f8:	20ff      	movs	r0, #255	@ 0xff
 80005fa:	2200      	movs	r2, #0
 80005fc:	e791      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	2600      	movs	r6, #0
 8000602:	20ff      	movs	r0, #255	@ 0xff
 8000604:	03d2      	lsls	r2, r2, #15
 8000606:	e78c      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000608:	4641      	mov	r1, r8
 800060a:	2202      	movs	r2, #2
 800060c:	3501      	adds	r5, #1
 800060e:	4311      	orrs	r1, r2
 8000610:	4688      	mov	r8, r1
 8000612:	35ff      	adds	r5, #255	@ 0xff
 8000614:	290a      	cmp	r1, #10
 8000616:	dca5      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000618:	2102      	movs	r1, #2
 800061a:	407e      	eors	r6, r7
 800061c:	e774      	b.n	8000508 <__aeabi_fmul+0x60>
 800061e:	230c      	movs	r3, #12
 8000620:	4698      	mov	r8, r3
 8000622:	3b09      	subs	r3, #9
 8000624:	25ff      	movs	r5, #255	@ 0xff
 8000626:	469a      	mov	sl, r3
 8000628:	e759      	b.n	80004de <__aeabi_fmul+0x36>
 800062a:	0018      	movs	r0, r3
 800062c:	f001 ffc0 	bl	80025b0 <__clzsi2>
 8000630:	464a      	mov	r2, r9
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	2576      	movs	r5, #118	@ 0x76
 8000636:	409a      	lsls	r2, r3
 8000638:	2300      	movs	r3, #0
 800063a:	426d      	negs	r5, r5
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	469a      	mov	sl, r3
 8000642:	1a2d      	subs	r5, r5, r0
 8000644:	e74b      	b.n	80004de <__aeabi_fmul+0x36>
 8000646:	0020      	movs	r0, r4
 8000648:	f001 ffb2 	bl	80025b0 <__clzsi2>
 800064c:	4642      	mov	r2, r8
 800064e:	1f43      	subs	r3, r0, #5
 8000650:	409c      	lsls	r4, r3
 8000652:	1a2b      	subs	r3, r5, r0
 8000654:	3b76      	subs	r3, #118	@ 0x76
 8000656:	2100      	movs	r1, #0
 8000658:	1c5d      	adds	r5, r3, #1
 800065a:	2a0a      	cmp	r2, #10
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fmul+0x1b8>
 800065e:	e752      	b.n	8000506 <__aeabi_fmul+0x5e>
 8000660:	e780      	b.n	8000564 <__aeabi_fmul+0xbc>
 8000662:	2201      	movs	r2, #1
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x1c4>
 800066a:	e758      	b.n	800051e <__aeabi_fmul+0x76>
 800066c:	359e      	adds	r5, #158	@ 0x9e
 800066e:	0022      	movs	r2, r4
 8000670:	40ac      	lsls	r4, r5
 8000672:	40da      	lsrs	r2, r3
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4322      	orrs	r2, r4
 800067a:	0753      	lsls	r3, r2, #29
 800067c:	d004      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 800067e:	230f      	movs	r3, #15
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d000      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 8000686:	3204      	adds	r2, #4
 8000688:	0153      	lsls	r3, r2, #5
 800068a:	d537      	bpl.n	80006fc <__aeabi_fmul+0x254>
 800068c:	2001      	movs	r0, #1
 800068e:	2200      	movs	r2, #0
 8000690:	e747      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000692:	0c21      	lsrs	r1, r4, #16
 8000694:	464a      	mov	r2, r9
 8000696:	0424      	lsls	r4, r4, #16
 8000698:	0c24      	lsrs	r4, r4, #16
 800069a:	0027      	movs	r7, r4
 800069c:	0c10      	lsrs	r0, r2, #16
 800069e:	0412      	lsls	r2, r2, #16
 80006a0:	0c12      	lsrs	r2, r2, #16
 80006a2:	4344      	muls	r4, r0
 80006a4:	4357      	muls	r7, r2
 80006a6:	4348      	muls	r0, r1
 80006a8:	4351      	muls	r1, r2
 80006aa:	0c3a      	lsrs	r2, r7, #16
 80006ac:	1909      	adds	r1, r1, r4
 80006ae:	1852      	adds	r2, r2, r1
 80006b0:	4294      	cmp	r4, r2
 80006b2:	d903      	bls.n	80006bc <__aeabi_fmul+0x214>
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0249      	lsls	r1, r1, #9
 80006b8:	468c      	mov	ip, r1
 80006ba:	4460      	add	r0, ip
 80006bc:	043f      	lsls	r7, r7, #16
 80006be:	0411      	lsls	r1, r2, #16
 80006c0:	0c3f      	lsrs	r7, r7, #16
 80006c2:	19c9      	adds	r1, r1, r7
 80006c4:	018c      	lsls	r4, r1, #6
 80006c6:	1e67      	subs	r7, r4, #1
 80006c8:	41bc      	sbcs	r4, r7
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	0e89      	lsrs	r1, r1, #26
 80006ce:	1812      	adds	r2, r2, r0
 80006d0:	430c      	orrs	r4, r1
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	4314      	orrs	r4, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	d50e      	bpl.n	80006f8 <__aeabi_fmul+0x250>
 80006da:	2301      	movs	r3, #1
 80006dc:	0862      	lsrs	r2, r4, #1
 80006de:	401c      	ands	r4, r3
 80006e0:	4314      	orrs	r4, r2
 80006e2:	e749      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006e4:	003e      	movs	r6, r7
 80006e6:	46a1      	mov	r9, r4
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	464b      	mov	r3, r9
 80006ec:	03d2      	lsls	r2, r2, #15
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0252      	lsls	r2, r2, #9
 80006f2:	20ff      	movs	r0, #255	@ 0xff
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	e714      	b.n	8000522 <__aeabi_fmul+0x7a>
 80006f8:	001d      	movs	r5, r3
 80006fa:	e73d      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006fc:	0192      	lsls	r2, r2, #6
 80006fe:	2000      	movs	r0, #0
 8000700:	0a52      	lsrs	r2, r2, #9
 8000702:	e70e      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000704:	290f      	cmp	r1, #15
 8000706:	d1ed      	bne.n	80006e4 <__aeabi_fmul+0x23c>
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	464b      	mov	r3, r9
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d0ea      	beq.n	80006e8 <__aeabi_fmul+0x240>
 8000712:	4214      	tst	r4, r2
 8000714:	d1e8      	bne.n	80006e8 <__aeabi_fmul+0x240>
 8000716:	003e      	movs	r6, r7
 8000718:	20ff      	movs	r0, #255	@ 0xff
 800071a:	4322      	orrs	r2, r4
 800071c:	e701      	b.n	8000522 <__aeabi_fmul+0x7a>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	f7ffffff 	.word	0xf7ffffff

08000724 <__aeabi_ui2f>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	1e04      	subs	r4, r0, #0
 8000728:	d00e      	beq.n	8000748 <__aeabi_ui2f+0x24>
 800072a:	f001 ff41 	bl	80025b0 <__clzsi2>
 800072e:	239e      	movs	r3, #158	@ 0x9e
 8000730:	0001      	movs	r1, r0
 8000732:	1a1b      	subs	r3, r3, r0
 8000734:	2b96      	cmp	r3, #150	@ 0x96
 8000736:	dc0c      	bgt.n	8000752 <__aeabi_ui2f+0x2e>
 8000738:	2808      	cmp	r0, #8
 800073a:	d02f      	beq.n	800079c <__aeabi_ui2f+0x78>
 800073c:	3908      	subs	r1, #8
 800073e:	408c      	lsls	r4, r1
 8000740:	0264      	lsls	r4, r4, #9
 8000742:	0a64      	lsrs	r4, r4, #9
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	e001      	b.n	800074c <__aeabi_ui2f+0x28>
 8000748:	2000      	movs	r0, #0
 800074a:	2400      	movs	r4, #0
 800074c:	05c0      	lsls	r0, r0, #23
 800074e:	4320      	orrs	r0, r4
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	2b99      	cmp	r3, #153	@ 0x99
 8000754:	dc16      	bgt.n	8000784 <__aeabi_ui2f+0x60>
 8000756:	1f42      	subs	r2, r0, #5
 8000758:	2805      	cmp	r0, #5
 800075a:	d000      	beq.n	800075e <__aeabi_ui2f+0x3a>
 800075c:	4094      	lsls	r4, r2
 800075e:	0022      	movs	r2, r4
 8000760:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <__aeabi_ui2f+0x80>)
 8000762:	4002      	ands	r2, r0
 8000764:	0765      	lsls	r5, r4, #29
 8000766:	d009      	beq.n	800077c <__aeabi_ui2f+0x58>
 8000768:	250f      	movs	r5, #15
 800076a:	402c      	ands	r4, r5
 800076c:	2c04      	cmp	r4, #4
 800076e:	d005      	beq.n	800077c <__aeabi_ui2f+0x58>
 8000770:	3204      	adds	r2, #4
 8000772:	0154      	lsls	r4, r2, #5
 8000774:	d502      	bpl.n	800077c <__aeabi_ui2f+0x58>
 8000776:	239f      	movs	r3, #159	@ 0x9f
 8000778:	4002      	ands	r2, r0
 800077a:	1a5b      	subs	r3, r3, r1
 800077c:	0192      	lsls	r2, r2, #6
 800077e:	0a54      	lsrs	r4, r2, #9
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	e7e3      	b.n	800074c <__aeabi_ui2f+0x28>
 8000784:	0002      	movs	r2, r0
 8000786:	0020      	movs	r0, r4
 8000788:	321b      	adds	r2, #27
 800078a:	4090      	lsls	r0, r2
 800078c:	0002      	movs	r2, r0
 800078e:	1e50      	subs	r0, r2, #1
 8000790:	4182      	sbcs	r2, r0
 8000792:	2005      	movs	r0, #5
 8000794:	1a40      	subs	r0, r0, r1
 8000796:	40c4      	lsrs	r4, r0
 8000798:	4314      	orrs	r4, r2
 800079a:	e7e0      	b.n	800075e <__aeabi_ui2f+0x3a>
 800079c:	0264      	lsls	r4, r4, #9
 800079e:	2096      	movs	r0, #150	@ 0x96
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	e7d3      	b.n	800074c <__aeabi_ui2f+0x28>
 80007a4:	fbffffff 	.word	0xfbffffff

080007a8 <__aeabi_dadd>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	4657      	mov	r7, sl
 80007ac:	464e      	mov	r6, r9
 80007ae:	4645      	mov	r5, r8
 80007b0:	46de      	mov	lr, fp
 80007b2:	b5e0      	push	{r5, r6, r7, lr}
 80007b4:	b083      	sub	sp, #12
 80007b6:	9000      	str	r0, [sp, #0]
 80007b8:	9101      	str	r1, [sp, #4]
 80007ba:	030c      	lsls	r4, r1, #12
 80007bc:	004f      	lsls	r7, r1, #1
 80007be:	0fce      	lsrs	r6, r1, #31
 80007c0:	0a61      	lsrs	r1, r4, #9
 80007c2:	9c00      	ldr	r4, [sp, #0]
 80007c4:	031d      	lsls	r5, r3, #12
 80007c6:	0f64      	lsrs	r4, r4, #29
 80007c8:	430c      	orrs	r4, r1
 80007ca:	9900      	ldr	r1, [sp, #0]
 80007cc:	9200      	str	r2, [sp, #0]
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	00c8      	lsls	r0, r1, #3
 80007d2:	0059      	lsls	r1, r3, #1
 80007d4:	0d4b      	lsrs	r3, r1, #21
 80007d6:	4699      	mov	r9, r3
 80007d8:	9a00      	ldr	r2, [sp, #0]
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	0fd9      	lsrs	r1, r3, #31
 80007e0:	0f53      	lsrs	r3, r2, #29
 80007e2:	432b      	orrs	r3, r5
 80007e4:	469a      	mov	sl, r3
 80007e6:	9b00      	ldr	r3, [sp, #0]
 80007e8:	0d7f      	lsrs	r7, r7, #21
 80007ea:	00da      	lsls	r2, r3, #3
 80007ec:	4694      	mov	ip, r2
 80007ee:	464a      	mov	r2, r9
 80007f0:	46b0      	mov	r8, r6
 80007f2:	1aba      	subs	r2, r7, r2
 80007f4:	428e      	cmp	r6, r1
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x52>
 80007f8:	e0b0      	b.n	800095c <__aeabi_dadd+0x1b4>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x58>
 80007fe:	e078      	b.n	80008f2 <__aeabi_dadd+0x14a>
 8000800:	4649      	mov	r1, r9
 8000802:	2900      	cmp	r1, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x60>
 8000806:	e0e9      	b.n	80009dc <__aeabi_dadd+0x234>
 8000808:	49c9      	ldr	r1, [pc, #804]	@ (8000b30 <__aeabi_dadd+0x388>)
 800080a:	428f      	cmp	r7, r1
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x68>
 800080e:	e195      	b.n	8000b3c <__aeabi_dadd+0x394>
 8000810:	2501      	movs	r5, #1
 8000812:	2a38      	cmp	r2, #56	@ 0x38
 8000814:	dc16      	bgt.n	8000844 <__aeabi_dadd+0x9c>
 8000816:	2180      	movs	r1, #128	@ 0x80
 8000818:	4653      	mov	r3, sl
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	430b      	orrs	r3, r1
 800081e:	469a      	mov	sl, r3
 8000820:	2a1f      	cmp	r2, #31
 8000822:	dd00      	ble.n	8000826 <__aeabi_dadd+0x7e>
 8000824:	e1e7      	b.n	8000bf6 <__aeabi_dadd+0x44e>
 8000826:	2120      	movs	r1, #32
 8000828:	4655      	mov	r5, sl
 800082a:	1a8b      	subs	r3, r1, r2
 800082c:	4661      	mov	r1, ip
 800082e:	409d      	lsls	r5, r3
 8000830:	40d1      	lsrs	r1, r2
 8000832:	430d      	orrs	r5, r1
 8000834:	4661      	mov	r1, ip
 8000836:	4099      	lsls	r1, r3
 8000838:	1e4b      	subs	r3, r1, #1
 800083a:	4199      	sbcs	r1, r3
 800083c:	4653      	mov	r3, sl
 800083e:	40d3      	lsrs	r3, r2
 8000840:	430d      	orrs	r5, r1
 8000842:	1ae4      	subs	r4, r4, r3
 8000844:	1b45      	subs	r5, r0, r5
 8000846:	42a8      	cmp	r0, r5
 8000848:	4180      	sbcs	r0, r0
 800084a:	4240      	negs	r0, r0
 800084c:	1a24      	subs	r4, r4, r0
 800084e:	0223      	lsls	r3, r4, #8
 8000850:	d400      	bmi.n	8000854 <__aeabi_dadd+0xac>
 8000852:	e10f      	b.n	8000a74 <__aeabi_dadd+0x2cc>
 8000854:	0264      	lsls	r4, r4, #9
 8000856:	0a64      	lsrs	r4, r4, #9
 8000858:	2c00      	cmp	r4, #0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0xb6>
 800085c:	e139      	b.n	8000ad2 <__aeabi_dadd+0x32a>
 800085e:	0020      	movs	r0, r4
 8000860:	f001 fea6 	bl	80025b0 <__clzsi2>
 8000864:	0003      	movs	r3, r0
 8000866:	3b08      	subs	r3, #8
 8000868:	2120      	movs	r1, #32
 800086a:	0028      	movs	r0, r5
 800086c:	1aca      	subs	r2, r1, r3
 800086e:	40d0      	lsrs	r0, r2
 8000870:	409c      	lsls	r4, r3
 8000872:	0002      	movs	r2, r0
 8000874:	409d      	lsls	r5, r3
 8000876:	4322      	orrs	r2, r4
 8000878:	429f      	cmp	r7, r3
 800087a:	dd00      	ble.n	800087e <__aeabi_dadd+0xd6>
 800087c:	e173      	b.n	8000b66 <__aeabi_dadd+0x3be>
 800087e:	1bd8      	subs	r0, r3, r7
 8000880:	3001      	adds	r0, #1
 8000882:	1a09      	subs	r1, r1, r0
 8000884:	002c      	movs	r4, r5
 8000886:	408d      	lsls	r5, r1
 8000888:	40c4      	lsrs	r4, r0
 800088a:	1e6b      	subs	r3, r5, #1
 800088c:	419d      	sbcs	r5, r3
 800088e:	0013      	movs	r3, r2
 8000890:	40c2      	lsrs	r2, r0
 8000892:	408b      	lsls	r3, r1
 8000894:	4325      	orrs	r5, r4
 8000896:	2700      	movs	r7, #0
 8000898:	0014      	movs	r4, r2
 800089a:	431d      	orrs	r5, r3
 800089c:	076b      	lsls	r3, r5, #29
 800089e:	d009      	beq.n	80008b4 <__aeabi_dadd+0x10c>
 80008a0:	230f      	movs	r3, #15
 80008a2:	402b      	ands	r3, r5
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d005      	beq.n	80008b4 <__aeabi_dadd+0x10c>
 80008a8:	1d2b      	adds	r3, r5, #4
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	41ad      	sbcs	r5, r5
 80008ae:	426d      	negs	r5, r5
 80008b0:	1964      	adds	r4, r4, r5
 80008b2:	001d      	movs	r5, r3
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	d400      	bmi.n	80008ba <__aeabi_dadd+0x112>
 80008b8:	e12d      	b.n	8000b16 <__aeabi_dadd+0x36e>
 80008ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000b30 <__aeabi_dadd+0x388>)
 80008bc:	3701      	adds	r7, #1
 80008be:	4297      	cmp	r7, r2
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x11c>
 80008c2:	e0d3      	b.n	8000a6c <__aeabi_dadd+0x2c4>
 80008c4:	4646      	mov	r6, r8
 80008c6:	499b      	ldr	r1, [pc, #620]	@ (8000b34 <__aeabi_dadd+0x38c>)
 80008c8:	08ed      	lsrs	r5, r5, #3
 80008ca:	4021      	ands	r1, r4
 80008cc:	074a      	lsls	r2, r1, #29
 80008ce:	432a      	orrs	r2, r5
 80008d0:	057c      	lsls	r4, r7, #21
 80008d2:	024d      	lsls	r5, r1, #9
 80008d4:	0b2d      	lsrs	r5, r5, #12
 80008d6:	0d64      	lsrs	r4, r4, #21
 80008d8:	0524      	lsls	r4, r4, #20
 80008da:	432c      	orrs	r4, r5
 80008dc:	07f6      	lsls	r6, r6, #31
 80008de:	4334      	orrs	r4, r6
 80008e0:	0010      	movs	r0, r2
 80008e2:	0021      	movs	r1, r4
 80008e4:	b003      	add	sp, #12
 80008e6:	bcf0      	pop	{r4, r5, r6, r7}
 80008e8:	46bb      	mov	fp, r7
 80008ea:	46b2      	mov	sl, r6
 80008ec:	46a9      	mov	r9, r5
 80008ee:	46a0      	mov	r8, r4
 80008f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x150>
 80008f6:	e084      	b.n	8000a02 <__aeabi_dadd+0x25a>
 80008f8:	464a      	mov	r2, r9
 80008fa:	1bd2      	subs	r2, r2, r7
 80008fc:	2f00      	cmp	r7, #0
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x15a>
 8000900:	e16d      	b.n	8000bde <__aeabi_dadd+0x436>
 8000902:	0025      	movs	r5, r4
 8000904:	4305      	orrs	r5, r0
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x162>
 8000908:	e127      	b.n	8000b5a <__aeabi_dadd+0x3b2>
 800090a:	1e56      	subs	r6, r2, #1
 800090c:	2a01      	cmp	r2, #1
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x16a>
 8000910:	e23b      	b.n	8000d8a <__aeabi_dadd+0x5e2>
 8000912:	4d87      	ldr	r5, [pc, #540]	@ (8000b30 <__aeabi_dadd+0x388>)
 8000914:	42aa      	cmp	r2, r5
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x172>
 8000918:	e26a      	b.n	8000df0 <__aeabi_dadd+0x648>
 800091a:	2501      	movs	r5, #1
 800091c:	2e38      	cmp	r6, #56	@ 0x38
 800091e:	dc12      	bgt.n	8000946 <__aeabi_dadd+0x19e>
 8000920:	0032      	movs	r2, r6
 8000922:	2a1f      	cmp	r2, #31
 8000924:	dd00      	ble.n	8000928 <__aeabi_dadd+0x180>
 8000926:	e1f8      	b.n	8000d1a <__aeabi_dadd+0x572>
 8000928:	2620      	movs	r6, #32
 800092a:	0025      	movs	r5, r4
 800092c:	1ab6      	subs	r6, r6, r2
 800092e:	0007      	movs	r7, r0
 8000930:	4653      	mov	r3, sl
 8000932:	40b0      	lsls	r0, r6
 8000934:	40d4      	lsrs	r4, r2
 8000936:	40b5      	lsls	r5, r6
 8000938:	40d7      	lsrs	r7, r2
 800093a:	1e46      	subs	r6, r0, #1
 800093c:	41b0      	sbcs	r0, r6
 800093e:	1b1b      	subs	r3, r3, r4
 8000940:	469a      	mov	sl, r3
 8000942:	433d      	orrs	r5, r7
 8000944:	4305      	orrs	r5, r0
 8000946:	4662      	mov	r2, ip
 8000948:	1b55      	subs	r5, r2, r5
 800094a:	45ac      	cmp	ip, r5
 800094c:	4192      	sbcs	r2, r2
 800094e:	4653      	mov	r3, sl
 8000950:	4252      	negs	r2, r2
 8000952:	000e      	movs	r6, r1
 8000954:	464f      	mov	r7, r9
 8000956:	4688      	mov	r8, r1
 8000958:	1a9c      	subs	r4, r3, r2
 800095a:	e778      	b.n	800084e <__aeabi_dadd+0xa6>
 800095c:	2a00      	cmp	r2, #0
 800095e:	dc00      	bgt.n	8000962 <__aeabi_dadd+0x1ba>
 8000960:	e08e      	b.n	8000a80 <__aeabi_dadd+0x2d8>
 8000962:	4649      	mov	r1, r9
 8000964:	2900      	cmp	r1, #0
 8000966:	d175      	bne.n	8000a54 <__aeabi_dadd+0x2ac>
 8000968:	4661      	mov	r1, ip
 800096a:	4653      	mov	r3, sl
 800096c:	4319      	orrs	r1, r3
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x1ca>
 8000970:	e0f6      	b.n	8000b60 <__aeabi_dadd+0x3b8>
 8000972:	1e51      	subs	r1, r2, #1
 8000974:	2a01      	cmp	r2, #1
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x1d2>
 8000978:	e191      	b.n	8000c9e <__aeabi_dadd+0x4f6>
 800097a:	4d6d      	ldr	r5, [pc, #436]	@ (8000b30 <__aeabi_dadd+0x388>)
 800097c:	42aa      	cmp	r2, r5
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x1da>
 8000980:	e0dc      	b.n	8000b3c <__aeabi_dadd+0x394>
 8000982:	2501      	movs	r5, #1
 8000984:	2938      	cmp	r1, #56	@ 0x38
 8000986:	dc14      	bgt.n	80009b2 <__aeabi_dadd+0x20a>
 8000988:	000a      	movs	r2, r1
 800098a:	2a1f      	cmp	r2, #31
 800098c:	dd00      	ble.n	8000990 <__aeabi_dadd+0x1e8>
 800098e:	e1a2      	b.n	8000cd6 <__aeabi_dadd+0x52e>
 8000990:	2120      	movs	r1, #32
 8000992:	4653      	mov	r3, sl
 8000994:	1a89      	subs	r1, r1, r2
 8000996:	408b      	lsls	r3, r1
 8000998:	001d      	movs	r5, r3
 800099a:	4663      	mov	r3, ip
 800099c:	40d3      	lsrs	r3, r2
 800099e:	431d      	orrs	r5, r3
 80009a0:	4663      	mov	r3, ip
 80009a2:	408b      	lsls	r3, r1
 80009a4:	0019      	movs	r1, r3
 80009a6:	1e4b      	subs	r3, r1, #1
 80009a8:	4199      	sbcs	r1, r3
 80009aa:	4653      	mov	r3, sl
 80009ac:	40d3      	lsrs	r3, r2
 80009ae:	430d      	orrs	r5, r1
 80009b0:	18e4      	adds	r4, r4, r3
 80009b2:	182d      	adds	r5, r5, r0
 80009b4:	4285      	cmp	r5, r0
 80009b6:	4180      	sbcs	r0, r0
 80009b8:	4240      	negs	r0, r0
 80009ba:	1824      	adds	r4, r4, r0
 80009bc:	0223      	lsls	r3, r4, #8
 80009be:	d559      	bpl.n	8000a74 <__aeabi_dadd+0x2cc>
 80009c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b30 <__aeabi_dadd+0x388>)
 80009c2:	3701      	adds	r7, #1
 80009c4:	429f      	cmp	r7, r3
 80009c6:	d051      	beq.n	8000a6c <__aeabi_dadd+0x2c4>
 80009c8:	2101      	movs	r1, #1
 80009ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <__aeabi_dadd+0x38c>)
 80009cc:	086a      	lsrs	r2, r5, #1
 80009ce:	401c      	ands	r4, r3
 80009d0:	4029      	ands	r1, r5
 80009d2:	430a      	orrs	r2, r1
 80009d4:	07e5      	lsls	r5, r4, #31
 80009d6:	4315      	orrs	r5, r2
 80009d8:	0864      	lsrs	r4, r4, #1
 80009da:	e75f      	b.n	800089c <__aeabi_dadd+0xf4>
 80009dc:	4661      	mov	r1, ip
 80009de:	4653      	mov	r3, sl
 80009e0:	4319      	orrs	r1, r3
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x23e>
 80009e4:	e0bc      	b.n	8000b60 <__aeabi_dadd+0x3b8>
 80009e6:	1e51      	subs	r1, r2, #1
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x246>
 80009ec:	e164      	b.n	8000cb8 <__aeabi_dadd+0x510>
 80009ee:	4d50      	ldr	r5, [pc, #320]	@ (8000b30 <__aeabi_dadd+0x388>)
 80009f0:	42aa      	cmp	r2, r5
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x24e>
 80009f4:	e16a      	b.n	8000ccc <__aeabi_dadd+0x524>
 80009f6:	2501      	movs	r5, #1
 80009f8:	2938      	cmp	r1, #56	@ 0x38
 80009fa:	dd00      	ble.n	80009fe <__aeabi_dadd+0x256>
 80009fc:	e722      	b.n	8000844 <__aeabi_dadd+0x9c>
 80009fe:	000a      	movs	r2, r1
 8000a00:	e70e      	b.n	8000820 <__aeabi_dadd+0x78>
 8000a02:	4a4d      	ldr	r2, [pc, #308]	@ (8000b38 <__aeabi_dadd+0x390>)
 8000a04:	1c7d      	adds	r5, r7, #1
 8000a06:	4215      	tst	r5, r2
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x264>
 8000a0a:	e0d0      	b.n	8000bae <__aeabi_dadd+0x406>
 8000a0c:	0025      	movs	r5, r4
 8000a0e:	4662      	mov	r2, ip
 8000a10:	4653      	mov	r3, sl
 8000a12:	4305      	orrs	r5, r0
 8000a14:	431a      	orrs	r2, r3
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_dadd+0x274>
 8000a1a:	e137      	b.n	8000c8c <__aeabi_dadd+0x4e4>
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x27a>
 8000a20:	e1a8      	b.n	8000d74 <__aeabi_dadd+0x5cc>
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dadd+0x280>
 8000a26:	e16a      	b.n	8000cfe <__aeabi_dadd+0x556>
 8000a28:	4663      	mov	r3, ip
 8000a2a:	1ac5      	subs	r5, r0, r3
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	1ae2      	subs	r2, r4, r3
 8000a30:	42a8      	cmp	r0, r5
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	425b      	negs	r3, r3
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	021a      	lsls	r2, r3, #8
 8000a3a:	d400      	bmi.n	8000a3e <__aeabi_dadd+0x296>
 8000a3c:	e203      	b.n	8000e46 <__aeabi_dadd+0x69e>
 8000a3e:	4663      	mov	r3, ip
 8000a40:	1a1d      	subs	r5, r3, r0
 8000a42:	45ac      	cmp	ip, r5
 8000a44:	4192      	sbcs	r2, r2
 8000a46:	4653      	mov	r3, sl
 8000a48:	4252      	negs	r2, r2
 8000a4a:	1b1c      	subs	r4, r3, r4
 8000a4c:	000e      	movs	r6, r1
 8000a4e:	4688      	mov	r8, r1
 8000a50:	1aa4      	subs	r4, r4, r2
 8000a52:	e723      	b.n	800089c <__aeabi_dadd+0xf4>
 8000a54:	4936      	ldr	r1, [pc, #216]	@ (8000b30 <__aeabi_dadd+0x388>)
 8000a56:	428f      	cmp	r7, r1
 8000a58:	d070      	beq.n	8000b3c <__aeabi_dadd+0x394>
 8000a5a:	2501      	movs	r5, #1
 8000a5c:	2a38      	cmp	r2, #56	@ 0x38
 8000a5e:	dca8      	bgt.n	80009b2 <__aeabi_dadd+0x20a>
 8000a60:	2180      	movs	r1, #128	@ 0x80
 8000a62:	4653      	mov	r3, sl
 8000a64:	0409      	lsls	r1, r1, #16
 8000a66:	430b      	orrs	r3, r1
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e78e      	b.n	800098a <__aeabi_dadd+0x1e2>
 8000a6c:	003c      	movs	r4, r7
 8000a6e:	2500      	movs	r5, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	e731      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000a74:	2307      	movs	r3, #7
 8000a76:	402b      	ands	r3, r5
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_dadd+0x2d6>
 8000a7c:	e710      	b.n	80008a0 <__aeabi_dadd+0xf8>
 8000a7e:	e093      	b.n	8000ba8 <__aeabi_dadd+0x400>
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d074      	beq.n	8000b6e <__aeabi_dadd+0x3c6>
 8000a84:	464a      	mov	r2, r9
 8000a86:	1bd2      	subs	r2, r2, r7
 8000a88:	2f00      	cmp	r7, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x2e6>
 8000a8c:	e0c7      	b.n	8000c1e <__aeabi_dadd+0x476>
 8000a8e:	4928      	ldr	r1, [pc, #160]	@ (8000b30 <__aeabi_dadd+0x388>)
 8000a90:	4589      	cmp	r9, r1
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x2ee>
 8000a94:	e185      	b.n	8000da2 <__aeabi_dadd+0x5fa>
 8000a96:	2501      	movs	r5, #1
 8000a98:	2a38      	cmp	r2, #56	@ 0x38
 8000a9a:	dc12      	bgt.n	8000ac2 <__aeabi_dadd+0x31a>
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0409      	lsls	r1, r1, #16
 8000aa0:	430c      	orrs	r4, r1
 8000aa2:	2a1f      	cmp	r2, #31
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0x300>
 8000aa6:	e1ab      	b.n	8000e00 <__aeabi_dadd+0x658>
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	0025      	movs	r5, r4
 8000aac:	1a89      	subs	r1, r1, r2
 8000aae:	0007      	movs	r7, r0
 8000ab0:	4088      	lsls	r0, r1
 8000ab2:	408d      	lsls	r5, r1
 8000ab4:	40d7      	lsrs	r7, r2
 8000ab6:	1e41      	subs	r1, r0, #1
 8000ab8:	4188      	sbcs	r0, r1
 8000aba:	40d4      	lsrs	r4, r2
 8000abc:	433d      	orrs	r5, r7
 8000abe:	4305      	orrs	r5, r0
 8000ac0:	44a2      	add	sl, r4
 8000ac2:	4465      	add	r5, ip
 8000ac4:	4565      	cmp	r5, ip
 8000ac6:	4192      	sbcs	r2, r2
 8000ac8:	4252      	negs	r2, r2
 8000aca:	4452      	add	r2, sl
 8000acc:	0014      	movs	r4, r2
 8000ace:	464f      	mov	r7, r9
 8000ad0:	e774      	b.n	80009bc <__aeabi_dadd+0x214>
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f001 fd6c 	bl	80025b0 <__clzsi2>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	3318      	adds	r3, #24
 8000adc:	2b1f      	cmp	r3, #31
 8000ade:	dc00      	bgt.n	8000ae2 <__aeabi_dadd+0x33a>
 8000ae0:	e6c2      	b.n	8000868 <__aeabi_dadd+0xc0>
 8000ae2:	002a      	movs	r2, r5
 8000ae4:	3808      	subs	r0, #8
 8000ae6:	4082      	lsls	r2, r0
 8000ae8:	429f      	cmp	r7, r3
 8000aea:	dd00      	ble.n	8000aee <__aeabi_dadd+0x346>
 8000aec:	e0a9      	b.n	8000c42 <__aeabi_dadd+0x49a>
 8000aee:	1bdb      	subs	r3, r3, r7
 8000af0:	1c58      	adds	r0, r3, #1
 8000af2:	281f      	cmp	r0, #31
 8000af4:	dc00      	bgt.n	8000af8 <__aeabi_dadd+0x350>
 8000af6:	e1ac      	b.n	8000e52 <__aeabi_dadd+0x6aa>
 8000af8:	0015      	movs	r5, r2
 8000afa:	3b1f      	subs	r3, #31
 8000afc:	40dd      	lsrs	r5, r3
 8000afe:	2820      	cmp	r0, #32
 8000b00:	d005      	beq.n	8000b0e <__aeabi_dadd+0x366>
 8000b02:	2340      	movs	r3, #64	@ 0x40
 8000b04:	1a1b      	subs	r3, r3, r0
 8000b06:	409a      	lsls	r2, r3
 8000b08:	1e53      	subs	r3, r2, #1
 8000b0a:	419a      	sbcs	r2, r3
 8000b0c:	4315      	orrs	r5, r2
 8000b0e:	2307      	movs	r3, #7
 8000b10:	2700      	movs	r7, #0
 8000b12:	402b      	ands	r3, r5
 8000b14:	e7b0      	b.n	8000a78 <__aeabi_dadd+0x2d0>
 8000b16:	08ed      	lsrs	r5, r5, #3
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <__aeabi_dadd+0x388>)
 8000b1a:	0762      	lsls	r2, r4, #29
 8000b1c:	432a      	orrs	r2, r5
 8000b1e:	08e4      	lsrs	r4, r4, #3
 8000b20:	429f      	cmp	r7, r3
 8000b22:	d00f      	beq.n	8000b44 <__aeabi_dadd+0x39c>
 8000b24:	0324      	lsls	r4, r4, #12
 8000b26:	0b25      	lsrs	r5, r4, #12
 8000b28:	057c      	lsls	r4, r7, #21
 8000b2a:	0d64      	lsrs	r4, r4, #21
 8000b2c:	e6d4      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	000007ff 	.word	0x000007ff
 8000b34:	ff7fffff 	.word	0xff7fffff
 8000b38:	000007fe 	.word	0x000007fe
 8000b3c:	08c0      	lsrs	r0, r0, #3
 8000b3e:	0762      	lsls	r2, r4, #29
 8000b40:	4302      	orrs	r2, r0
 8000b42:	08e4      	lsrs	r4, r4, #3
 8000b44:	0013      	movs	r3, r2
 8000b46:	4323      	orrs	r3, r4
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x3a4>
 8000b4a:	e186      	b.n	8000e5a <__aeabi_dadd+0x6b2>
 8000b4c:	2580      	movs	r5, #128	@ 0x80
 8000b4e:	032d      	lsls	r5, r5, #12
 8000b50:	4325      	orrs	r5, r4
 8000b52:	032d      	lsls	r5, r5, #12
 8000b54:	4cc3      	ldr	r4, [pc, #780]	@ (8000e64 <__aeabi_dadd+0x6bc>)
 8000b56:	0b2d      	lsrs	r5, r5, #12
 8000b58:	e6be      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000b5a:	4660      	mov	r0, ip
 8000b5c:	4654      	mov	r4, sl
 8000b5e:	000e      	movs	r6, r1
 8000b60:	0017      	movs	r7, r2
 8000b62:	08c5      	lsrs	r5, r0, #3
 8000b64:	e7d8      	b.n	8000b18 <__aeabi_dadd+0x370>
 8000b66:	4cc0      	ldr	r4, [pc, #768]	@ (8000e68 <__aeabi_dadd+0x6c0>)
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	4014      	ands	r4, r2
 8000b6c:	e696      	b.n	800089c <__aeabi_dadd+0xf4>
 8000b6e:	4abf      	ldr	r2, [pc, #764]	@ (8000e6c <__aeabi_dadd+0x6c4>)
 8000b70:	1c79      	adds	r1, r7, #1
 8000b72:	4211      	tst	r1, r2
 8000b74:	d16b      	bne.n	8000c4e <__aeabi_dadd+0x4a6>
 8000b76:	0022      	movs	r2, r4
 8000b78:	4302      	orrs	r2, r0
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x3d8>
 8000b7e:	e0db      	b.n	8000d38 <__aeabi_dadd+0x590>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x3de>
 8000b84:	e12d      	b.n	8000de2 <__aeabi_dadd+0x63a>
 8000b86:	4662      	mov	r2, ip
 8000b88:	4653      	mov	r3, sl
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x3e8>
 8000b8e:	e0b6      	b.n	8000cfe <__aeabi_dadd+0x556>
 8000b90:	4663      	mov	r3, ip
 8000b92:	18c5      	adds	r5, r0, r3
 8000b94:	4285      	cmp	r5, r0
 8000b96:	4180      	sbcs	r0, r0
 8000b98:	4454      	add	r4, sl
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	1824      	adds	r4, r4, r0
 8000b9e:	0223      	lsls	r3, r4, #8
 8000ba0:	d502      	bpl.n	8000ba8 <__aeabi_dadd+0x400>
 8000ba2:	000f      	movs	r7, r1
 8000ba4:	4bb0      	ldr	r3, [pc, #704]	@ (8000e68 <__aeabi_dadd+0x6c0>)
 8000ba6:	401c      	ands	r4, r3
 8000ba8:	003a      	movs	r2, r7
 8000baa:	0028      	movs	r0, r5
 8000bac:	e7d8      	b.n	8000b60 <__aeabi_dadd+0x3b8>
 8000bae:	4662      	mov	r2, ip
 8000bb0:	1a85      	subs	r5, r0, r2
 8000bb2:	42a8      	cmp	r0, r5
 8000bb4:	4192      	sbcs	r2, r2
 8000bb6:	4653      	mov	r3, sl
 8000bb8:	4252      	negs	r2, r2
 8000bba:	4691      	mov	r9, r2
 8000bbc:	1ae3      	subs	r3, r4, r3
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	021a      	lsls	r2, r3, #8
 8000bca:	d454      	bmi.n	8000c76 <__aeabi_dadd+0x4ce>
 8000bcc:	464a      	mov	r2, r9
 8000bce:	464c      	mov	r4, r9
 8000bd0:	432a      	orrs	r2, r5
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_dadd+0x42e>
 8000bd4:	e640      	b.n	8000858 <__aeabi_dadd+0xb0>
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	2400      	movs	r4, #0
 8000bda:	2500      	movs	r5, #0
 8000bdc:	e67c      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000bde:	4da1      	ldr	r5, [pc, #644]	@ (8000e64 <__aeabi_dadd+0x6bc>)
 8000be0:	45a9      	cmp	r9, r5
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x43e>
 8000be4:	e090      	b.n	8000d08 <__aeabi_dadd+0x560>
 8000be6:	2501      	movs	r5, #1
 8000be8:	2a38      	cmp	r2, #56	@ 0x38
 8000bea:	dd00      	ble.n	8000bee <__aeabi_dadd+0x446>
 8000bec:	e6ab      	b.n	8000946 <__aeabi_dadd+0x19e>
 8000bee:	2580      	movs	r5, #128	@ 0x80
 8000bf0:	042d      	lsls	r5, r5, #16
 8000bf2:	432c      	orrs	r4, r5
 8000bf4:	e695      	b.n	8000922 <__aeabi_dadd+0x17a>
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	4655      	mov	r5, sl
 8000bfa:	3920      	subs	r1, #32
 8000bfc:	40cd      	lsrs	r5, r1
 8000bfe:	46a9      	mov	r9, r5
 8000c00:	2a20      	cmp	r2, #32
 8000c02:	d006      	beq.n	8000c12 <__aeabi_dadd+0x46a>
 8000c04:	2140      	movs	r1, #64	@ 0x40
 8000c06:	4653      	mov	r3, sl
 8000c08:	1a8a      	subs	r2, r1, r2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	4694      	mov	ip, r2
 8000c12:	4665      	mov	r5, ip
 8000c14:	1e6b      	subs	r3, r5, #1
 8000c16:	419d      	sbcs	r5, r3
 8000c18:	464b      	mov	r3, r9
 8000c1a:	431d      	orrs	r5, r3
 8000c1c:	e612      	b.n	8000844 <__aeabi_dadd+0x9c>
 8000c1e:	0021      	movs	r1, r4
 8000c20:	4301      	orrs	r1, r0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x47e>
 8000c24:	e0c4      	b.n	8000db0 <__aeabi_dadd+0x608>
 8000c26:	1e51      	subs	r1, r2, #1
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x486>
 8000c2c:	e0fb      	b.n	8000e26 <__aeabi_dadd+0x67e>
 8000c2e:	4d8d      	ldr	r5, [pc, #564]	@ (8000e64 <__aeabi_dadd+0x6bc>)
 8000c30:	42aa      	cmp	r2, r5
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x48e>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_dadd+0x5fa>
 8000c36:	2501      	movs	r5, #1
 8000c38:	2938      	cmp	r1, #56	@ 0x38
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_dadd+0x496>
 8000c3c:	e741      	b.n	8000ac2 <__aeabi_dadd+0x31a>
 8000c3e:	000a      	movs	r2, r1
 8000c40:	e72f      	b.n	8000aa2 <__aeabi_dadd+0x2fa>
 8000c42:	4c89      	ldr	r4, [pc, #548]	@ (8000e68 <__aeabi_dadd+0x6c0>)
 8000c44:	1aff      	subs	r7, r7, r3
 8000c46:	4014      	ands	r4, r2
 8000c48:	0762      	lsls	r2, r4, #29
 8000c4a:	08e4      	lsrs	r4, r4, #3
 8000c4c:	e76a      	b.n	8000b24 <__aeabi_dadd+0x37c>
 8000c4e:	4a85      	ldr	r2, [pc, #532]	@ (8000e64 <__aeabi_dadd+0x6bc>)
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x4ae>
 8000c54:	e0e3      	b.n	8000e1e <__aeabi_dadd+0x676>
 8000c56:	4663      	mov	r3, ip
 8000c58:	18c2      	adds	r2, r0, r3
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	4180      	sbcs	r0, r0
 8000c5e:	0023      	movs	r3, r4
 8000c60:	4240      	negs	r0, r0
 8000c62:	4453      	add	r3, sl
 8000c64:	181b      	adds	r3, r3, r0
 8000c66:	07dd      	lsls	r5, r3, #31
 8000c68:	085c      	lsrs	r4, r3, #1
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	0852      	lsrs	r2, r2, #1
 8000c6e:	4315      	orrs	r5, r2
 8000c70:	000f      	movs	r7, r1
 8000c72:	402b      	ands	r3, r5
 8000c74:	e700      	b.n	8000a78 <__aeabi_dadd+0x2d0>
 8000c76:	4663      	mov	r3, ip
 8000c78:	1a1d      	subs	r5, r3, r0
 8000c7a:	45ac      	cmp	ip, r5
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	4653      	mov	r3, sl
 8000c80:	4252      	negs	r2, r2
 8000c82:	1b1c      	subs	r4, r3, r4
 8000c84:	000e      	movs	r6, r1
 8000c86:	4688      	mov	r8, r1
 8000c88:	1aa4      	subs	r4, r4, r2
 8000c8a:	e5e5      	b.n	8000858 <__aeabi_dadd+0xb0>
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dadd+0x4ea>
 8000c90:	e091      	b.n	8000db6 <__aeabi_dadd+0x60e>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d138      	bne.n	8000d08 <__aeabi_dadd+0x560>
 8000c96:	2480      	movs	r4, #128	@ 0x80
 8000c98:	2600      	movs	r6, #0
 8000c9a:	0324      	lsls	r4, r4, #12
 8000c9c:	e756      	b.n	8000b4c <__aeabi_dadd+0x3a4>
 8000c9e:	4663      	mov	r3, ip
 8000ca0:	18c5      	adds	r5, r0, r3
 8000ca2:	4285      	cmp	r5, r0
 8000ca4:	4180      	sbcs	r0, r0
 8000ca6:	4454      	add	r4, sl
 8000ca8:	4240      	negs	r0, r0
 8000caa:	1824      	adds	r4, r4, r0
 8000cac:	2701      	movs	r7, #1
 8000cae:	0223      	lsls	r3, r4, #8
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_dadd+0x50c>
 8000cb2:	e6df      	b.n	8000a74 <__aeabi_dadd+0x2cc>
 8000cb4:	2702      	movs	r7, #2
 8000cb6:	e687      	b.n	80009c8 <__aeabi_dadd+0x220>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	1ac5      	subs	r5, r0, r3
 8000cbc:	42a8      	cmp	r0, r5
 8000cbe:	4180      	sbcs	r0, r0
 8000cc0:	4653      	mov	r3, sl
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	1ae4      	subs	r4, r4, r3
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	1a24      	subs	r4, r4, r0
 8000cca:	e5c0      	b.n	800084e <__aeabi_dadd+0xa6>
 8000ccc:	0762      	lsls	r2, r4, #29
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	4302      	orrs	r2, r0
 8000cd2:	08e4      	lsrs	r4, r4, #3
 8000cd4:	e736      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	4653      	mov	r3, sl
 8000cda:	3920      	subs	r1, #32
 8000cdc:	40cb      	lsrs	r3, r1
 8000cde:	4699      	mov	r9, r3
 8000ce0:	2a20      	cmp	r2, #32
 8000ce2:	d006      	beq.n	8000cf2 <__aeabi_dadd+0x54a>
 8000ce4:	2140      	movs	r1, #64	@ 0x40
 8000ce6:	4653      	mov	r3, sl
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	4662      	mov	r2, ip
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	4665      	mov	r5, ip
 8000cf4:	1e6b      	subs	r3, r5, #1
 8000cf6:	419d      	sbcs	r5, r3
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	e659      	b.n	80009b2 <__aeabi_dadd+0x20a>
 8000cfe:	0762      	lsls	r2, r4, #29
 8000d00:	08c0      	lsrs	r0, r0, #3
 8000d02:	4302      	orrs	r2, r0
 8000d04:	08e4      	lsrs	r4, r4, #3
 8000d06:	e70d      	b.n	8000b24 <__aeabi_dadd+0x37c>
 8000d08:	4653      	mov	r3, sl
 8000d0a:	075a      	lsls	r2, r3, #29
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	08d8      	lsrs	r0, r3, #3
 8000d10:	4653      	mov	r3, sl
 8000d12:	000e      	movs	r6, r1
 8000d14:	4302      	orrs	r2, r0
 8000d16:	08dc      	lsrs	r4, r3, #3
 8000d18:	e714      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000d1a:	0015      	movs	r5, r2
 8000d1c:	0026      	movs	r6, r4
 8000d1e:	3d20      	subs	r5, #32
 8000d20:	40ee      	lsrs	r6, r5
 8000d22:	2a20      	cmp	r2, #32
 8000d24:	d003      	beq.n	8000d2e <__aeabi_dadd+0x586>
 8000d26:	2540      	movs	r5, #64	@ 0x40
 8000d28:	1aaa      	subs	r2, r5, r2
 8000d2a:	4094      	lsls	r4, r2
 8000d2c:	4320      	orrs	r0, r4
 8000d2e:	1e42      	subs	r2, r0, #1
 8000d30:	4190      	sbcs	r0, r2
 8000d32:	0005      	movs	r5, r0
 8000d34:	4335      	orrs	r5, r6
 8000d36:	e606      	b.n	8000946 <__aeabi_dadd+0x19e>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d07c      	beq.n	8000e36 <__aeabi_dadd+0x68e>
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	4653      	mov	r3, sl
 8000d40:	08c0      	lsrs	r0, r0, #3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x5a0>
 8000d46:	e6fa      	b.n	8000b3e <__aeabi_dadd+0x396>
 8000d48:	0762      	lsls	r2, r4, #29
 8000d4a:	4310      	orrs	r0, r2
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	08e4      	lsrs	r4, r4, #3
 8000d50:	0312      	lsls	r2, r2, #12
 8000d52:	4214      	tst	r4, r2
 8000d54:	d008      	beq.n	8000d68 <__aeabi_dadd+0x5c0>
 8000d56:	08d9      	lsrs	r1, r3, #3
 8000d58:	4211      	tst	r1, r2
 8000d5a:	d105      	bne.n	8000d68 <__aeabi_dadd+0x5c0>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	08d8      	lsrs	r0, r3, #3
 8000d60:	4653      	mov	r3, sl
 8000d62:	000c      	movs	r4, r1
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	4318      	orrs	r0, r3
 8000d68:	0f42      	lsrs	r2, r0, #29
 8000d6a:	00c0      	lsls	r0, r0, #3
 8000d6c:	08c0      	lsrs	r0, r0, #3
 8000d6e:	0752      	lsls	r2, r2, #29
 8000d70:	4302      	orrs	r2, r0
 8000d72:	e6e7      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x5d2>
 8000d78:	e72d      	b.n	8000bd6 <__aeabi_dadd+0x42e>
 8000d7a:	4663      	mov	r3, ip
 8000d7c:	08d8      	lsrs	r0, r3, #3
 8000d7e:	4653      	mov	r3, sl
 8000d80:	075a      	lsls	r2, r3, #29
 8000d82:	000e      	movs	r6, r1
 8000d84:	4302      	orrs	r2, r0
 8000d86:	08dc      	lsrs	r4, r3, #3
 8000d88:	e6cc      	b.n	8000b24 <__aeabi_dadd+0x37c>
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	1a1d      	subs	r5, r3, r0
 8000d8e:	45ac      	cmp	ip, r5
 8000d90:	4192      	sbcs	r2, r2
 8000d92:	4653      	mov	r3, sl
 8000d94:	4252      	negs	r2, r2
 8000d96:	1b1c      	subs	r4, r3, r4
 8000d98:	000e      	movs	r6, r1
 8000d9a:	4688      	mov	r8, r1
 8000d9c:	1aa4      	subs	r4, r4, r2
 8000d9e:	3701      	adds	r7, #1
 8000da0:	e555      	b.n	800084e <__aeabi_dadd+0xa6>
 8000da2:	4663      	mov	r3, ip
 8000da4:	08d9      	lsrs	r1, r3, #3
 8000da6:	4653      	mov	r3, sl
 8000da8:	075a      	lsls	r2, r3, #29
 8000daa:	430a      	orrs	r2, r1
 8000dac:	08dc      	lsrs	r4, r3, #3
 8000dae:	e6c9      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000db0:	4660      	mov	r0, ip
 8000db2:	4654      	mov	r4, sl
 8000db4:	e6d4      	b.n	8000b60 <__aeabi_dadd+0x3b8>
 8000db6:	08c0      	lsrs	r0, r0, #3
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dadd+0x616>
 8000dbc:	e6bf      	b.n	8000b3e <__aeabi_dadd+0x396>
 8000dbe:	0762      	lsls	r2, r4, #29
 8000dc0:	4310      	orrs	r0, r2
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	08e4      	lsrs	r4, r4, #3
 8000dc6:	0312      	lsls	r2, r2, #12
 8000dc8:	4214      	tst	r4, r2
 8000dca:	d0cd      	beq.n	8000d68 <__aeabi_dadd+0x5c0>
 8000dcc:	08dd      	lsrs	r5, r3, #3
 8000dce:	4215      	tst	r5, r2
 8000dd0:	d1ca      	bne.n	8000d68 <__aeabi_dadd+0x5c0>
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	08d8      	lsrs	r0, r3, #3
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	000e      	movs	r6, r1
 8000ddc:	002c      	movs	r4, r5
 8000dde:	4318      	orrs	r0, r3
 8000de0:	e7c2      	b.n	8000d68 <__aeabi_dadd+0x5c0>
 8000de2:	4663      	mov	r3, ip
 8000de4:	08d9      	lsrs	r1, r3, #3
 8000de6:	4653      	mov	r3, sl
 8000de8:	075a      	lsls	r2, r3, #29
 8000dea:	430a      	orrs	r2, r1
 8000dec:	08dc      	lsrs	r4, r3, #3
 8000dee:	e699      	b.n	8000b24 <__aeabi_dadd+0x37c>
 8000df0:	4663      	mov	r3, ip
 8000df2:	08d8      	lsrs	r0, r3, #3
 8000df4:	4653      	mov	r3, sl
 8000df6:	075a      	lsls	r2, r3, #29
 8000df8:	000e      	movs	r6, r1
 8000dfa:	4302      	orrs	r2, r0
 8000dfc:	08dc      	lsrs	r4, r3, #3
 8000dfe:	e6a1      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000e00:	0011      	movs	r1, r2
 8000e02:	0027      	movs	r7, r4
 8000e04:	3920      	subs	r1, #32
 8000e06:	40cf      	lsrs	r7, r1
 8000e08:	2a20      	cmp	r2, #32
 8000e0a:	d003      	beq.n	8000e14 <__aeabi_dadd+0x66c>
 8000e0c:	2140      	movs	r1, #64	@ 0x40
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	4094      	lsls	r4, r2
 8000e12:	4320      	orrs	r0, r4
 8000e14:	1e42      	subs	r2, r0, #1
 8000e16:	4190      	sbcs	r0, r2
 8000e18:	0005      	movs	r5, r0
 8000e1a:	433d      	orrs	r5, r7
 8000e1c:	e651      	b.n	8000ac2 <__aeabi_dadd+0x31a>
 8000e1e:	000c      	movs	r4, r1
 8000e20:	2500      	movs	r5, #0
 8000e22:	2200      	movs	r2, #0
 8000e24:	e558      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000e26:	4460      	add	r0, ip
 8000e28:	4560      	cmp	r0, ip
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4454      	add	r4, sl
 8000e2e:	4252      	negs	r2, r2
 8000e30:	0005      	movs	r5, r0
 8000e32:	18a4      	adds	r4, r4, r2
 8000e34:	e73a      	b.n	8000cac <__aeabi_dadd+0x504>
 8000e36:	4653      	mov	r3, sl
 8000e38:	075a      	lsls	r2, r3, #29
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	08d9      	lsrs	r1, r3, #3
 8000e3e:	4653      	mov	r3, sl
 8000e40:	430a      	orrs	r2, r1
 8000e42:	08dc      	lsrs	r4, r3, #3
 8000e44:	e67e      	b.n	8000b44 <__aeabi_dadd+0x39c>
 8000e46:	001a      	movs	r2, r3
 8000e48:	001c      	movs	r4, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_dadd+0x6a8>
 8000e4e:	e6ab      	b.n	8000ba8 <__aeabi_dadd+0x400>
 8000e50:	e6c1      	b.n	8000bd6 <__aeabi_dadd+0x42e>
 8000e52:	2120      	movs	r1, #32
 8000e54:	2500      	movs	r5, #0
 8000e56:	1a09      	subs	r1, r1, r0
 8000e58:	e519      	b.n	800088e <__aeabi_dadd+0xe6>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	4c01      	ldr	r4, [pc, #4]	@ (8000e64 <__aeabi_dadd+0x6bc>)
 8000e60:	e53a      	b.n	80008d8 <__aeabi_dadd+0x130>
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	000007ff 	.word	0x000007ff
 8000e68:	ff7fffff 	.word	0xff7fffff
 8000e6c:	000007fe 	.word	0x000007fe

08000e70 <__aeabi_ddiv>:
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	46de      	mov	lr, fp
 8000e74:	4645      	mov	r5, r8
 8000e76:	4657      	mov	r7, sl
 8000e78:	464e      	mov	r6, r9
 8000e7a:	b5e0      	push	{r5, r6, r7, lr}
 8000e7c:	b087      	sub	sp, #28
 8000e7e:	9200      	str	r2, [sp, #0]
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	030b      	lsls	r3, r1, #12
 8000e84:	0b1b      	lsrs	r3, r3, #12
 8000e86:	469b      	mov	fp, r3
 8000e88:	0fca      	lsrs	r2, r1, #31
 8000e8a:	004b      	lsls	r3, r1, #1
 8000e8c:	0004      	movs	r4, r0
 8000e8e:	4680      	mov	r8, r0
 8000e90:	0d5b      	lsrs	r3, r3, #21
 8000e92:	9202      	str	r2, [sp, #8]
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x28>
 8000e96:	e16a      	b.n	800116e <__aeabi_ddiv+0x2fe>
 8000e98:	4ad4      	ldr	r2, [pc, #848]	@ (80011ec <__aeabi_ddiv+0x37c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x30>
 8000e9e:	e18c      	b.n	80011ba <__aeabi_ddiv+0x34a>
 8000ea0:	4659      	mov	r1, fp
 8000ea2:	0f42      	lsrs	r2, r0, #29
 8000ea4:	00c9      	lsls	r1, r1, #3
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	2180      	movs	r1, #128	@ 0x80
 8000eaa:	0409      	lsls	r1, r1, #16
 8000eac:	4311      	orrs	r1, r2
 8000eae:	00c2      	lsls	r2, r0, #3
 8000eb0:	4690      	mov	r8, r2
 8000eb2:	4acf      	ldr	r2, [pc, #828]	@ (80011f0 <__aeabi_ddiv+0x380>)
 8000eb4:	4689      	mov	r9, r1
 8000eb6:	4692      	mov	sl, r2
 8000eb8:	449a      	add	sl, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9e00      	ldr	r6, [sp, #0]
 8000ec2:	9f01      	ldr	r7, [sp, #4]
 8000ec4:	033b      	lsls	r3, r7, #12
 8000ec6:	0b1b      	lsrs	r3, r3, #12
 8000ec8:	469b      	mov	fp, r3
 8000eca:	007b      	lsls	r3, r7, #1
 8000ecc:	0030      	movs	r0, r6
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0ffd      	lsrs	r5, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x68>
 8000ed6:	e128      	b.n	800112a <__aeabi_ddiv+0x2ba>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	@ (80011ec <__aeabi_ddiv+0x37c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x70>
 8000ede:	e177      	b.n	80011d0 <__aeabi_ddiv+0x360>
 8000ee0:	4659      	mov	r1, fp
 8000ee2:	0f72      	lsrs	r2, r6, #29
 8000ee4:	00c9      	lsls	r1, r1, #3
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	0409      	lsls	r1, r1, #16
 8000eec:	4311      	orrs	r1, r2
 8000eee:	468b      	mov	fp, r1
 8000ef0:	49bf      	ldr	r1, [pc, #764]	@ (80011f0 <__aeabi_ddiv+0x380>)
 8000ef2:	00f2      	lsls	r2, r6, #3
 8000ef4:	468c      	mov	ip, r1
 8000ef6:	4651      	mov	r1, sl
 8000ef8:	4463      	add	r3, ip
 8000efa:	1acb      	subs	r3, r1, r3
 8000efc:	469a      	mov	sl, r3
 8000efe:	2300      	movs	r3, #0
 8000f00:	9e02      	ldr	r6, [sp, #8]
 8000f02:	406e      	eors	r6, r5
 8000f04:	2c0f      	cmp	r4, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xe8>
 8000f08:	49ba      	ldr	r1, [pc, #744]	@ (80011f4 <__aeabi_ddiv+0x384>)
 8000f0a:	00a4      	lsls	r4, r4, #2
 8000f0c:	5909      	ldr	r1, [r1, r4]
 8000f0e:	468f      	mov	pc, r1
 8000f10:	46cb      	mov	fp, r9
 8000f12:	4642      	mov	r2, r8
 8000f14:	9e02      	ldr	r6, [sp, #8]
 8000f16:	9b03      	ldr	r3, [sp, #12]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d016      	beq.n	8000f4a <__aeabi_ddiv+0xda>
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0xb2>
 8000f20:	e2a6      	b.n	8001470 <__aeabi_ddiv+0x600>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d000      	beq.n	8000f28 <__aeabi_ddiv+0xb8>
 8000f26:	e0df      	b.n	80010e8 <__aeabi_ddiv+0x278>
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2400      	movs	r4, #0
 8000f2e:	4690      	mov	r8, r2
 8000f30:	051b      	lsls	r3, r3, #20
 8000f32:	4323      	orrs	r3, r4
 8000f34:	07f6      	lsls	r6, r6, #31
 8000f36:	4333      	orrs	r3, r6
 8000f38:	4640      	mov	r0, r8
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	b007      	add	sp, #28
 8000f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f40:	46bb      	mov	fp, r7
 8000f42:	46b2      	mov	sl, r6
 8000f44:	46a9      	mov	r9, r5
 8000f46:	46a0      	mov	r8, r4
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	4ba6      	ldr	r3, [pc, #664]	@ (80011ec <__aeabi_ddiv+0x37c>)
 8000f52:	e7ed      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 8000f54:	002e      	movs	r6, r5
 8000f56:	e7df      	b.n	8000f18 <__aeabi_ddiv+0xa8>
 8000f58:	45cb      	cmp	fp, r9
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xee>
 8000f5c:	e1d4      	b.n	8001308 <__aeabi_ddiv+0x498>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xf2>
 8000f60:	e1cf      	b.n	8001302 <__aeabi_ddiv+0x492>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	4644      	mov	r4, r8
 8000f6a:	4648      	mov	r0, r9
 8000f6c:	2700      	movs	r7, #0
 8000f6e:	44e2      	add	sl, ip
 8000f70:	465b      	mov	r3, fp
 8000f72:	0e15      	lsrs	r5, r2, #24
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	431d      	orrs	r5, r3
 8000f78:	0c19      	lsrs	r1, r3, #16
 8000f7a:	042b      	lsls	r3, r5, #16
 8000f7c:	0212      	lsls	r2, r2, #8
 8000f7e:	9500      	str	r5, [sp, #0]
 8000f80:	0c1d      	lsrs	r5, r3, #16
 8000f82:	4691      	mov	r9, r2
 8000f84:	9102      	str	r1, [sp, #8]
 8000f86:	9503      	str	r5, [sp, #12]
 8000f88:	f7ff f960 	bl	800024c <__aeabi_uidivmod>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	436a      	muls	r2, r5
 8000f90:	040b      	lsls	r3, r1, #16
 8000f92:	0c21      	lsrs	r1, r4, #16
 8000f94:	4680      	mov	r8, r0
 8000f96:	4319      	orrs	r1, r3
 8000f98:	428a      	cmp	r2, r1
 8000f9a:	d909      	bls.n	8000fb0 <__aeabi_ddiv+0x140>
 8000f9c:	9d00      	ldr	r5, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	46ac      	mov	ip, r5
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	4461      	add	r1, ip
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	44e0      	add	r8, ip
 8000faa:	428d      	cmp	r5, r1
 8000fac:	d800      	bhi.n	8000fb0 <__aeabi_ddiv+0x140>
 8000fae:	e1fb      	b.n	80013a8 <__aeabi_ddiv+0x538>
 8000fb0:	1a88      	subs	r0, r1, r2
 8000fb2:	9902      	ldr	r1, [sp, #8]
 8000fb4:	f7ff f94a 	bl	800024c <__aeabi_uidivmod>
 8000fb8:	9a03      	ldr	r2, [sp, #12]
 8000fba:	0424      	lsls	r4, r4, #16
 8000fbc:	4342      	muls	r2, r0
 8000fbe:	0409      	lsls	r1, r1, #16
 8000fc0:	0c24      	lsrs	r4, r4, #16
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	430c      	orrs	r4, r1
 8000fc6:	42a2      	cmp	r2, r4
 8000fc8:	d906      	bls.n	8000fd8 <__aeabi_ddiv+0x168>
 8000fca:	9900      	ldr	r1, [sp, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4464      	add	r4, ip
 8000fd2:	42a1      	cmp	r1, r4
 8000fd4:	d800      	bhi.n	8000fd8 <__aeabi_ddiv+0x168>
 8000fd6:	e1e1      	b.n	800139c <__aeabi_ddiv+0x52c>
 8000fd8:	1aa0      	subs	r0, r4, r2
 8000fda:	4642      	mov	r2, r8
 8000fdc:	0412      	lsls	r2, r2, #16
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	4693      	mov	fp, r2
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	4659      	mov	r1, fp
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	001d      	movs	r5, r3
 8000fea:	9304      	str	r3, [sp, #16]
 8000fec:	040b      	lsls	r3, r1, #16
 8000fee:	4649      	mov	r1, r9
 8000ff0:	0409      	lsls	r1, r1, #16
 8000ff2:	0c09      	lsrs	r1, r1, #16
 8000ff4:	000c      	movs	r4, r1
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	435c      	muls	r4, r3
 8000ffa:	0c12      	lsrs	r2, r2, #16
 8000ffc:	436b      	muls	r3, r5
 8000ffe:	4688      	mov	r8, r1
 8001000:	4351      	muls	r1, r2
 8001002:	436a      	muls	r2, r5
 8001004:	0c25      	lsrs	r5, r4, #16
 8001006:	46ac      	mov	ip, r5
 8001008:	185b      	adds	r3, r3, r1
 800100a:	4463      	add	r3, ip
 800100c:	4299      	cmp	r1, r3
 800100e:	d903      	bls.n	8001018 <__aeabi_ddiv+0x1a8>
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0249      	lsls	r1, r1, #9
 8001014:	468c      	mov	ip, r1
 8001016:	4462      	add	r2, ip
 8001018:	0c19      	lsrs	r1, r3, #16
 800101a:	0424      	lsls	r4, r4, #16
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	0c24      	lsrs	r4, r4, #16
 8001020:	188a      	adds	r2, r1, r2
 8001022:	191c      	adds	r4, r3, r4
 8001024:	4290      	cmp	r0, r2
 8001026:	d302      	bcc.n	800102e <__aeabi_ddiv+0x1be>
 8001028:	d116      	bne.n	8001058 <__aeabi_ddiv+0x1e8>
 800102a:	42a7      	cmp	r7, r4
 800102c:	d214      	bcs.n	8001058 <__aeabi_ddiv+0x1e8>
 800102e:	465b      	mov	r3, fp
 8001030:	9d00      	ldr	r5, [sp, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	444f      	add	r7, r9
 8001036:	9305      	str	r3, [sp, #20]
 8001038:	454f      	cmp	r7, r9
 800103a:	419b      	sbcs	r3, r3
 800103c:	46ac      	mov	ip, r5
 800103e:	425b      	negs	r3, r3
 8001040:	4463      	add	r3, ip
 8001042:	18c0      	adds	r0, r0, r3
 8001044:	4285      	cmp	r5, r0
 8001046:	d300      	bcc.n	800104a <__aeabi_ddiv+0x1da>
 8001048:	e1a1      	b.n	800138e <__aeabi_ddiv+0x51e>
 800104a:	4282      	cmp	r2, r0
 800104c:	d900      	bls.n	8001050 <__aeabi_ddiv+0x1e0>
 800104e:	e1f6      	b.n	800143e <__aeabi_ddiv+0x5ce>
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1e4>
 8001052:	e1f1      	b.n	8001438 <__aeabi_ddiv+0x5c8>
 8001054:	9b05      	ldr	r3, [sp, #20]
 8001056:	469b      	mov	fp, r3
 8001058:	1b3c      	subs	r4, r7, r4
 800105a:	42a7      	cmp	r7, r4
 800105c:	41bf      	sbcs	r7, r7
 800105e:	9d00      	ldr	r5, [sp, #0]
 8001060:	1a80      	subs	r0, r0, r2
 8001062:	427f      	negs	r7, r7
 8001064:	1bc0      	subs	r0, r0, r7
 8001066:	4285      	cmp	r5, r0
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x1fc>
 800106a:	e1d0      	b.n	800140e <__aeabi_ddiv+0x59e>
 800106c:	9902      	ldr	r1, [sp, #8]
 800106e:	f7ff f8ed 	bl	800024c <__aeabi_uidivmod>
 8001072:	9a03      	ldr	r2, [sp, #12]
 8001074:	040b      	lsls	r3, r1, #16
 8001076:	4342      	muls	r2, r0
 8001078:	0c21      	lsrs	r1, r4, #16
 800107a:	0007      	movs	r7, r0
 800107c:	4319      	orrs	r1, r3
 800107e:	428a      	cmp	r2, r1
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x214>
 8001082:	e178      	b.n	8001376 <__aeabi_ddiv+0x506>
 8001084:	1a88      	subs	r0, r1, r2
 8001086:	9902      	ldr	r1, [sp, #8]
 8001088:	f7ff f8e0 	bl	800024c <__aeabi_uidivmod>
 800108c:	9a03      	ldr	r2, [sp, #12]
 800108e:	0424      	lsls	r4, r4, #16
 8001090:	4342      	muls	r2, r0
 8001092:	0409      	lsls	r1, r1, #16
 8001094:	0c24      	lsrs	r4, r4, #16
 8001096:	0003      	movs	r3, r0
 8001098:	430c      	orrs	r4, r1
 800109a:	42a2      	cmp	r2, r4
 800109c:	d900      	bls.n	80010a0 <__aeabi_ddiv+0x230>
 800109e:	e15d      	b.n	800135c <__aeabi_ddiv+0x4ec>
 80010a0:	4641      	mov	r1, r8
 80010a2:	1aa4      	subs	r4, r4, r2
 80010a4:	043a      	lsls	r2, r7, #16
 80010a6:	431a      	orrs	r2, r3
 80010a8:	9d04      	ldr	r5, [sp, #16]
 80010aa:	0413      	lsls	r3, r2, #16
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	4359      	muls	r1, r3
 80010b0:	4647      	mov	r7, r8
 80010b2:	436b      	muls	r3, r5
 80010b4:	469c      	mov	ip, r3
 80010b6:	0c10      	lsrs	r0, r2, #16
 80010b8:	4347      	muls	r7, r0
 80010ba:	0c0b      	lsrs	r3, r1, #16
 80010bc:	44bc      	add	ip, r7
 80010be:	4463      	add	r3, ip
 80010c0:	4368      	muls	r0, r5
 80010c2:	429f      	cmp	r7, r3
 80010c4:	d903      	bls.n	80010ce <__aeabi_ddiv+0x25e>
 80010c6:	2580      	movs	r5, #128	@ 0x80
 80010c8:	026d      	lsls	r5, r5, #9
 80010ca:	46ac      	mov	ip, r5
 80010cc:	4460      	add	r0, ip
 80010ce:	0c1f      	lsrs	r7, r3, #16
 80010d0:	0409      	lsls	r1, r1, #16
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	0c09      	lsrs	r1, r1, #16
 80010d6:	183f      	adds	r7, r7, r0
 80010d8:	185b      	adds	r3, r3, r1
 80010da:	42bc      	cmp	r4, r7
 80010dc:	d200      	bcs.n	80010e0 <__aeabi_ddiv+0x270>
 80010de:	e102      	b.n	80012e6 <__aeabi_ddiv+0x476>
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x274>
 80010e2:	e0fd      	b.n	80012e0 <__aeabi_ddiv+0x470>
 80010e4:	2301      	movs	r3, #1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <__aeabi_ddiv+0x388>)
 80010ea:	4453      	add	r3, sl
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x282>
 80010f0:	e0ae      	b.n	8001250 <__aeabi_ddiv+0x3e0>
 80010f2:	0751      	lsls	r1, r2, #29
 80010f4:	d000      	beq.n	80010f8 <__aeabi_ddiv+0x288>
 80010f6:	e198      	b.n	800142a <__aeabi_ddiv+0x5ba>
 80010f8:	4659      	mov	r1, fp
 80010fa:	01c9      	lsls	r1, r1, #7
 80010fc:	d506      	bpl.n	800110c <__aeabi_ddiv+0x29c>
 80010fe:	4659      	mov	r1, fp
 8001100:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <__aeabi_ddiv+0x38c>)
 8001102:	4019      	ands	r1, r3
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	468b      	mov	fp, r1
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4453      	add	r3, sl
 800110c:	493c      	ldr	r1, [pc, #240]	@ (8001200 <__aeabi_ddiv+0x390>)
 800110e:	428b      	cmp	r3, r1
 8001110:	dd00      	ble.n	8001114 <__aeabi_ddiv+0x2a4>
 8001112:	e71a      	b.n	8000f4a <__aeabi_ddiv+0xda>
 8001114:	4659      	mov	r1, fp
 8001116:	08d2      	lsrs	r2, r2, #3
 8001118:	0749      	lsls	r1, r1, #29
 800111a:	4311      	orrs	r1, r2
 800111c:	465a      	mov	r2, fp
 800111e:	055b      	lsls	r3, r3, #21
 8001120:	0254      	lsls	r4, r2, #9
 8001122:	4688      	mov	r8, r1
 8001124:	0b24      	lsrs	r4, r4, #12
 8001126:	0d5b      	lsrs	r3, r3, #21
 8001128:	e702      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 800112a:	465a      	mov	r2, fp
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	431a      	orrs	r2, r3
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x2c4>
 8001132:	e07e      	b.n	8001232 <__aeabi_ddiv+0x3c2>
 8001134:	465b      	mov	r3, fp
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x2cc>
 800113a:	e100      	b.n	800133e <__aeabi_ddiv+0x4ce>
 800113c:	4658      	mov	r0, fp
 800113e:	f001 fa37 	bl	80025b0 <__clzsi2>
 8001142:	0002      	movs	r2, r0
 8001144:	0003      	movs	r3, r0
 8001146:	3a0b      	subs	r2, #11
 8001148:	271d      	movs	r7, #29
 800114a:	9e00      	ldr	r6, [sp, #0]
 800114c:	1aba      	subs	r2, r7, r2
 800114e:	0019      	movs	r1, r3
 8001150:	4658      	mov	r0, fp
 8001152:	40d6      	lsrs	r6, r2
 8001154:	3908      	subs	r1, #8
 8001156:	4088      	lsls	r0, r1
 8001158:	0032      	movs	r2, r6
 800115a:	4302      	orrs	r2, r0
 800115c:	4693      	mov	fp, r2
 800115e:	9a00      	ldr	r2, [sp, #0]
 8001160:	408a      	lsls	r2, r1
 8001162:	4928      	ldr	r1, [pc, #160]	@ (8001204 <__aeabi_ddiv+0x394>)
 8001164:	4453      	add	r3, sl
 8001166:	468a      	mov	sl, r1
 8001168:	449a      	add	sl, r3
 800116a:	2300      	movs	r3, #0
 800116c:	e6c8      	b.n	8000f00 <__aeabi_ddiv+0x90>
 800116e:	465b      	mov	r3, fp
 8001170:	4303      	orrs	r3, r0
 8001172:	4699      	mov	r9, r3
 8001174:	d056      	beq.n	8001224 <__aeabi_ddiv+0x3b4>
 8001176:	465b      	mov	r3, fp
 8001178:	2b00      	cmp	r3, #0
 800117a:	d100      	bne.n	800117e <__aeabi_ddiv+0x30e>
 800117c:	e0cd      	b.n	800131a <__aeabi_ddiv+0x4aa>
 800117e:	4658      	mov	r0, fp
 8001180:	f001 fa16 	bl	80025b0 <__clzsi2>
 8001184:	230b      	movs	r3, #11
 8001186:	425b      	negs	r3, r3
 8001188:	469c      	mov	ip, r3
 800118a:	0002      	movs	r2, r0
 800118c:	4484      	add	ip, r0
 800118e:	4666      	mov	r6, ip
 8001190:	231d      	movs	r3, #29
 8001192:	1b9b      	subs	r3, r3, r6
 8001194:	0026      	movs	r6, r4
 8001196:	0011      	movs	r1, r2
 8001198:	4658      	mov	r0, fp
 800119a:	40de      	lsrs	r6, r3
 800119c:	3908      	subs	r1, #8
 800119e:	4088      	lsls	r0, r1
 80011a0:	0033      	movs	r3, r6
 80011a2:	4303      	orrs	r3, r0
 80011a4:	4699      	mov	r9, r3
 80011a6:	0023      	movs	r3, r4
 80011a8:	408b      	lsls	r3, r1
 80011aa:	4698      	mov	r8, r3
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <__aeabi_ddiv+0x398>)
 80011ae:	2400      	movs	r4, #0
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	469a      	mov	sl, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	e682      	b.n	8000ec0 <__aeabi_ddiv+0x50>
 80011ba:	465a      	mov	r2, fp
 80011bc:	4302      	orrs	r2, r0
 80011be:	4691      	mov	r9, r2
 80011c0:	d12a      	bne.n	8001218 <__aeabi_ddiv+0x3a8>
 80011c2:	2200      	movs	r2, #0
 80011c4:	469a      	mov	sl, r3
 80011c6:	2302      	movs	r3, #2
 80011c8:	4690      	mov	r8, r2
 80011ca:	2408      	movs	r4, #8
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	e677      	b.n	8000ec0 <__aeabi_ddiv+0x50>
 80011d0:	465a      	mov	r2, fp
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <__aeabi_ddiv+0x39c>)
 80011d8:	469c      	mov	ip, r3
 80011da:	44e2      	add	sl, ip
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d117      	bne.n	8001210 <__aeabi_ddiv+0x3a0>
 80011e0:	2302      	movs	r3, #2
 80011e2:	431c      	orrs	r4, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	469b      	mov	fp, r3
 80011e8:	3302      	adds	r3, #2
 80011ea:	e689      	b.n	8000f00 <__aeabi_ddiv+0x90>
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	08007890 	.word	0x08007890
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	2303      	movs	r3, #3
 8001212:	0032      	movs	r2, r6
 8001214:	431c      	orrs	r4, r3
 8001216:	e673      	b.n	8000f00 <__aeabi_ddiv+0x90>
 8001218:	469a      	mov	sl, r3
 800121a:	2303      	movs	r3, #3
 800121c:	46d9      	mov	r9, fp
 800121e:	240c      	movs	r4, #12
 8001220:	9303      	str	r3, [sp, #12]
 8001222:	e64d      	b.n	8000ec0 <__aeabi_ddiv+0x50>
 8001224:	2300      	movs	r3, #0
 8001226:	4698      	mov	r8, r3
 8001228:	469a      	mov	sl, r3
 800122a:	3301      	adds	r3, #1
 800122c:	2404      	movs	r4, #4
 800122e:	9303      	str	r3, [sp, #12]
 8001230:	e646      	b.n	8000ec0 <__aeabi_ddiv+0x50>
 8001232:	2301      	movs	r3, #1
 8001234:	431c      	orrs	r4, r3
 8001236:	2300      	movs	r3, #0
 8001238:	469b      	mov	fp, r3
 800123a:	3301      	adds	r3, #1
 800123c:	e660      	b.n	8000f00 <__aeabi_ddiv+0x90>
 800123e:	2300      	movs	r3, #0
 8001240:	2480      	movs	r4, #128	@ 0x80
 8001242:	4698      	mov	r8, r3
 8001244:	2600      	movs	r6, #0
 8001246:	4b92      	ldr	r3, [pc, #584]	@ (8001490 <__aeabi_ddiv+0x620>)
 8001248:	0324      	lsls	r4, r4, #12
 800124a:	e671      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 800124c:	2201      	movs	r2, #1
 800124e:	4252      	negs	r2, r2
 8001250:	2101      	movs	r1, #1
 8001252:	1ac9      	subs	r1, r1, r3
 8001254:	2938      	cmp	r1, #56	@ 0x38
 8001256:	dd00      	ble.n	800125a <__aeabi_ddiv+0x3ea>
 8001258:	e666      	b.n	8000f28 <__aeabi_ddiv+0xb8>
 800125a:	291f      	cmp	r1, #31
 800125c:	dc00      	bgt.n	8001260 <__aeabi_ddiv+0x3f0>
 800125e:	e0ab      	b.n	80013b8 <__aeabi_ddiv+0x548>
 8001260:	201f      	movs	r0, #31
 8001262:	4240      	negs	r0, r0
 8001264:	1ac3      	subs	r3, r0, r3
 8001266:	4658      	mov	r0, fp
 8001268:	40d8      	lsrs	r0, r3
 800126a:	0003      	movs	r3, r0
 800126c:	2920      	cmp	r1, #32
 800126e:	d004      	beq.n	800127a <__aeabi_ddiv+0x40a>
 8001270:	4658      	mov	r0, fp
 8001272:	4988      	ldr	r1, [pc, #544]	@ (8001494 <__aeabi_ddiv+0x624>)
 8001274:	4451      	add	r1, sl
 8001276:	4088      	lsls	r0, r1
 8001278:	4302      	orrs	r2, r0
 800127a:	1e51      	subs	r1, r2, #1
 800127c:	418a      	sbcs	r2, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	2307      	movs	r3, #7
 8001282:	0019      	movs	r1, r3
 8001284:	2400      	movs	r4, #0
 8001286:	4011      	ands	r1, r2
 8001288:	4213      	tst	r3, r2
 800128a:	d00c      	beq.n	80012a6 <__aeabi_ddiv+0x436>
 800128c:	230f      	movs	r3, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d100      	bne.n	8001296 <__aeabi_ddiv+0x426>
 8001294:	e0f9      	b.n	800148a <__aeabi_ddiv+0x61a>
 8001296:	1d11      	adds	r1, r2, #4
 8001298:	4291      	cmp	r1, r2
 800129a:	419b      	sbcs	r3, r3
 800129c:	000a      	movs	r2, r1
 800129e:	425b      	negs	r3, r3
 80012a0:	0759      	lsls	r1, r3, #29
 80012a2:	025b      	lsls	r3, r3, #9
 80012a4:	0b1c      	lsrs	r4, r3, #12
 80012a6:	08d2      	lsrs	r2, r2, #3
 80012a8:	430a      	orrs	r2, r1
 80012aa:	4690      	mov	r8, r2
 80012ac:	2300      	movs	r3, #0
 80012ae:	e63f      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 80012b0:	2480      	movs	r4, #128	@ 0x80
 80012b2:	464b      	mov	r3, r9
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	4223      	tst	r3, r4
 80012b8:	d009      	beq.n	80012ce <__aeabi_ddiv+0x45e>
 80012ba:	465b      	mov	r3, fp
 80012bc:	4223      	tst	r3, r4
 80012be:	d106      	bne.n	80012ce <__aeabi_ddiv+0x45e>
 80012c0:	431c      	orrs	r4, r3
 80012c2:	0324      	lsls	r4, r4, #12
 80012c4:	002e      	movs	r6, r5
 80012c6:	4690      	mov	r8, r2
 80012c8:	4b71      	ldr	r3, [pc, #452]	@ (8001490 <__aeabi_ddiv+0x620>)
 80012ca:	0b24      	lsrs	r4, r4, #12
 80012cc:	e630      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 80012ce:	2480      	movs	r4, #128	@ 0x80
 80012d0:	464b      	mov	r3, r9
 80012d2:	0324      	lsls	r4, r4, #12
 80012d4:	431c      	orrs	r4, r3
 80012d6:	0324      	lsls	r4, r4, #12
 80012d8:	9e02      	ldr	r6, [sp, #8]
 80012da:	4b6d      	ldr	r3, [pc, #436]	@ (8001490 <__aeabi_ddiv+0x620>)
 80012dc:	0b24      	lsrs	r4, r4, #12
 80012de:	e627      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x476>
 80012e4:	e700      	b.n	80010e8 <__aeabi_ddiv+0x278>
 80012e6:	9800      	ldr	r0, [sp, #0]
 80012e8:	1e51      	subs	r1, r2, #1
 80012ea:	4684      	mov	ip, r0
 80012ec:	4464      	add	r4, ip
 80012ee:	4284      	cmp	r4, r0
 80012f0:	d200      	bcs.n	80012f4 <__aeabi_ddiv+0x484>
 80012f2:	e084      	b.n	80013fe <__aeabi_ddiv+0x58e>
 80012f4:	42bc      	cmp	r4, r7
 80012f6:	d200      	bcs.n	80012fa <__aeabi_ddiv+0x48a>
 80012f8:	e0ae      	b.n	8001458 <__aeabi_ddiv+0x5e8>
 80012fa:	d100      	bne.n	80012fe <__aeabi_ddiv+0x48e>
 80012fc:	e0c1      	b.n	8001482 <__aeabi_ddiv+0x612>
 80012fe:	000a      	movs	r2, r1
 8001300:	e6f0      	b.n	80010e4 <__aeabi_ddiv+0x274>
 8001302:	4542      	cmp	r2, r8
 8001304:	d900      	bls.n	8001308 <__aeabi_ddiv+0x498>
 8001306:	e62c      	b.n	8000f62 <__aeabi_ddiv+0xf2>
 8001308:	464b      	mov	r3, r9
 800130a:	07dc      	lsls	r4, r3, #31
 800130c:	0858      	lsrs	r0, r3, #1
 800130e:	4643      	mov	r3, r8
 8001310:	085b      	lsrs	r3, r3, #1
 8001312:	431c      	orrs	r4, r3
 8001314:	4643      	mov	r3, r8
 8001316:	07df      	lsls	r7, r3, #31
 8001318:	e62a      	b.n	8000f70 <__aeabi_ddiv+0x100>
 800131a:	f001 f949 	bl	80025b0 <__clzsi2>
 800131e:	2315      	movs	r3, #21
 8001320:	469c      	mov	ip, r3
 8001322:	4484      	add	ip, r0
 8001324:	0002      	movs	r2, r0
 8001326:	4663      	mov	r3, ip
 8001328:	3220      	adds	r2, #32
 800132a:	2b1c      	cmp	r3, #28
 800132c:	dc00      	bgt.n	8001330 <__aeabi_ddiv+0x4c0>
 800132e:	e72e      	b.n	800118e <__aeabi_ddiv+0x31e>
 8001330:	0023      	movs	r3, r4
 8001332:	3808      	subs	r0, #8
 8001334:	4083      	lsls	r3, r0
 8001336:	4699      	mov	r9, r3
 8001338:	2300      	movs	r3, #0
 800133a:	4698      	mov	r8, r3
 800133c:	e736      	b.n	80011ac <__aeabi_ddiv+0x33c>
 800133e:	f001 f937 	bl	80025b0 <__clzsi2>
 8001342:	0002      	movs	r2, r0
 8001344:	0003      	movs	r3, r0
 8001346:	3215      	adds	r2, #21
 8001348:	3320      	adds	r3, #32
 800134a:	2a1c      	cmp	r2, #28
 800134c:	dc00      	bgt.n	8001350 <__aeabi_ddiv+0x4e0>
 800134e:	e6fb      	b.n	8001148 <__aeabi_ddiv+0x2d8>
 8001350:	9900      	ldr	r1, [sp, #0]
 8001352:	3808      	subs	r0, #8
 8001354:	4081      	lsls	r1, r0
 8001356:	2200      	movs	r2, #0
 8001358:	468b      	mov	fp, r1
 800135a:	e702      	b.n	8001162 <__aeabi_ddiv+0x2f2>
 800135c:	9900      	ldr	r1, [sp, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	468c      	mov	ip, r1
 8001362:	4464      	add	r4, ip
 8001364:	42a1      	cmp	r1, r4
 8001366:	d900      	bls.n	800136a <__aeabi_ddiv+0x4fa>
 8001368:	e69a      	b.n	80010a0 <__aeabi_ddiv+0x230>
 800136a:	42a2      	cmp	r2, r4
 800136c:	d800      	bhi.n	8001370 <__aeabi_ddiv+0x500>
 800136e:	e697      	b.n	80010a0 <__aeabi_ddiv+0x230>
 8001370:	1e83      	subs	r3, r0, #2
 8001372:	4464      	add	r4, ip
 8001374:	e694      	b.n	80010a0 <__aeabi_ddiv+0x230>
 8001376:	46ac      	mov	ip, r5
 8001378:	4461      	add	r1, ip
 800137a:	3f01      	subs	r7, #1
 800137c:	428d      	cmp	r5, r1
 800137e:	d900      	bls.n	8001382 <__aeabi_ddiv+0x512>
 8001380:	e680      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001382:	428a      	cmp	r2, r1
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x518>
 8001386:	e67d      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001388:	1e87      	subs	r7, r0, #2
 800138a:	4461      	add	r1, ip
 800138c:	e67a      	b.n	8001084 <__aeabi_ddiv+0x214>
 800138e:	4285      	cmp	r5, r0
 8001390:	d000      	beq.n	8001394 <__aeabi_ddiv+0x524>
 8001392:	e65f      	b.n	8001054 <__aeabi_ddiv+0x1e4>
 8001394:	45b9      	cmp	r9, r7
 8001396:	d900      	bls.n	800139a <__aeabi_ddiv+0x52a>
 8001398:	e65c      	b.n	8001054 <__aeabi_ddiv+0x1e4>
 800139a:	e656      	b.n	800104a <__aeabi_ddiv+0x1da>
 800139c:	42a2      	cmp	r2, r4
 800139e:	d800      	bhi.n	80013a2 <__aeabi_ddiv+0x532>
 80013a0:	e61a      	b.n	8000fd8 <__aeabi_ddiv+0x168>
 80013a2:	1e83      	subs	r3, r0, #2
 80013a4:	4464      	add	r4, ip
 80013a6:	e617      	b.n	8000fd8 <__aeabi_ddiv+0x168>
 80013a8:	428a      	cmp	r2, r1
 80013aa:	d800      	bhi.n	80013ae <__aeabi_ddiv+0x53e>
 80013ac:	e600      	b.n	8000fb0 <__aeabi_ddiv+0x140>
 80013ae:	46ac      	mov	ip, r5
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	4461      	add	r1, ip
 80013b6:	e5fb      	b.n	8000fb0 <__aeabi_ddiv+0x140>
 80013b8:	4837      	ldr	r0, [pc, #220]	@ (8001498 <__aeabi_ddiv+0x628>)
 80013ba:	0014      	movs	r4, r2
 80013bc:	4450      	add	r0, sl
 80013be:	4082      	lsls	r2, r0
 80013c0:	465b      	mov	r3, fp
 80013c2:	0017      	movs	r7, r2
 80013c4:	4083      	lsls	r3, r0
 80013c6:	40cc      	lsrs	r4, r1
 80013c8:	1e7a      	subs	r2, r7, #1
 80013ca:	4197      	sbcs	r7, r2
 80013cc:	4323      	orrs	r3, r4
 80013ce:	433b      	orrs	r3, r7
 80013d0:	001a      	movs	r2, r3
 80013d2:	465b      	mov	r3, fp
 80013d4:	40cb      	lsrs	r3, r1
 80013d6:	0751      	lsls	r1, r2, #29
 80013d8:	d009      	beq.n	80013ee <__aeabi_ddiv+0x57e>
 80013da:	210f      	movs	r1, #15
 80013dc:	4011      	ands	r1, r2
 80013de:	2904      	cmp	r1, #4
 80013e0:	d005      	beq.n	80013ee <__aeabi_ddiv+0x57e>
 80013e2:	1d11      	adds	r1, r2, #4
 80013e4:	4291      	cmp	r1, r2
 80013e6:	4192      	sbcs	r2, r2
 80013e8:	4252      	negs	r2, r2
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	000a      	movs	r2, r1
 80013ee:	0219      	lsls	r1, r3, #8
 80013f0:	d400      	bmi.n	80013f4 <__aeabi_ddiv+0x584>
 80013f2:	e755      	b.n	80012a0 <__aeabi_ddiv+0x430>
 80013f4:	2200      	movs	r2, #0
 80013f6:	2301      	movs	r3, #1
 80013f8:	2400      	movs	r4, #0
 80013fa:	4690      	mov	r8, r2
 80013fc:	e598      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 80013fe:	000a      	movs	r2, r1
 8001400:	42bc      	cmp	r4, r7
 8001402:	d000      	beq.n	8001406 <__aeabi_ddiv+0x596>
 8001404:	e66e      	b.n	80010e4 <__aeabi_ddiv+0x274>
 8001406:	454b      	cmp	r3, r9
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0x59c>
 800140a:	e66b      	b.n	80010e4 <__aeabi_ddiv+0x274>
 800140c:	e66c      	b.n	80010e8 <__aeabi_ddiv+0x278>
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <__aeabi_ddiv+0x62c>)
 8001410:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <__aeabi_ddiv+0x630>)
 8001412:	4453      	add	r3, sl
 8001414:	4592      	cmp	sl, r2
 8001416:	da00      	bge.n	800141a <__aeabi_ddiv+0x5aa>
 8001418:	e718      	b.n	800124c <__aeabi_ddiv+0x3dc>
 800141a:	2101      	movs	r1, #1
 800141c:	4249      	negs	r1, r1
 800141e:	1d0a      	adds	r2, r1, #4
 8001420:	428a      	cmp	r2, r1
 8001422:	4189      	sbcs	r1, r1
 8001424:	4249      	negs	r1, r1
 8001426:	448b      	add	fp, r1
 8001428:	e666      	b.n	80010f8 <__aeabi_ddiv+0x288>
 800142a:	210f      	movs	r1, #15
 800142c:	4011      	ands	r1, r2
 800142e:	2904      	cmp	r1, #4
 8001430:	d100      	bne.n	8001434 <__aeabi_ddiv+0x5c4>
 8001432:	e661      	b.n	80010f8 <__aeabi_ddiv+0x288>
 8001434:	0011      	movs	r1, r2
 8001436:	e7f2      	b.n	800141e <__aeabi_ddiv+0x5ae>
 8001438:	42bc      	cmp	r4, r7
 800143a:	d800      	bhi.n	800143e <__aeabi_ddiv+0x5ce>
 800143c:	e60a      	b.n	8001054 <__aeabi_ddiv+0x1e4>
 800143e:	2302      	movs	r3, #2
 8001440:	425b      	negs	r3, r3
 8001442:	469c      	mov	ip, r3
 8001444:	9900      	ldr	r1, [sp, #0]
 8001446:	444f      	add	r7, r9
 8001448:	454f      	cmp	r7, r9
 800144a:	419b      	sbcs	r3, r3
 800144c:	44e3      	add	fp, ip
 800144e:	468c      	mov	ip, r1
 8001450:	425b      	negs	r3, r3
 8001452:	4463      	add	r3, ip
 8001454:	18c0      	adds	r0, r0, r3
 8001456:	e5ff      	b.n	8001058 <__aeabi_ddiv+0x1e8>
 8001458:	4649      	mov	r1, r9
 800145a:	9d00      	ldr	r5, [sp, #0]
 800145c:	0048      	lsls	r0, r1, #1
 800145e:	4548      	cmp	r0, r9
 8001460:	4189      	sbcs	r1, r1
 8001462:	46ac      	mov	ip, r5
 8001464:	4249      	negs	r1, r1
 8001466:	4461      	add	r1, ip
 8001468:	4681      	mov	r9, r0
 800146a:	3a02      	subs	r2, #2
 800146c:	1864      	adds	r4, r4, r1
 800146e:	e7c7      	b.n	8001400 <__aeabi_ddiv+0x590>
 8001470:	2480      	movs	r4, #128	@ 0x80
 8001472:	465b      	mov	r3, fp
 8001474:	0324      	lsls	r4, r4, #12
 8001476:	431c      	orrs	r4, r3
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	4690      	mov	r8, r2
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__aeabi_ddiv+0x620>)
 800147e:	0b24      	lsrs	r4, r4, #12
 8001480:	e556      	b.n	8000f30 <__aeabi_ddiv+0xc0>
 8001482:	4599      	cmp	r9, r3
 8001484:	d3e8      	bcc.n	8001458 <__aeabi_ddiv+0x5e8>
 8001486:	000a      	movs	r2, r1
 8001488:	e7bd      	b.n	8001406 <__aeabi_ddiv+0x596>
 800148a:	2300      	movs	r3, #0
 800148c:	e708      	b.n	80012a0 <__aeabi_ddiv+0x430>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	000007ff 	.word	0x000007ff
 8001494:	0000043e 	.word	0x0000043e
 8001498:	0000041e 	.word	0x0000041e
 800149c:	000003ff 	.word	0x000003ff
 80014a0:	fffffc02 	.word	0xfffffc02

080014a4 <__eqdf2>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4657      	mov	r7, sl
 80014a8:	46de      	mov	lr, fp
 80014aa:	464e      	mov	r6, r9
 80014ac:	4645      	mov	r5, r8
 80014ae:	b5e0      	push	{r5, r6, r7, lr}
 80014b0:	000d      	movs	r5, r1
 80014b2:	0004      	movs	r4, r0
 80014b4:	0fe8      	lsrs	r0, r5, #31
 80014b6:	4683      	mov	fp, r0
 80014b8:	0309      	lsls	r1, r1, #12
 80014ba:	0fd8      	lsrs	r0, r3, #31
 80014bc:	0b09      	lsrs	r1, r1, #12
 80014be:	4682      	mov	sl, r0
 80014c0:	4819      	ldr	r0, [pc, #100]	@ (8001528 <__eqdf2+0x84>)
 80014c2:	468c      	mov	ip, r1
 80014c4:	031f      	lsls	r7, r3, #12
 80014c6:	0069      	lsls	r1, r5, #1
 80014c8:	005e      	lsls	r6, r3, #1
 80014ca:	0d49      	lsrs	r1, r1, #21
 80014cc:	0b3f      	lsrs	r7, r7, #12
 80014ce:	0d76      	lsrs	r6, r6, #21
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d018      	beq.n	8001506 <__eqdf2+0x62>
 80014d4:	4286      	cmp	r6, r0
 80014d6:	d00f      	beq.n	80014f8 <__eqdf2+0x54>
 80014d8:	2001      	movs	r0, #1
 80014da:	42b1      	cmp	r1, r6
 80014dc:	d10d      	bne.n	80014fa <__eqdf2+0x56>
 80014de:	45bc      	cmp	ip, r7
 80014e0:	d10b      	bne.n	80014fa <__eqdf2+0x56>
 80014e2:	4294      	cmp	r4, r2
 80014e4:	d109      	bne.n	80014fa <__eqdf2+0x56>
 80014e6:	45d3      	cmp	fp, sl
 80014e8:	d01c      	beq.n	8001524 <__eqdf2+0x80>
 80014ea:	2900      	cmp	r1, #0
 80014ec:	d105      	bne.n	80014fa <__eqdf2+0x56>
 80014ee:	4660      	mov	r0, ip
 80014f0:	4320      	orrs	r0, r4
 80014f2:	1e43      	subs	r3, r0, #1
 80014f4:	4198      	sbcs	r0, r3
 80014f6:	e000      	b.n	80014fa <__eqdf2+0x56>
 80014f8:	2001      	movs	r0, #1
 80014fa:	bcf0      	pop	{r4, r5, r6, r7}
 80014fc:	46bb      	mov	fp, r7
 80014fe:	46b2      	mov	sl, r6
 8001500:	46a9      	mov	r9, r5
 8001502:	46a0      	mov	r8, r4
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	2001      	movs	r0, #1
 8001508:	428e      	cmp	r6, r1
 800150a:	d1f6      	bne.n	80014fa <__eqdf2+0x56>
 800150c:	4661      	mov	r1, ip
 800150e:	4339      	orrs	r1, r7
 8001510:	000f      	movs	r7, r1
 8001512:	4317      	orrs	r7, r2
 8001514:	4327      	orrs	r7, r4
 8001516:	d1f0      	bne.n	80014fa <__eqdf2+0x56>
 8001518:	465b      	mov	r3, fp
 800151a:	4652      	mov	r2, sl
 800151c:	1a98      	subs	r0, r3, r2
 800151e:	1e43      	subs	r3, r0, #1
 8001520:	4198      	sbcs	r0, r3
 8001522:	e7ea      	b.n	80014fa <__eqdf2+0x56>
 8001524:	2000      	movs	r0, #0
 8001526:	e7e8      	b.n	80014fa <__eqdf2+0x56>
 8001528:	000007ff 	.word	0x000007ff

0800152c <__gedf2>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4657      	mov	r7, sl
 8001530:	464e      	mov	r6, r9
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	000d      	movs	r5, r1
 800153a:	030f      	lsls	r7, r1, #12
 800153c:	0b39      	lsrs	r1, r7, #12
 800153e:	b083      	sub	sp, #12
 8001540:	0004      	movs	r4, r0
 8001542:	4680      	mov	r8, r0
 8001544:	9101      	str	r1, [sp, #4]
 8001546:	0058      	lsls	r0, r3, #1
 8001548:	0fe9      	lsrs	r1, r5, #31
 800154a:	4f31      	ldr	r7, [pc, #196]	@ (8001610 <__gedf2+0xe4>)
 800154c:	0d40      	lsrs	r0, r0, #21
 800154e:	468c      	mov	ip, r1
 8001550:	006e      	lsls	r6, r5, #1
 8001552:	0319      	lsls	r1, r3, #12
 8001554:	4682      	mov	sl, r0
 8001556:	4691      	mov	r9, r2
 8001558:	0d76      	lsrs	r6, r6, #21
 800155a:	0b09      	lsrs	r1, r1, #12
 800155c:	0fd8      	lsrs	r0, r3, #31
 800155e:	42be      	cmp	r6, r7
 8001560:	d01f      	beq.n	80015a2 <__gedf2+0x76>
 8001562:	45ba      	cmp	sl, r7
 8001564:	d00f      	beq.n	8001586 <__gedf2+0x5a>
 8001566:	2e00      	cmp	r6, #0
 8001568:	d12f      	bne.n	80015ca <__gedf2+0x9e>
 800156a:	4655      	mov	r5, sl
 800156c:	9e01      	ldr	r6, [sp, #4]
 800156e:	4334      	orrs	r4, r6
 8001570:	2d00      	cmp	r5, #0
 8001572:	d127      	bne.n	80015c4 <__gedf2+0x98>
 8001574:	430a      	orrs	r2, r1
 8001576:	d03a      	beq.n	80015ee <__gedf2+0xc2>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d145      	bne.n	8001608 <__gedf2+0xdc>
 800157c:	2800      	cmp	r0, #0
 800157e:	d11a      	bne.n	80015b6 <__gedf2+0x8a>
 8001580:	2001      	movs	r0, #1
 8001582:	4240      	negs	r0, r0
 8001584:	e017      	b.n	80015b6 <__gedf2+0x8a>
 8001586:	4311      	orrs	r1, r2
 8001588:	d13b      	bne.n	8001602 <__gedf2+0xd6>
 800158a:	2e00      	cmp	r6, #0
 800158c:	d102      	bne.n	8001594 <__gedf2+0x68>
 800158e:	9f01      	ldr	r7, [sp, #4]
 8001590:	4327      	orrs	r7, r4
 8001592:	d0f3      	beq.n	800157c <__gedf2+0x50>
 8001594:	4584      	cmp	ip, r0
 8001596:	d109      	bne.n	80015ac <__gedf2+0x80>
 8001598:	4663      	mov	r3, ip
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <__gedf2+0x54>
 800159e:	4660      	mov	r0, ip
 80015a0:	e009      	b.n	80015b6 <__gedf2+0x8a>
 80015a2:	9f01      	ldr	r7, [sp, #4]
 80015a4:	4327      	orrs	r7, r4
 80015a6:	d12c      	bne.n	8001602 <__gedf2+0xd6>
 80015a8:	45b2      	cmp	sl, r6
 80015aa:	d024      	beq.n	80015f6 <__gedf2+0xca>
 80015ac:	4663      	mov	r3, ip
 80015ae:	2002      	movs	r0, #2
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4018      	ands	r0, r3
 80015b4:	3801      	subs	r0, #1
 80015b6:	b003      	add	sp, #12
 80015b8:	bcf0      	pop	{r4, r5, r6, r7}
 80015ba:	46bb      	mov	fp, r7
 80015bc:	46b2      	mov	sl, r6
 80015be:	46a9      	mov	r9, r5
 80015c0:	46a0      	mov	r8, r4
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d0d9      	beq.n	800157c <__gedf2+0x50>
 80015c8:	e7e4      	b.n	8001594 <__gedf2+0x68>
 80015ca:	4654      	mov	r4, sl
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0ed      	beq.n	80015ac <__gedf2+0x80>
 80015d0:	4584      	cmp	ip, r0
 80015d2:	d1eb      	bne.n	80015ac <__gedf2+0x80>
 80015d4:	4556      	cmp	r6, sl
 80015d6:	dce9      	bgt.n	80015ac <__gedf2+0x80>
 80015d8:	dbde      	blt.n	8001598 <__gedf2+0x6c>
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	428b      	cmp	r3, r1
 80015de:	d8e5      	bhi.n	80015ac <__gedf2+0x80>
 80015e0:	d1da      	bne.n	8001598 <__gedf2+0x6c>
 80015e2:	45c8      	cmp	r8, r9
 80015e4:	d8e2      	bhi.n	80015ac <__gedf2+0x80>
 80015e6:	2000      	movs	r0, #0
 80015e8:	45c8      	cmp	r8, r9
 80015ea:	d2e4      	bcs.n	80015b6 <__gedf2+0x8a>
 80015ec:	e7d4      	b.n	8001598 <__gedf2+0x6c>
 80015ee:	2000      	movs	r0, #0
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	d0e0      	beq.n	80015b6 <__gedf2+0x8a>
 80015f4:	e7da      	b.n	80015ac <__gedf2+0x80>
 80015f6:	4311      	orrs	r1, r2
 80015f8:	d103      	bne.n	8001602 <__gedf2+0xd6>
 80015fa:	4584      	cmp	ip, r0
 80015fc:	d1d6      	bne.n	80015ac <__gedf2+0x80>
 80015fe:	2000      	movs	r0, #0
 8001600:	e7d9      	b.n	80015b6 <__gedf2+0x8a>
 8001602:	2002      	movs	r0, #2
 8001604:	4240      	negs	r0, r0
 8001606:	e7d6      	b.n	80015b6 <__gedf2+0x8a>
 8001608:	4584      	cmp	ip, r0
 800160a:	d0e6      	beq.n	80015da <__gedf2+0xae>
 800160c:	e7ce      	b.n	80015ac <__gedf2+0x80>
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	000007ff 	.word	0x000007ff

08001614 <__ledf2>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	4645      	mov	r5, r8
 800161c:	46de      	mov	lr, fp
 800161e:	b5e0      	push	{r5, r6, r7, lr}
 8001620:	000d      	movs	r5, r1
 8001622:	030f      	lsls	r7, r1, #12
 8001624:	0004      	movs	r4, r0
 8001626:	4680      	mov	r8, r0
 8001628:	0fe8      	lsrs	r0, r5, #31
 800162a:	0b39      	lsrs	r1, r7, #12
 800162c:	4684      	mov	ip, r0
 800162e:	b083      	sub	sp, #12
 8001630:	0058      	lsls	r0, r3, #1
 8001632:	4f30      	ldr	r7, [pc, #192]	@ (80016f4 <__ledf2+0xe0>)
 8001634:	0d40      	lsrs	r0, r0, #21
 8001636:	9101      	str	r1, [sp, #4]
 8001638:	031e      	lsls	r6, r3, #12
 800163a:	0069      	lsls	r1, r5, #1
 800163c:	4682      	mov	sl, r0
 800163e:	4691      	mov	r9, r2
 8001640:	0d49      	lsrs	r1, r1, #21
 8001642:	0b36      	lsrs	r6, r6, #12
 8001644:	0fd8      	lsrs	r0, r3, #31
 8001646:	42b9      	cmp	r1, r7
 8001648:	d020      	beq.n	800168c <__ledf2+0x78>
 800164a:	45ba      	cmp	sl, r7
 800164c:	d00f      	beq.n	800166e <__ledf2+0x5a>
 800164e:	2900      	cmp	r1, #0
 8001650:	d12b      	bne.n	80016aa <__ledf2+0x96>
 8001652:	9901      	ldr	r1, [sp, #4]
 8001654:	430c      	orrs	r4, r1
 8001656:	4651      	mov	r1, sl
 8001658:	2900      	cmp	r1, #0
 800165a:	d137      	bne.n	80016cc <__ledf2+0xb8>
 800165c:	4332      	orrs	r2, r6
 800165e:	d038      	beq.n	80016d2 <__ledf2+0xbe>
 8001660:	2c00      	cmp	r4, #0
 8001662:	d144      	bne.n	80016ee <__ledf2+0xda>
 8001664:	2800      	cmp	r0, #0
 8001666:	d119      	bne.n	800169c <__ledf2+0x88>
 8001668:	2001      	movs	r0, #1
 800166a:	4240      	negs	r0, r0
 800166c:	e016      	b.n	800169c <__ledf2+0x88>
 800166e:	4316      	orrs	r6, r2
 8001670:	d113      	bne.n	800169a <__ledf2+0x86>
 8001672:	2900      	cmp	r1, #0
 8001674:	d102      	bne.n	800167c <__ledf2+0x68>
 8001676:	9f01      	ldr	r7, [sp, #4]
 8001678:	4327      	orrs	r7, r4
 800167a:	d0f3      	beq.n	8001664 <__ledf2+0x50>
 800167c:	4584      	cmp	ip, r0
 800167e:	d020      	beq.n	80016c2 <__ledf2+0xae>
 8001680:	4663      	mov	r3, ip
 8001682:	2002      	movs	r0, #2
 8001684:	3b01      	subs	r3, #1
 8001686:	4018      	ands	r0, r3
 8001688:	3801      	subs	r0, #1
 800168a:	e007      	b.n	800169c <__ledf2+0x88>
 800168c:	9f01      	ldr	r7, [sp, #4]
 800168e:	4327      	orrs	r7, r4
 8001690:	d103      	bne.n	800169a <__ledf2+0x86>
 8001692:	458a      	cmp	sl, r1
 8001694:	d1f4      	bne.n	8001680 <__ledf2+0x6c>
 8001696:	4316      	orrs	r6, r2
 8001698:	d01f      	beq.n	80016da <__ledf2+0xc6>
 800169a:	2002      	movs	r0, #2
 800169c:	b003      	add	sp, #12
 800169e:	bcf0      	pop	{r4, r5, r6, r7}
 80016a0:	46bb      	mov	fp, r7
 80016a2:	46b2      	mov	sl, r6
 80016a4:	46a9      	mov	r9, r5
 80016a6:	46a0      	mov	r8, r4
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016aa:	4654      	mov	r4, sl
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d0e7      	beq.n	8001680 <__ledf2+0x6c>
 80016b0:	4584      	cmp	ip, r0
 80016b2:	d1e5      	bne.n	8001680 <__ledf2+0x6c>
 80016b4:	4551      	cmp	r1, sl
 80016b6:	dce3      	bgt.n	8001680 <__ledf2+0x6c>
 80016b8:	db03      	blt.n	80016c2 <__ledf2+0xae>
 80016ba:	9b01      	ldr	r3, [sp, #4]
 80016bc:	42b3      	cmp	r3, r6
 80016be:	d8df      	bhi.n	8001680 <__ledf2+0x6c>
 80016c0:	d00f      	beq.n	80016e2 <__ledf2+0xce>
 80016c2:	4663      	mov	r3, ip
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0cf      	beq.n	8001668 <__ledf2+0x54>
 80016c8:	4660      	mov	r0, ip
 80016ca:	e7e7      	b.n	800169c <__ledf2+0x88>
 80016cc:	2c00      	cmp	r4, #0
 80016ce:	d0c9      	beq.n	8001664 <__ledf2+0x50>
 80016d0:	e7d4      	b.n	800167c <__ledf2+0x68>
 80016d2:	2000      	movs	r0, #0
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	d0e1      	beq.n	800169c <__ledf2+0x88>
 80016d8:	e7d2      	b.n	8001680 <__ledf2+0x6c>
 80016da:	4584      	cmp	ip, r0
 80016dc:	d1d0      	bne.n	8001680 <__ledf2+0x6c>
 80016de:	2000      	movs	r0, #0
 80016e0:	e7dc      	b.n	800169c <__ledf2+0x88>
 80016e2:	45c8      	cmp	r8, r9
 80016e4:	d8cc      	bhi.n	8001680 <__ledf2+0x6c>
 80016e6:	2000      	movs	r0, #0
 80016e8:	45c8      	cmp	r8, r9
 80016ea:	d2d7      	bcs.n	800169c <__ledf2+0x88>
 80016ec:	e7e9      	b.n	80016c2 <__ledf2+0xae>
 80016ee:	4584      	cmp	ip, r0
 80016f0:	d0e3      	beq.n	80016ba <__ledf2+0xa6>
 80016f2:	e7c5      	b.n	8001680 <__ledf2+0x6c>
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <__aeabi_dmul>:
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	4657      	mov	r7, sl
 80016fc:	46de      	mov	lr, fp
 80016fe:	464e      	mov	r6, r9
 8001700:	4645      	mov	r5, r8
 8001702:	b5e0      	push	{r5, r6, r7, lr}
 8001704:	001f      	movs	r7, r3
 8001706:	030b      	lsls	r3, r1, #12
 8001708:	0b1b      	lsrs	r3, r3, #12
 800170a:	0016      	movs	r6, r2
 800170c:	469a      	mov	sl, r3
 800170e:	0fca      	lsrs	r2, r1, #31
 8001710:	004b      	lsls	r3, r1, #1
 8001712:	0004      	movs	r4, r0
 8001714:	4693      	mov	fp, r2
 8001716:	b087      	sub	sp, #28
 8001718:	0d5b      	lsrs	r3, r3, #21
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x26>
 800171c:	e0d5      	b.n	80018ca <__aeabi_dmul+0x1d2>
 800171e:	4abb      	ldr	r2, [pc, #748]	@ (8001a0c <__aeabi_dmul+0x314>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d100      	bne.n	8001726 <__aeabi_dmul+0x2e>
 8001724:	e0f8      	b.n	8001918 <__aeabi_dmul+0x220>
 8001726:	4651      	mov	r1, sl
 8001728:	0f42      	lsrs	r2, r0, #29
 800172a:	00c9      	lsls	r1, r1, #3
 800172c:	430a      	orrs	r2, r1
 800172e:	2180      	movs	r1, #128	@ 0x80
 8001730:	0409      	lsls	r1, r1, #16
 8001732:	4311      	orrs	r1, r2
 8001734:	00c2      	lsls	r2, r0, #3
 8001736:	4691      	mov	r9, r2
 8001738:	4ab5      	ldr	r2, [pc, #724]	@ (8001a10 <__aeabi_dmul+0x318>)
 800173a:	468a      	mov	sl, r1
 800173c:	189d      	adds	r5, r3, r2
 800173e:	2300      	movs	r3, #0
 8001740:	4698      	mov	r8, r3
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	033c      	lsls	r4, r7, #12
 8001746:	007b      	lsls	r3, r7, #1
 8001748:	0ffa      	lsrs	r2, r7, #31
 800174a:	0030      	movs	r0, r6
 800174c:	0b24      	lsrs	r4, r4, #12
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	9200      	str	r2, [sp, #0]
 8001752:	d100      	bne.n	8001756 <__aeabi_dmul+0x5e>
 8001754:	e096      	b.n	8001884 <__aeabi_dmul+0x18c>
 8001756:	4aad      	ldr	r2, [pc, #692]	@ (8001a0c <__aeabi_dmul+0x314>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d031      	beq.n	80017c0 <__aeabi_dmul+0xc8>
 800175c:	0f72      	lsrs	r2, r6, #29
 800175e:	00e4      	lsls	r4, r4, #3
 8001760:	4322      	orrs	r2, r4
 8001762:	2480      	movs	r4, #128	@ 0x80
 8001764:	0424      	lsls	r4, r4, #16
 8001766:	4314      	orrs	r4, r2
 8001768:	4aa9      	ldr	r2, [pc, #676]	@ (8001a10 <__aeabi_dmul+0x318>)
 800176a:	00f0      	lsls	r0, r6, #3
 800176c:	4694      	mov	ip, r2
 800176e:	4463      	add	r3, ip
 8001770:	195b      	adds	r3, r3, r5
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	4642      	mov	r2, r8
 8001778:	2600      	movs	r6, #0
 800177a:	2a0a      	cmp	r2, #10
 800177c:	dc42      	bgt.n	8001804 <__aeabi_dmul+0x10c>
 800177e:	465a      	mov	r2, fp
 8001780:	9900      	ldr	r1, [sp, #0]
 8001782:	404a      	eors	r2, r1
 8001784:	4693      	mov	fp, r2
 8001786:	4642      	mov	r2, r8
 8001788:	2a02      	cmp	r2, #2
 800178a:	dc32      	bgt.n	80017f2 <__aeabi_dmul+0xfa>
 800178c:	3a01      	subs	r2, #1
 800178e:	2a01      	cmp	r2, #1
 8001790:	d900      	bls.n	8001794 <__aeabi_dmul+0x9c>
 8001792:	e149      	b.n	8001a28 <__aeabi_dmul+0x330>
 8001794:	2e02      	cmp	r6, #2
 8001796:	d100      	bne.n	800179a <__aeabi_dmul+0xa2>
 8001798:	e0ca      	b.n	8001930 <__aeabi_dmul+0x238>
 800179a:	2e01      	cmp	r6, #1
 800179c:	d13d      	bne.n	800181a <__aeabi_dmul+0x122>
 800179e:	2300      	movs	r3, #0
 80017a0:	2400      	movs	r4, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	0010      	movs	r0, r2
 80017a6:	465a      	mov	r2, fp
 80017a8:	051b      	lsls	r3, r3, #20
 80017aa:	4323      	orrs	r3, r4
 80017ac:	07d2      	lsls	r2, r2, #31
 80017ae:	4313      	orrs	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	b007      	add	sp, #28
 80017b4:	bcf0      	pop	{r4, r5, r6, r7}
 80017b6:	46bb      	mov	fp, r7
 80017b8:	46b2      	mov	sl, r6
 80017ba:	46a9      	mov	r9, r5
 80017bc:	46a0      	mov	r8, r4
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	4b92      	ldr	r3, [pc, #584]	@ (8001a0c <__aeabi_dmul+0x314>)
 80017c2:	4326      	orrs	r6, r4
 80017c4:	18eb      	adds	r3, r5, r3
 80017c6:	2e00      	cmp	r6, #0
 80017c8:	d100      	bne.n	80017cc <__aeabi_dmul+0xd4>
 80017ca:	e0bb      	b.n	8001944 <__aeabi_dmul+0x24c>
 80017cc:	2203      	movs	r2, #3
 80017ce:	4641      	mov	r1, r8
 80017d0:	4311      	orrs	r1, r2
 80017d2:	465a      	mov	r2, fp
 80017d4:	4688      	mov	r8, r1
 80017d6:	9900      	ldr	r1, [sp, #0]
 80017d8:	404a      	eors	r2, r1
 80017da:	2180      	movs	r1, #128	@ 0x80
 80017dc:	0109      	lsls	r1, r1, #4
 80017de:	468c      	mov	ip, r1
 80017e0:	0029      	movs	r1, r5
 80017e2:	4461      	add	r1, ip
 80017e4:	9101      	str	r1, [sp, #4]
 80017e6:	4641      	mov	r1, r8
 80017e8:	290a      	cmp	r1, #10
 80017ea:	dd00      	ble.n	80017ee <__aeabi_dmul+0xf6>
 80017ec:	e233      	b.n	8001c56 <__aeabi_dmul+0x55e>
 80017ee:	4693      	mov	fp, r2
 80017f0:	2603      	movs	r6, #3
 80017f2:	4642      	mov	r2, r8
 80017f4:	2701      	movs	r7, #1
 80017f6:	4097      	lsls	r7, r2
 80017f8:	21a6      	movs	r1, #166	@ 0xa6
 80017fa:	003a      	movs	r2, r7
 80017fc:	00c9      	lsls	r1, r1, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	420f      	tst	r7, r1
 8001802:	d031      	beq.n	8001868 <__aeabi_dmul+0x170>
 8001804:	9e02      	ldr	r6, [sp, #8]
 8001806:	2e02      	cmp	r6, #2
 8001808:	d100      	bne.n	800180c <__aeabi_dmul+0x114>
 800180a:	e235      	b.n	8001c78 <__aeabi_dmul+0x580>
 800180c:	2e03      	cmp	r6, #3
 800180e:	d100      	bne.n	8001812 <__aeabi_dmul+0x11a>
 8001810:	e1d2      	b.n	8001bb8 <__aeabi_dmul+0x4c0>
 8001812:	4654      	mov	r4, sl
 8001814:	4648      	mov	r0, r9
 8001816:	2e01      	cmp	r6, #1
 8001818:	d0c1      	beq.n	800179e <__aeabi_dmul+0xa6>
 800181a:	9a01      	ldr	r2, [sp, #4]
 800181c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a14 <__aeabi_dmul+0x31c>)
 800181e:	4694      	mov	ip, r2
 8001820:	4463      	add	r3, ip
 8001822:	2b00      	cmp	r3, #0
 8001824:	dc00      	bgt.n	8001828 <__aeabi_dmul+0x130>
 8001826:	e0c0      	b.n	80019aa <__aeabi_dmul+0x2b2>
 8001828:	0742      	lsls	r2, r0, #29
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x148>
 800182c:	220f      	movs	r2, #15
 800182e:	4002      	ands	r2, r0
 8001830:	2a04      	cmp	r2, #4
 8001832:	d005      	beq.n	8001840 <__aeabi_dmul+0x148>
 8001834:	1d02      	adds	r2, r0, #4
 8001836:	4282      	cmp	r2, r0
 8001838:	4180      	sbcs	r0, r0
 800183a:	4240      	negs	r0, r0
 800183c:	1824      	adds	r4, r4, r0
 800183e:	0010      	movs	r0, r2
 8001840:	01e2      	lsls	r2, r4, #7
 8001842:	d506      	bpl.n	8001852 <__aeabi_dmul+0x15a>
 8001844:	4b74      	ldr	r3, [pc, #464]	@ (8001a18 <__aeabi_dmul+0x320>)
 8001846:	9a01      	ldr	r2, [sp, #4]
 8001848:	401c      	ands	r4, r3
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	4694      	mov	ip, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4463      	add	r3, ip
 8001852:	4a72      	ldr	r2, [pc, #456]	@ (8001a1c <__aeabi_dmul+0x324>)
 8001854:	4293      	cmp	r3, r2
 8001856:	dc6b      	bgt.n	8001930 <__aeabi_dmul+0x238>
 8001858:	0762      	lsls	r2, r4, #29
 800185a:	08c0      	lsrs	r0, r0, #3
 800185c:	0264      	lsls	r4, r4, #9
 800185e:	055b      	lsls	r3, r3, #21
 8001860:	4302      	orrs	r2, r0
 8001862:	0b24      	lsrs	r4, r4, #12
 8001864:	0d5b      	lsrs	r3, r3, #21
 8001866:	e79d      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001868:	2190      	movs	r1, #144	@ 0x90
 800186a:	0089      	lsls	r1, r1, #2
 800186c:	420f      	tst	r7, r1
 800186e:	d163      	bne.n	8001938 <__aeabi_dmul+0x240>
 8001870:	2288      	movs	r2, #136	@ 0x88
 8001872:	423a      	tst	r2, r7
 8001874:	d100      	bne.n	8001878 <__aeabi_dmul+0x180>
 8001876:	e0d7      	b.n	8001a28 <__aeabi_dmul+0x330>
 8001878:	9b00      	ldr	r3, [sp, #0]
 800187a:	46a2      	mov	sl, r4
 800187c:	469b      	mov	fp, r3
 800187e:	4681      	mov	r9, r0
 8001880:	9602      	str	r6, [sp, #8]
 8001882:	e7bf      	b.n	8001804 <__aeabi_dmul+0x10c>
 8001884:	0023      	movs	r3, r4
 8001886:	4333      	orrs	r3, r6
 8001888:	d100      	bne.n	800188c <__aeabi_dmul+0x194>
 800188a:	e07f      	b.n	800198c <__aeabi_dmul+0x294>
 800188c:	2c00      	cmp	r4, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_dmul+0x19a>
 8001890:	e1ad      	b.n	8001bee <__aeabi_dmul+0x4f6>
 8001892:	0020      	movs	r0, r4
 8001894:	f000 fe8c 	bl	80025b0 <__clzsi2>
 8001898:	0002      	movs	r2, r0
 800189a:	0003      	movs	r3, r0
 800189c:	3a0b      	subs	r2, #11
 800189e:	201d      	movs	r0, #29
 80018a0:	0019      	movs	r1, r3
 80018a2:	1a82      	subs	r2, r0, r2
 80018a4:	0030      	movs	r0, r6
 80018a6:	3908      	subs	r1, #8
 80018a8:	40d0      	lsrs	r0, r2
 80018aa:	408c      	lsls	r4, r1
 80018ac:	4304      	orrs	r4, r0
 80018ae:	0030      	movs	r0, r6
 80018b0:	4088      	lsls	r0, r1
 80018b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a20 <__aeabi_dmul+0x328>)
 80018b4:	1aeb      	subs	r3, r5, r3
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	4642      	mov	r2, r8
 80018c0:	2600      	movs	r6, #0
 80018c2:	2a0a      	cmp	r2, #10
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dmul+0x1d0>
 80018c6:	e75a      	b.n	800177e <__aeabi_dmul+0x86>
 80018c8:	e79c      	b.n	8001804 <__aeabi_dmul+0x10c>
 80018ca:	4653      	mov	r3, sl
 80018cc:	4303      	orrs	r3, r0
 80018ce:	4699      	mov	r9, r3
 80018d0:	d054      	beq.n	800197c <__aeabi_dmul+0x284>
 80018d2:	4653      	mov	r3, sl
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_dmul+0x1e2>
 80018d8:	e177      	b.n	8001bca <__aeabi_dmul+0x4d2>
 80018da:	4650      	mov	r0, sl
 80018dc:	f000 fe68 	bl	80025b0 <__clzsi2>
 80018e0:	230b      	movs	r3, #11
 80018e2:	425b      	negs	r3, r3
 80018e4:	469c      	mov	ip, r3
 80018e6:	0002      	movs	r2, r0
 80018e8:	4484      	add	ip, r0
 80018ea:	0011      	movs	r1, r2
 80018ec:	4650      	mov	r0, sl
 80018ee:	3908      	subs	r1, #8
 80018f0:	4088      	lsls	r0, r1
 80018f2:	231d      	movs	r3, #29
 80018f4:	4680      	mov	r8, r0
 80018f6:	4660      	mov	r0, ip
 80018f8:	1a1b      	subs	r3, r3, r0
 80018fa:	0020      	movs	r0, r4
 80018fc:	40d8      	lsrs	r0, r3
 80018fe:	0003      	movs	r3, r0
 8001900:	4640      	mov	r0, r8
 8001902:	4303      	orrs	r3, r0
 8001904:	469a      	mov	sl, r3
 8001906:	0023      	movs	r3, r4
 8001908:	408b      	lsls	r3, r1
 800190a:	4699      	mov	r9, r3
 800190c:	2300      	movs	r3, #0
 800190e:	4d44      	ldr	r5, [pc, #272]	@ (8001a20 <__aeabi_dmul+0x328>)
 8001910:	4698      	mov	r8, r3
 8001912:	1aad      	subs	r5, r5, r2
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	e715      	b.n	8001744 <__aeabi_dmul+0x4c>
 8001918:	4652      	mov	r2, sl
 800191a:	4302      	orrs	r2, r0
 800191c:	4691      	mov	r9, r2
 800191e:	d126      	bne.n	800196e <__aeabi_dmul+0x276>
 8001920:	2200      	movs	r2, #0
 8001922:	001d      	movs	r5, r3
 8001924:	2302      	movs	r3, #2
 8001926:	4692      	mov	sl, r2
 8001928:	3208      	adds	r2, #8
 800192a:	4690      	mov	r8, r2
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	e709      	b.n	8001744 <__aeabi_dmul+0x4c>
 8001930:	2400      	movs	r4, #0
 8001932:	2200      	movs	r2, #0
 8001934:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <__aeabi_dmul+0x314>)
 8001936:	e735      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001938:	2300      	movs	r3, #0
 800193a:	2480      	movs	r4, #128	@ 0x80
 800193c:	469b      	mov	fp, r3
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4b32      	ldr	r3, [pc, #200]	@ (8001a0c <__aeabi_dmul+0x314>)
 8001942:	e72f      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001944:	2202      	movs	r2, #2
 8001946:	4641      	mov	r1, r8
 8001948:	4311      	orrs	r1, r2
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	4694      	mov	ip, r2
 8001950:	002a      	movs	r2, r5
 8001952:	4462      	add	r2, ip
 8001954:	4688      	mov	r8, r1
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	290a      	cmp	r1, #10
 800195a:	dd00      	ble.n	800195e <__aeabi_dmul+0x266>
 800195c:	e752      	b.n	8001804 <__aeabi_dmul+0x10c>
 800195e:	465a      	mov	r2, fp
 8001960:	2000      	movs	r0, #0
 8001962:	9900      	ldr	r1, [sp, #0]
 8001964:	0004      	movs	r4, r0
 8001966:	404a      	eors	r2, r1
 8001968:	4693      	mov	fp, r2
 800196a:	2602      	movs	r6, #2
 800196c:	e70b      	b.n	8001786 <__aeabi_dmul+0x8e>
 800196e:	220c      	movs	r2, #12
 8001970:	001d      	movs	r5, r3
 8001972:	2303      	movs	r3, #3
 8001974:	4681      	mov	r9, r0
 8001976:	4690      	mov	r8, r2
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	e6e3      	b.n	8001744 <__aeabi_dmul+0x4c>
 800197c:	2300      	movs	r3, #0
 800197e:	469a      	mov	sl, r3
 8001980:	3304      	adds	r3, #4
 8001982:	4698      	mov	r8, r3
 8001984:	3b03      	subs	r3, #3
 8001986:	2500      	movs	r5, #0
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	e6db      	b.n	8001744 <__aeabi_dmul+0x4c>
 800198c:	4642      	mov	r2, r8
 800198e:	3301      	adds	r3, #1
 8001990:	431a      	orrs	r2, r3
 8001992:	002b      	movs	r3, r5
 8001994:	4690      	mov	r8, r2
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	4642      	mov	r2, r8
 800199c:	2400      	movs	r4, #0
 800199e:	2000      	movs	r0, #0
 80019a0:	2601      	movs	r6, #1
 80019a2:	2a0a      	cmp	r2, #10
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dmul+0x2b0>
 80019a6:	e6ea      	b.n	800177e <__aeabi_dmul+0x86>
 80019a8:	e72c      	b.n	8001804 <__aeabi_dmul+0x10c>
 80019aa:	2201      	movs	r2, #1
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	2a38      	cmp	r2, #56	@ 0x38
 80019b0:	dd00      	ble.n	80019b4 <__aeabi_dmul+0x2bc>
 80019b2:	e6f4      	b.n	800179e <__aeabi_dmul+0xa6>
 80019b4:	2a1f      	cmp	r2, #31
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dmul+0x2c2>
 80019b8:	e12a      	b.n	8001c10 <__aeabi_dmul+0x518>
 80019ba:	211f      	movs	r1, #31
 80019bc:	4249      	negs	r1, r1
 80019be:	1acb      	subs	r3, r1, r3
 80019c0:	0021      	movs	r1, r4
 80019c2:	40d9      	lsrs	r1, r3
 80019c4:	000b      	movs	r3, r1
 80019c6:	2a20      	cmp	r2, #32
 80019c8:	d005      	beq.n	80019d6 <__aeabi_dmul+0x2de>
 80019ca:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <__aeabi_dmul+0x32c>)
 80019cc:	9d01      	ldr	r5, [sp, #4]
 80019ce:	4694      	mov	ip, r2
 80019d0:	4465      	add	r5, ip
 80019d2:	40ac      	lsls	r4, r5
 80019d4:	4320      	orrs	r0, r4
 80019d6:	1e42      	subs	r2, r0, #1
 80019d8:	4190      	sbcs	r0, r2
 80019da:	4318      	orrs	r0, r3
 80019dc:	2307      	movs	r3, #7
 80019de:	0019      	movs	r1, r3
 80019e0:	2400      	movs	r4, #0
 80019e2:	4001      	ands	r1, r0
 80019e4:	4203      	tst	r3, r0
 80019e6:	d00c      	beq.n	8001a02 <__aeabi_dmul+0x30a>
 80019e8:	230f      	movs	r3, #15
 80019ea:	4003      	ands	r3, r0
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dmul+0x2fa>
 80019f0:	e140      	b.n	8001c74 <__aeabi_dmul+0x57c>
 80019f2:	1d03      	adds	r3, r0, #4
 80019f4:	4283      	cmp	r3, r0
 80019f6:	41a4      	sbcs	r4, r4
 80019f8:	0018      	movs	r0, r3
 80019fa:	4264      	negs	r4, r4
 80019fc:	0761      	lsls	r1, r4, #29
 80019fe:	0264      	lsls	r4, r4, #9
 8001a00:	0b24      	lsrs	r4, r4, #12
 8001a02:	08c2      	lsrs	r2, r0, #3
 8001a04:	2300      	movs	r3, #0
 8001a06:	430a      	orrs	r2, r1
 8001a08:	e6cc      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	000007ff 	.word	0x000007ff
 8001a10:	fffffc01 	.word	0xfffffc01
 8001a14:	000003ff 	.word	0x000003ff
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	000007fe 	.word	0x000007fe
 8001a20:	fffffc0d 	.word	0xfffffc0d
 8001a24:	0000043e 	.word	0x0000043e
 8001a28:	4649      	mov	r1, r9
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	0409      	lsls	r1, r1, #16
 8001a2e:	0c09      	lsrs	r1, r1, #16
 8001a30:	000d      	movs	r5, r1
 8001a32:	0c16      	lsrs	r6, r2, #16
 8001a34:	0c02      	lsrs	r2, r0, #16
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	0c00      	lsrs	r0, r0, #16
 8001a3a:	4345      	muls	r5, r0
 8001a3c:	46ac      	mov	ip, r5
 8001a3e:	0005      	movs	r5, r0
 8001a40:	4375      	muls	r5, r6
 8001a42:	46a8      	mov	r8, r5
 8001a44:	0015      	movs	r5, r2
 8001a46:	000f      	movs	r7, r1
 8001a48:	4375      	muls	r5, r6
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	9502      	str	r5, [sp, #8]
 8001a4e:	002a      	movs	r2, r5
 8001a50:	9d00      	ldr	r5, [sp, #0]
 8001a52:	436f      	muls	r7, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	0c2d      	lsrs	r5, r5, #16
 8001a58:	46a9      	mov	r9, r5
 8001a5a:	4447      	add	r7, r8
 8001a5c:	444f      	add	r7, r9
 8001a5e:	45b8      	cmp	r8, r7
 8001a60:	d905      	bls.n	8001a6e <__aeabi_dmul+0x376>
 8001a62:	0015      	movs	r5, r2
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	0252      	lsls	r2, r2, #9
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4445      	add	r5, r8
 8001a6c:	9502      	str	r5, [sp, #8]
 8001a6e:	0c3d      	lsrs	r5, r7, #16
 8001a70:	9503      	str	r5, [sp, #12]
 8001a72:	4665      	mov	r5, ip
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	043f      	lsls	r7, r7, #16
 8001a78:	0c2d      	lsrs	r5, r5, #16
 8001a7a:	46ac      	mov	ip, r5
 8001a7c:	003d      	movs	r5, r7
 8001a7e:	4465      	add	r5, ip
 8001a80:	9504      	str	r5, [sp, #16]
 8001a82:	0c25      	lsrs	r5, r4, #16
 8001a84:	0424      	lsls	r4, r4, #16
 8001a86:	0c24      	lsrs	r4, r4, #16
 8001a88:	46ac      	mov	ip, r5
 8001a8a:	0025      	movs	r5, r4
 8001a8c:	4375      	muls	r5, r6
 8001a8e:	46a8      	mov	r8, r5
 8001a90:	4665      	mov	r5, ip
 8001a92:	000f      	movs	r7, r1
 8001a94:	4369      	muls	r1, r5
 8001a96:	4441      	add	r1, r8
 8001a98:	4689      	mov	r9, r1
 8001a9a:	4367      	muls	r7, r4
 8001a9c:	0c39      	lsrs	r1, r7, #16
 8001a9e:	4449      	add	r1, r9
 8001aa0:	436e      	muls	r6, r5
 8001aa2:	4588      	cmp	r8, r1
 8001aa4:	d903      	bls.n	8001aae <__aeabi_dmul+0x3b6>
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	0252      	lsls	r2, r2, #9
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4446      	add	r6, r8
 8001aae:	0c0d      	lsrs	r5, r1, #16
 8001ab0:	46a8      	mov	r8, r5
 8001ab2:	0035      	movs	r5, r6
 8001ab4:	4445      	add	r5, r8
 8001ab6:	9505      	str	r5, [sp, #20]
 8001ab8:	9d03      	ldr	r5, [sp, #12]
 8001aba:	043f      	lsls	r7, r7, #16
 8001abc:	46a8      	mov	r8, r5
 8001abe:	0c3f      	lsrs	r7, r7, #16
 8001ac0:	0409      	lsls	r1, r1, #16
 8001ac2:	19c9      	adds	r1, r1, r7
 8001ac4:	4488      	add	r8, r1
 8001ac6:	4645      	mov	r5, r8
 8001ac8:	9503      	str	r5, [sp, #12]
 8001aca:	4655      	mov	r5, sl
 8001acc:	042e      	lsls	r6, r5, #16
 8001ace:	0c36      	lsrs	r6, r6, #16
 8001ad0:	0c2f      	lsrs	r7, r5, #16
 8001ad2:	0035      	movs	r5, r6
 8001ad4:	4345      	muls	r5, r0
 8001ad6:	4378      	muls	r0, r7
 8001ad8:	4681      	mov	r9, r0
 8001ada:	0038      	movs	r0, r7
 8001adc:	46a8      	mov	r8, r5
 8001ade:	0c2d      	lsrs	r5, r5, #16
 8001ae0:	46aa      	mov	sl, r5
 8001ae2:	9a00      	ldr	r2, [sp, #0]
 8001ae4:	4350      	muls	r0, r2
 8001ae6:	4372      	muls	r2, r6
 8001ae8:	444a      	add	r2, r9
 8001aea:	4452      	add	r2, sl
 8001aec:	4591      	cmp	r9, r2
 8001aee:	d903      	bls.n	8001af8 <__aeabi_dmul+0x400>
 8001af0:	2580      	movs	r5, #128	@ 0x80
 8001af2:	026d      	lsls	r5, r5, #9
 8001af4:	46a9      	mov	r9, r5
 8001af6:	4448      	add	r0, r9
 8001af8:	0c15      	lsrs	r5, r2, #16
 8001afa:	46a9      	mov	r9, r5
 8001afc:	4645      	mov	r5, r8
 8001afe:	042d      	lsls	r5, r5, #16
 8001b00:	0c2d      	lsrs	r5, r5, #16
 8001b02:	46a8      	mov	r8, r5
 8001b04:	4665      	mov	r5, ip
 8001b06:	437d      	muls	r5, r7
 8001b08:	0412      	lsls	r2, r2, #16
 8001b0a:	4448      	add	r0, r9
 8001b0c:	4490      	add	r8, r2
 8001b0e:	46a9      	mov	r9, r5
 8001b10:	0032      	movs	r2, r6
 8001b12:	4665      	mov	r5, ip
 8001b14:	4362      	muls	r2, r4
 8001b16:	436e      	muls	r6, r5
 8001b18:	437c      	muls	r4, r7
 8001b1a:	0c17      	lsrs	r7, r2, #16
 8001b1c:	1936      	adds	r6, r6, r4
 8001b1e:	19bf      	adds	r7, r7, r6
 8001b20:	42bc      	cmp	r4, r7
 8001b22:	d903      	bls.n	8001b2c <__aeabi_dmul+0x434>
 8001b24:	2480      	movs	r4, #128	@ 0x80
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	46a4      	mov	ip, r4
 8001b2a:	44e1      	add	r9, ip
 8001b2c:	9c02      	ldr	r4, [sp, #8]
 8001b2e:	9e03      	ldr	r6, [sp, #12]
 8001b30:	46a4      	mov	ip, r4
 8001b32:	9d05      	ldr	r5, [sp, #20]
 8001b34:	4466      	add	r6, ip
 8001b36:	428e      	cmp	r6, r1
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	46ac      	mov	ip, r5
 8001b3c:	0412      	lsls	r2, r2, #16
 8001b3e:	043c      	lsls	r4, r7, #16
 8001b40:	0c12      	lsrs	r2, r2, #16
 8001b42:	18a2      	adds	r2, r4, r2
 8001b44:	4462      	add	r2, ip
 8001b46:	4249      	negs	r1, r1
 8001b48:	1854      	adds	r4, r2, r1
 8001b4a:	4446      	add	r6, r8
 8001b4c:	46a4      	mov	ip, r4
 8001b4e:	4546      	cmp	r6, r8
 8001b50:	41a4      	sbcs	r4, r4
 8001b52:	4682      	mov	sl, r0
 8001b54:	4264      	negs	r4, r4
 8001b56:	46a0      	mov	r8, r4
 8001b58:	42aa      	cmp	r2, r5
 8001b5a:	4192      	sbcs	r2, r2
 8001b5c:	458c      	cmp	ip, r1
 8001b5e:	4189      	sbcs	r1, r1
 8001b60:	44e2      	add	sl, ip
 8001b62:	44d0      	add	r8, sl
 8001b64:	4249      	negs	r1, r1
 8001b66:	4252      	negs	r2, r2
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	45a0      	cmp	r8, r4
 8001b6c:	41a4      	sbcs	r4, r4
 8001b6e:	4582      	cmp	sl, r0
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	4264      	negs	r4, r4
 8001b74:	4249      	negs	r1, r1
 8001b76:	430c      	orrs	r4, r1
 8001b78:	4641      	mov	r1, r8
 8001b7a:	0c3f      	lsrs	r7, r7, #16
 8001b7c:	19d2      	adds	r2, r2, r7
 8001b7e:	1912      	adds	r2, r2, r4
 8001b80:	0dcc      	lsrs	r4, r1, #23
 8001b82:	9904      	ldr	r1, [sp, #16]
 8001b84:	0270      	lsls	r0, r6, #9
 8001b86:	4308      	orrs	r0, r1
 8001b88:	1e41      	subs	r1, r0, #1
 8001b8a:	4188      	sbcs	r0, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	444a      	add	r2, r9
 8001b90:	0df6      	lsrs	r6, r6, #23
 8001b92:	0252      	lsls	r2, r2, #9
 8001b94:	4330      	orrs	r0, r6
 8001b96:	0249      	lsls	r1, r1, #9
 8001b98:	4314      	orrs	r4, r2
 8001b9a:	4308      	orrs	r0, r1
 8001b9c:	01d2      	lsls	r2, r2, #7
 8001b9e:	d535      	bpl.n	8001c0c <__aeabi_dmul+0x514>
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	0843      	lsrs	r3, r0, #1
 8001ba4:	4002      	ands	r2, r0
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	07e0      	lsls	r0, r4, #31
 8001baa:	4318      	orrs	r0, r3
 8001bac:	0864      	lsrs	r4, r4, #1
 8001bae:	e634      	b.n	800181a <__aeabi_dmul+0x122>
 8001bb0:	9b00      	ldr	r3, [sp, #0]
 8001bb2:	46a2      	mov	sl, r4
 8001bb4:	469b      	mov	fp, r3
 8001bb6:	4681      	mov	r9, r0
 8001bb8:	2480      	movs	r4, #128	@ 0x80
 8001bba:	4653      	mov	r3, sl
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	431c      	orrs	r4, r3
 8001bc0:	0324      	lsls	r4, r4, #12
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <__aeabi_dmul+0x588>)
 8001bc6:	0b24      	lsrs	r4, r4, #12
 8001bc8:	e5ec      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001bca:	f000 fcf1 	bl	80025b0 <__clzsi2>
 8001bce:	2315      	movs	r3, #21
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	4484      	add	ip, r0
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	4663      	mov	r3, ip
 8001bd8:	3220      	adds	r2, #32
 8001bda:	2b1c      	cmp	r3, #28
 8001bdc:	dc00      	bgt.n	8001be0 <__aeabi_dmul+0x4e8>
 8001bde:	e684      	b.n	80018ea <__aeabi_dmul+0x1f2>
 8001be0:	2300      	movs	r3, #0
 8001be2:	4699      	mov	r9, r3
 8001be4:	0023      	movs	r3, r4
 8001be6:	3808      	subs	r0, #8
 8001be8:	4083      	lsls	r3, r0
 8001bea:	469a      	mov	sl, r3
 8001bec:	e68e      	b.n	800190c <__aeabi_dmul+0x214>
 8001bee:	f000 fcdf 	bl	80025b0 <__clzsi2>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	3215      	adds	r2, #21
 8001bf8:	3320      	adds	r3, #32
 8001bfa:	2a1c      	cmp	r2, #28
 8001bfc:	dc00      	bgt.n	8001c00 <__aeabi_dmul+0x508>
 8001bfe:	e64e      	b.n	800189e <__aeabi_dmul+0x1a6>
 8001c00:	0002      	movs	r2, r0
 8001c02:	0034      	movs	r4, r6
 8001c04:	3a08      	subs	r2, #8
 8001c06:	2000      	movs	r0, #0
 8001c08:	4094      	lsls	r4, r2
 8001c0a:	e652      	b.n	80018b2 <__aeabi_dmul+0x1ba>
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	e604      	b.n	800181a <__aeabi_dmul+0x122>
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <__aeabi_dmul+0x58c>)
 8001c12:	0021      	movs	r1, r4
 8001c14:	469c      	mov	ip, r3
 8001c16:	0003      	movs	r3, r0
 8001c18:	9d01      	ldr	r5, [sp, #4]
 8001c1a:	40d3      	lsrs	r3, r2
 8001c1c:	4465      	add	r5, ip
 8001c1e:	40a9      	lsls	r1, r5
 8001c20:	4319      	orrs	r1, r3
 8001c22:	0003      	movs	r3, r0
 8001c24:	40ab      	lsls	r3, r5
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	4183      	sbcs	r3, r0
 8001c2a:	4319      	orrs	r1, r3
 8001c2c:	0008      	movs	r0, r1
 8001c2e:	40d4      	lsrs	r4, r2
 8001c30:	074b      	lsls	r3, r1, #29
 8001c32:	d009      	beq.n	8001c48 <__aeabi_dmul+0x550>
 8001c34:	230f      	movs	r3, #15
 8001c36:	400b      	ands	r3, r1
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d005      	beq.n	8001c48 <__aeabi_dmul+0x550>
 8001c3c:	1d0b      	adds	r3, r1, #4
 8001c3e:	428b      	cmp	r3, r1
 8001c40:	4180      	sbcs	r0, r0
 8001c42:	4240      	negs	r0, r0
 8001c44:	1824      	adds	r4, r4, r0
 8001c46:	0018      	movs	r0, r3
 8001c48:	0223      	lsls	r3, r4, #8
 8001c4a:	d400      	bmi.n	8001c4e <__aeabi_dmul+0x556>
 8001c4c:	e6d6      	b.n	80019fc <__aeabi_dmul+0x304>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	2400      	movs	r4, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	e5a6      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001c56:	290f      	cmp	r1, #15
 8001c58:	d1aa      	bne.n	8001bb0 <__aeabi_dmul+0x4b8>
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	4652      	mov	r2, sl
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	421a      	tst	r2, r3
 8001c62:	d0a9      	beq.n	8001bb8 <__aeabi_dmul+0x4c0>
 8001c64:	421c      	tst	r4, r3
 8001c66:	d1a7      	bne.n	8001bb8 <__aeabi_dmul+0x4c0>
 8001c68:	431c      	orrs	r4, r3
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	469b      	mov	fp, r3
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <__aeabi_dmul+0x588>)
 8001c72:	e597      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001c74:	2400      	movs	r4, #0
 8001c76:	e6c1      	b.n	80019fc <__aeabi_dmul+0x304>
 8001c78:	2400      	movs	r4, #0
 8001c7a:	4b01      	ldr	r3, [pc, #4]	@ (8001c80 <__aeabi_dmul+0x588>)
 8001c7c:	0022      	movs	r2, r4
 8001c7e:	e591      	b.n	80017a4 <__aeabi_dmul+0xac>
 8001c80:	000007ff 	.word	0x000007ff
 8001c84:	0000041e 	.word	0x0000041e

08001c88 <__aeabi_dsub>:
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	464e      	mov	r6, r9
 8001c8c:	4645      	mov	r5, r8
 8001c8e:	46de      	mov	lr, fp
 8001c90:	4657      	mov	r7, sl
 8001c92:	b5e0      	push	{r5, r6, r7, lr}
 8001c94:	b085      	sub	sp, #20
 8001c96:	9000      	str	r0, [sp, #0]
 8001c98:	9101      	str	r1, [sp, #4]
 8001c9a:	030c      	lsls	r4, r1, #12
 8001c9c:	004f      	lsls	r7, r1, #1
 8001c9e:	0fce      	lsrs	r6, r1, #31
 8001ca0:	0a61      	lsrs	r1, r4, #9
 8001ca2:	9c00      	ldr	r4, [sp, #0]
 8001ca4:	46b0      	mov	r8, r6
 8001ca6:	0f64      	lsrs	r4, r4, #29
 8001ca8:	430c      	orrs	r4, r1
 8001caa:	9900      	ldr	r1, [sp, #0]
 8001cac:	0d7f      	lsrs	r7, r7, #21
 8001cae:	00c8      	lsls	r0, r1, #3
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	469c      	mov	ip, r3
 8001cb8:	9100      	str	r1, [sp, #0]
 8001cba:	9201      	str	r2, [sp, #4]
 8001cbc:	0051      	lsls	r1, r2, #1
 8001cbe:	0d4b      	lsrs	r3, r1, #21
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	9d00      	ldr	r5, [sp, #0]
 8001cc6:	0fd9      	lsrs	r1, r3, #31
 8001cc8:	4663      	mov	r3, ip
 8001cca:	0f6a      	lsrs	r2, r5, #29
 8001ccc:	0a5b      	lsrs	r3, r3, #9
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	00ea      	lsls	r2, r5, #3
 8001cd2:	4694      	mov	ip, r2
 8001cd4:	4693      	mov	fp, r2
 8001cd6:	4ac1      	ldr	r2, [pc, #772]	@ (8001fdc <__aeabi_dsub+0x354>)
 8001cd8:	9003      	str	r0, [sp, #12]
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	4591      	cmp	r9, r2
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x5a>
 8001ce0:	e0cd      	b.n	8001e7e <__aeabi_dsub+0x1f6>
 8001ce2:	2501      	movs	r5, #1
 8001ce4:	4069      	eors	r1, r5
 8001ce6:	464d      	mov	r5, r9
 8001ce8:	1b7d      	subs	r5, r7, r5
 8001cea:	46aa      	mov	sl, r5
 8001cec:	428e      	cmp	r6, r1
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x6a>
 8001cf0:	e080      	b.n	8001df4 <__aeabi_dsub+0x16c>
 8001cf2:	2d00      	cmp	r5, #0
 8001cf4:	dc00      	bgt.n	8001cf8 <__aeabi_dsub+0x70>
 8001cf6:	e335      	b.n	8002364 <__aeabi_dsub+0x6dc>
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2900      	cmp	r1, #0
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x78>
 8001cfe:	e0df      	b.n	8001ec0 <__aeabi_dsub+0x238>
 8001d00:	4297      	cmp	r7, r2
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x7e>
 8001d04:	e194      	b.n	8002030 <__aeabi_dsub+0x3a8>
 8001d06:	4652      	mov	r2, sl
 8001d08:	2501      	movs	r5, #1
 8001d0a:	2a38      	cmp	r2, #56	@ 0x38
 8001d0c:	dc19      	bgt.n	8001d42 <__aeabi_dsub+0xba>
 8001d0e:	2280      	movs	r2, #128	@ 0x80
 8001d10:	9b02      	ldr	r3, [sp, #8]
 8001d12:	0412      	lsls	r2, r2, #16
 8001d14:	4313      	orrs	r3, r2
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	4652      	mov	r2, sl
 8001d1a:	2a1f      	cmp	r2, #31
 8001d1c:	dd00      	ble.n	8001d20 <__aeabi_dsub+0x98>
 8001d1e:	e1e3      	b.n	80020e8 <__aeabi_dsub+0x460>
 8001d20:	4653      	mov	r3, sl
 8001d22:	2220      	movs	r2, #32
 8001d24:	4661      	mov	r1, ip
 8001d26:	9d02      	ldr	r5, [sp, #8]
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	4095      	lsls	r5, r2
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	430d      	orrs	r5, r1
 8001d30:	4661      	mov	r1, ip
 8001d32:	4091      	lsls	r1, r2
 8001d34:	000a      	movs	r2, r1
 8001d36:	1e51      	subs	r1, r2, #1
 8001d38:	418a      	sbcs	r2, r1
 8001d3a:	4315      	orrs	r5, r2
 8001d3c:	9a02      	ldr	r2, [sp, #8]
 8001d3e:	40da      	lsrs	r2, r3
 8001d40:	1aa4      	subs	r4, r4, r2
 8001d42:	1b45      	subs	r5, r0, r5
 8001d44:	42a8      	cmp	r0, r5
 8001d46:	4180      	sbcs	r0, r0
 8001d48:	4240      	negs	r0, r0
 8001d4a:	1a24      	subs	r4, r4, r0
 8001d4c:	0223      	lsls	r3, r4, #8
 8001d4e:	d400      	bmi.n	8001d52 <__aeabi_dsub+0xca>
 8001d50:	e13d      	b.n	8001fce <__aeabi_dsub+0x346>
 8001d52:	0264      	lsls	r4, r4, #9
 8001d54:	0a64      	lsrs	r4, r4, #9
 8001d56:	2c00      	cmp	r4, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0xd4>
 8001d5a:	e147      	b.n	8001fec <__aeabi_dsub+0x364>
 8001d5c:	0020      	movs	r0, r4
 8001d5e:	f000 fc27 	bl	80025b0 <__clzsi2>
 8001d62:	0003      	movs	r3, r0
 8001d64:	3b08      	subs	r3, #8
 8001d66:	2120      	movs	r1, #32
 8001d68:	0028      	movs	r0, r5
 8001d6a:	1aca      	subs	r2, r1, r3
 8001d6c:	40d0      	lsrs	r0, r2
 8001d6e:	409c      	lsls	r4, r3
 8001d70:	0002      	movs	r2, r0
 8001d72:	409d      	lsls	r5, r3
 8001d74:	4322      	orrs	r2, r4
 8001d76:	429f      	cmp	r7, r3
 8001d78:	dd00      	ble.n	8001d7c <__aeabi_dsub+0xf4>
 8001d7a:	e177      	b.n	800206c <__aeabi_dsub+0x3e4>
 8001d7c:	1bd8      	subs	r0, r3, r7
 8001d7e:	3001      	adds	r0, #1
 8001d80:	1a09      	subs	r1, r1, r0
 8001d82:	002c      	movs	r4, r5
 8001d84:	408d      	lsls	r5, r1
 8001d86:	40c4      	lsrs	r4, r0
 8001d88:	1e6b      	subs	r3, r5, #1
 8001d8a:	419d      	sbcs	r5, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	40c2      	lsrs	r2, r0
 8001d90:	408b      	lsls	r3, r1
 8001d92:	4325      	orrs	r5, r4
 8001d94:	2700      	movs	r7, #0
 8001d96:	0014      	movs	r4, r2
 8001d98:	431d      	orrs	r5, r3
 8001d9a:	076b      	lsls	r3, r5, #29
 8001d9c:	d009      	beq.n	8001db2 <__aeabi_dsub+0x12a>
 8001d9e:	230f      	movs	r3, #15
 8001da0:	402b      	ands	r3, r5
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d005      	beq.n	8001db2 <__aeabi_dsub+0x12a>
 8001da6:	1d2b      	adds	r3, r5, #4
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	41ad      	sbcs	r5, r5
 8001dac:	426d      	negs	r5, r5
 8001dae:	1964      	adds	r4, r4, r5
 8001db0:	001d      	movs	r5, r3
 8001db2:	0223      	lsls	r3, r4, #8
 8001db4:	d400      	bmi.n	8001db8 <__aeabi_dsub+0x130>
 8001db6:	e140      	b.n	800203a <__aeabi_dsub+0x3b2>
 8001db8:	4a88      	ldr	r2, [pc, #544]	@ (8001fdc <__aeabi_dsub+0x354>)
 8001dba:	3701      	adds	r7, #1
 8001dbc:	4297      	cmp	r7, r2
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x13a>
 8001dc0:	e101      	b.n	8001fc6 <__aeabi_dsub+0x33e>
 8001dc2:	2601      	movs	r6, #1
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	4986      	ldr	r1, [pc, #536]	@ (8001fe0 <__aeabi_dsub+0x358>)
 8001dc8:	08ed      	lsrs	r5, r5, #3
 8001dca:	4021      	ands	r1, r4
 8001dcc:	074a      	lsls	r2, r1, #29
 8001dce:	432a      	orrs	r2, r5
 8001dd0:	057c      	lsls	r4, r7, #21
 8001dd2:	024d      	lsls	r5, r1, #9
 8001dd4:	0b2d      	lsrs	r5, r5, #12
 8001dd6:	0d64      	lsrs	r4, r4, #21
 8001dd8:	401e      	ands	r6, r3
 8001dda:	0524      	lsls	r4, r4, #20
 8001ddc:	432c      	orrs	r4, r5
 8001dde:	07f6      	lsls	r6, r6, #31
 8001de0:	4334      	orrs	r4, r6
 8001de2:	0010      	movs	r0, r2
 8001de4:	0021      	movs	r1, r4
 8001de6:	b005      	add	sp, #20
 8001de8:	bcf0      	pop	{r4, r5, r6, r7}
 8001dea:	46bb      	mov	fp, r7
 8001dec:	46b2      	mov	sl, r6
 8001dee:	46a9      	mov	r9, r5
 8001df0:	46a0      	mov	r8, r4
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df4:	2d00      	cmp	r5, #0
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x172>
 8001df8:	e2d0      	b.n	800239c <__aeabi_dsub+0x714>
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_dsub+0x17a>
 8001e00:	e0d4      	b.n	8001fac <__aeabi_dsub+0x324>
 8001e02:	4661      	mov	r1, ip
 8001e04:	9b02      	ldr	r3, [sp, #8]
 8001e06:	4319      	orrs	r1, r3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x184>
 8001e0a:	e12b      	b.n	8002064 <__aeabi_dsub+0x3dc>
 8001e0c:	1e69      	subs	r1, r5, #1
 8001e0e:	2d01      	cmp	r5, #1
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x18c>
 8001e12:	e1d9      	b.n	80021c8 <__aeabi_dsub+0x540>
 8001e14:	4295      	cmp	r5, r2
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x192>
 8001e18:	e10a      	b.n	8002030 <__aeabi_dsub+0x3a8>
 8001e1a:	2501      	movs	r5, #1
 8001e1c:	2938      	cmp	r1, #56	@ 0x38
 8001e1e:	dc17      	bgt.n	8001e50 <__aeabi_dsub+0x1c8>
 8001e20:	468a      	mov	sl, r1
 8001e22:	4653      	mov	r3, sl
 8001e24:	2b1f      	cmp	r3, #31
 8001e26:	dd00      	ble.n	8001e2a <__aeabi_dsub+0x1a2>
 8001e28:	e1e7      	b.n	80021fa <__aeabi_dsub+0x572>
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	1ad2      	subs	r2, r2, r3
 8001e2e:	9b02      	ldr	r3, [sp, #8]
 8001e30:	4661      	mov	r1, ip
 8001e32:	4093      	lsls	r3, r2
 8001e34:	001d      	movs	r5, r3
 8001e36:	4653      	mov	r3, sl
 8001e38:	40d9      	lsrs	r1, r3
 8001e3a:	4663      	mov	r3, ip
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	001a      	movs	r2, r3
 8001e40:	430d      	orrs	r5, r1
 8001e42:	1e51      	subs	r1, r2, #1
 8001e44:	418a      	sbcs	r2, r1
 8001e46:	4653      	mov	r3, sl
 8001e48:	4315      	orrs	r5, r2
 8001e4a:	9a02      	ldr	r2, [sp, #8]
 8001e4c:	40da      	lsrs	r2, r3
 8001e4e:	18a4      	adds	r4, r4, r2
 8001e50:	182d      	adds	r5, r5, r0
 8001e52:	4285      	cmp	r5, r0
 8001e54:	4180      	sbcs	r0, r0
 8001e56:	4240      	negs	r0, r0
 8001e58:	1824      	adds	r4, r4, r0
 8001e5a:	0223      	lsls	r3, r4, #8
 8001e5c:	d400      	bmi.n	8001e60 <__aeabi_dsub+0x1d8>
 8001e5e:	e0b6      	b.n	8001fce <__aeabi_dsub+0x346>
 8001e60:	4b5e      	ldr	r3, [pc, #376]	@ (8001fdc <__aeabi_dsub+0x354>)
 8001e62:	3701      	adds	r7, #1
 8001e64:	429f      	cmp	r7, r3
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x1e2>
 8001e68:	e0ad      	b.n	8001fc6 <__aeabi_dsub+0x33e>
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe0 <__aeabi_dsub+0x358>)
 8001e6e:	086a      	lsrs	r2, r5, #1
 8001e70:	401c      	ands	r4, r3
 8001e72:	4029      	ands	r1, r5
 8001e74:	430a      	orrs	r2, r1
 8001e76:	07e5      	lsls	r5, r4, #31
 8001e78:	4315      	orrs	r5, r2
 8001e7a:	0864      	lsrs	r4, r4, #1
 8001e7c:	e78d      	b.n	8001d9a <__aeabi_dsub+0x112>
 8001e7e:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <__aeabi_dsub+0x35c>)
 8001e80:	9b02      	ldr	r3, [sp, #8]
 8001e82:	4692      	mov	sl, r2
 8001e84:	4662      	mov	r2, ip
 8001e86:	44ba      	add	sl, r7
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	d02c      	beq.n	8001ee6 <__aeabi_dsub+0x25e>
 8001e8c:	428e      	cmp	r6, r1
 8001e8e:	d02e      	beq.n	8001eee <__aeabi_dsub+0x266>
 8001e90:	4652      	mov	r2, sl
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d060      	beq.n	8001f58 <__aeabi_dsub+0x2d0>
 8001e96:	2f00      	cmp	r7, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x214>
 8001e9a:	e0db      	b.n	8002054 <__aeabi_dsub+0x3cc>
 8001e9c:	4663      	mov	r3, ip
 8001e9e:	000e      	movs	r6, r1
 8001ea0:	9c02      	ldr	r4, [sp, #8]
 8001ea2:	08d8      	lsrs	r0, r3, #3
 8001ea4:	0762      	lsls	r2, r4, #29
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	08e4      	lsrs	r4, r4, #3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	4323      	orrs	r3, r4
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x22a>
 8001eb0:	e254      	b.n	800235c <__aeabi_dsub+0x6d4>
 8001eb2:	2580      	movs	r5, #128	@ 0x80
 8001eb4:	032d      	lsls	r5, r5, #12
 8001eb6:	4325      	orrs	r5, r4
 8001eb8:	032d      	lsls	r5, r5, #12
 8001eba:	4c48      	ldr	r4, [pc, #288]	@ (8001fdc <__aeabi_dsub+0x354>)
 8001ebc:	0b2d      	lsrs	r5, r5, #12
 8001ebe:	e78c      	b.n	8001dda <__aeabi_dsub+0x152>
 8001ec0:	4661      	mov	r1, ip
 8001ec2:	9b02      	ldr	r3, [sp, #8]
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x242>
 8001ec8:	e0cc      	b.n	8002064 <__aeabi_dsub+0x3dc>
 8001eca:	0029      	movs	r1, r5
 8001ecc:	3901      	subs	r1, #1
 8001ece:	2d01      	cmp	r5, #1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x24c>
 8001ed2:	e188      	b.n	80021e6 <__aeabi_dsub+0x55e>
 8001ed4:	4295      	cmp	r5, r2
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x252>
 8001ed8:	e0aa      	b.n	8002030 <__aeabi_dsub+0x3a8>
 8001eda:	2501      	movs	r5, #1
 8001edc:	2938      	cmp	r1, #56	@ 0x38
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x25a>
 8001ee0:	e72f      	b.n	8001d42 <__aeabi_dsub+0xba>
 8001ee2:	468a      	mov	sl, r1
 8001ee4:	e718      	b.n	8001d18 <__aeabi_dsub+0x90>
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4051      	eors	r1, r2
 8001eea:	428e      	cmp	r6, r1
 8001eec:	d1d0      	bne.n	8001e90 <__aeabi_dsub+0x208>
 8001eee:	4653      	mov	r3, sl
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x26e>
 8001ef4:	e0be      	b.n	8002074 <__aeabi_dsub+0x3ec>
 8001ef6:	2f00      	cmp	r7, #0
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x274>
 8001efa:	e138      	b.n	800216e <__aeabi_dsub+0x4e6>
 8001efc:	46ca      	mov	sl, r9
 8001efe:	0022      	movs	r2, r4
 8001f00:	4302      	orrs	r2, r0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x27e>
 8001f04:	e1e2      	b.n	80022cc <__aeabi_dsub+0x644>
 8001f06:	4653      	mov	r3, sl
 8001f08:	1e59      	subs	r1, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x288>
 8001f0e:	e20d      	b.n	800232c <__aeabi_dsub+0x6a4>
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <__aeabi_dsub+0x354>)
 8001f12:	4592      	cmp	sl, r2
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x290>
 8001f16:	e1d2      	b.n	80022be <__aeabi_dsub+0x636>
 8001f18:	2701      	movs	r7, #1
 8001f1a:	2938      	cmp	r1, #56	@ 0x38
 8001f1c:	dc13      	bgt.n	8001f46 <__aeabi_dsub+0x2be>
 8001f1e:	291f      	cmp	r1, #31
 8001f20:	dd00      	ble.n	8001f24 <__aeabi_dsub+0x29c>
 8001f22:	e1ee      	b.n	8002302 <__aeabi_dsub+0x67a>
 8001f24:	2220      	movs	r2, #32
 8001f26:	9b02      	ldr	r3, [sp, #8]
 8001f28:	1a52      	subs	r2, r2, r1
 8001f2a:	0025      	movs	r5, r4
 8001f2c:	0007      	movs	r7, r0
 8001f2e:	469a      	mov	sl, r3
 8001f30:	40cc      	lsrs	r4, r1
 8001f32:	4090      	lsls	r0, r2
 8001f34:	4095      	lsls	r5, r2
 8001f36:	40cf      	lsrs	r7, r1
 8001f38:	44a2      	add	sl, r4
 8001f3a:	1e42      	subs	r2, r0, #1
 8001f3c:	4190      	sbcs	r0, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	432f      	orrs	r7, r5
 8001f42:	4307      	orrs	r7, r0
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	003d      	movs	r5, r7
 8001f48:	4465      	add	r5, ip
 8001f4a:	4565      	cmp	r5, ip
 8001f4c:	4192      	sbcs	r2, r2
 8001f4e:	9b02      	ldr	r3, [sp, #8]
 8001f50:	4252      	negs	r2, r2
 8001f52:	464f      	mov	r7, r9
 8001f54:	18d4      	adds	r4, r2, r3
 8001f56:	e780      	b.n	8001e5a <__aeabi_dsub+0x1d2>
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <__aeabi_dsub+0x360>)
 8001f5a:	1c7d      	adds	r5, r7, #1
 8001f5c:	4215      	tst	r5, r2
 8001f5e:	d000      	beq.n	8001f62 <__aeabi_dsub+0x2da>
 8001f60:	e0aa      	b.n	80020b8 <__aeabi_dsub+0x430>
 8001f62:	4662      	mov	r2, ip
 8001f64:	0025      	movs	r5, r4
 8001f66:	9b02      	ldr	r3, [sp, #8]
 8001f68:	4305      	orrs	r5, r0
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	2f00      	cmp	r7, #0
 8001f6e:	d000      	beq.n	8001f72 <__aeabi_dsub+0x2ea>
 8001f70:	e0f5      	b.n	800215e <__aeabi_dsub+0x4d6>
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x2f0>
 8001f76:	e16b      	b.n	8002250 <__aeabi_dsub+0x5c8>
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x2f6>
 8001f7c:	e152      	b.n	8002224 <__aeabi_dsub+0x59c>
 8001f7e:	4663      	mov	r3, ip
 8001f80:	1ac5      	subs	r5, r0, r3
 8001f82:	9b02      	ldr	r3, [sp, #8]
 8001f84:	1ae2      	subs	r2, r4, r3
 8001f86:	42a8      	cmp	r0, r5
 8001f88:	419b      	sbcs	r3, r3
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	021a      	lsls	r2, r3, #8
 8001f90:	d400      	bmi.n	8001f94 <__aeabi_dsub+0x30c>
 8001f92:	e1d5      	b.n	8002340 <__aeabi_dsub+0x6b8>
 8001f94:	4663      	mov	r3, ip
 8001f96:	1a1d      	subs	r5, r3, r0
 8001f98:	45ac      	cmp	ip, r5
 8001f9a:	4192      	sbcs	r2, r2
 8001f9c:	2601      	movs	r6, #1
 8001f9e:	9b02      	ldr	r3, [sp, #8]
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	1b1c      	subs	r4, r3, r4
 8001fa4:	4688      	mov	r8, r1
 8001fa6:	1aa4      	subs	r4, r4, r2
 8001fa8:	400e      	ands	r6, r1
 8001faa:	e6f6      	b.n	8001d9a <__aeabi_dsub+0x112>
 8001fac:	4297      	cmp	r7, r2
 8001fae:	d03f      	beq.n	8002030 <__aeabi_dsub+0x3a8>
 8001fb0:	4652      	mov	r2, sl
 8001fb2:	2501      	movs	r5, #1
 8001fb4:	2a38      	cmp	r2, #56	@ 0x38
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dsub+0x332>
 8001fb8:	e74a      	b.n	8001e50 <__aeabi_dsub+0x1c8>
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	9b02      	ldr	r3, [sp, #8]
 8001fbe:	0412      	lsls	r2, r2, #16
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	e72d      	b.n	8001e22 <__aeabi_dsub+0x19a>
 8001fc6:	003c      	movs	r4, r7
 8001fc8:	2500      	movs	r5, #0
 8001fca:	2200      	movs	r2, #0
 8001fcc:	e705      	b.n	8001dda <__aeabi_dsub+0x152>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	402b      	ands	r3, r5
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x350>
 8001fd6:	e6e2      	b.n	8001d9e <__aeabi_dsub+0x116>
 8001fd8:	e06b      	b.n	80020b2 <__aeabi_dsub+0x42a>
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	ff7fffff 	.word	0xff7fffff
 8001fe4:	fffff801 	.word	0xfffff801
 8001fe8:	000007fe 	.word	0x000007fe
 8001fec:	0028      	movs	r0, r5
 8001fee:	f000 fadf 	bl	80025b0 <__clzsi2>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	3318      	adds	r3, #24
 8001ff6:	2b1f      	cmp	r3, #31
 8001ff8:	dc00      	bgt.n	8001ffc <__aeabi_dsub+0x374>
 8001ffa:	e6b4      	b.n	8001d66 <__aeabi_dsub+0xde>
 8001ffc:	002a      	movs	r2, r5
 8001ffe:	3808      	subs	r0, #8
 8002000:	4082      	lsls	r2, r0
 8002002:	429f      	cmp	r7, r3
 8002004:	dd00      	ble.n	8002008 <__aeabi_dsub+0x380>
 8002006:	e0b9      	b.n	800217c <__aeabi_dsub+0x4f4>
 8002008:	1bdb      	subs	r3, r3, r7
 800200a:	1c58      	adds	r0, r3, #1
 800200c:	281f      	cmp	r0, #31
 800200e:	dc00      	bgt.n	8002012 <__aeabi_dsub+0x38a>
 8002010:	e1a0      	b.n	8002354 <__aeabi_dsub+0x6cc>
 8002012:	0015      	movs	r5, r2
 8002014:	3b1f      	subs	r3, #31
 8002016:	40dd      	lsrs	r5, r3
 8002018:	2820      	cmp	r0, #32
 800201a:	d005      	beq.n	8002028 <__aeabi_dsub+0x3a0>
 800201c:	2340      	movs	r3, #64	@ 0x40
 800201e:	1a1b      	subs	r3, r3, r0
 8002020:	409a      	lsls	r2, r3
 8002022:	1e53      	subs	r3, r2, #1
 8002024:	419a      	sbcs	r2, r3
 8002026:	4315      	orrs	r5, r2
 8002028:	2307      	movs	r3, #7
 800202a:	2700      	movs	r7, #0
 800202c:	402b      	ands	r3, r5
 800202e:	e7d0      	b.n	8001fd2 <__aeabi_dsub+0x34a>
 8002030:	08c0      	lsrs	r0, r0, #3
 8002032:	0762      	lsls	r2, r4, #29
 8002034:	4302      	orrs	r2, r0
 8002036:	08e4      	lsrs	r4, r4, #3
 8002038:	e737      	b.n	8001eaa <__aeabi_dsub+0x222>
 800203a:	08ea      	lsrs	r2, r5, #3
 800203c:	0763      	lsls	r3, r4, #29
 800203e:	431a      	orrs	r2, r3
 8002040:	4bd3      	ldr	r3, [pc, #844]	@ (8002390 <__aeabi_dsub+0x708>)
 8002042:	08e4      	lsrs	r4, r4, #3
 8002044:	429f      	cmp	r7, r3
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x3c2>
 8002048:	e72f      	b.n	8001eaa <__aeabi_dsub+0x222>
 800204a:	0324      	lsls	r4, r4, #12
 800204c:	0b25      	lsrs	r5, r4, #12
 800204e:	057c      	lsls	r4, r7, #21
 8002050:	0d64      	lsrs	r4, r4, #21
 8002052:	e6c2      	b.n	8001dda <__aeabi_dsub+0x152>
 8002054:	46ca      	mov	sl, r9
 8002056:	0022      	movs	r2, r4
 8002058:	4302      	orrs	r2, r0
 800205a:	d158      	bne.n	800210e <__aeabi_dsub+0x486>
 800205c:	4663      	mov	r3, ip
 800205e:	000e      	movs	r6, r1
 8002060:	9c02      	ldr	r4, [sp, #8]
 8002062:	9303      	str	r3, [sp, #12]
 8002064:	9b03      	ldr	r3, [sp, #12]
 8002066:	4657      	mov	r7, sl
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	e7e7      	b.n	800203c <__aeabi_dsub+0x3b4>
 800206c:	4cc9      	ldr	r4, [pc, #804]	@ (8002394 <__aeabi_dsub+0x70c>)
 800206e:	1aff      	subs	r7, r7, r3
 8002070:	4014      	ands	r4, r2
 8002072:	e692      	b.n	8001d9a <__aeabi_dsub+0x112>
 8002074:	4dc8      	ldr	r5, [pc, #800]	@ (8002398 <__aeabi_dsub+0x710>)
 8002076:	1c7a      	adds	r2, r7, #1
 8002078:	422a      	tst	r2, r5
 800207a:	d000      	beq.n	800207e <__aeabi_dsub+0x3f6>
 800207c:	e084      	b.n	8002188 <__aeabi_dsub+0x500>
 800207e:	0022      	movs	r2, r4
 8002080:	4302      	orrs	r2, r0
 8002082:	2f00      	cmp	r7, #0
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x400>
 8002086:	e0ef      	b.n	8002268 <__aeabi_dsub+0x5e0>
 8002088:	2a00      	cmp	r2, #0
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x406>
 800208c:	e0e5      	b.n	800225a <__aeabi_dsub+0x5d2>
 800208e:	4662      	mov	r2, ip
 8002090:	9902      	ldr	r1, [sp, #8]
 8002092:	430a      	orrs	r2, r1
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x410>
 8002096:	e0c5      	b.n	8002224 <__aeabi_dsub+0x59c>
 8002098:	4663      	mov	r3, ip
 800209a:	18c5      	adds	r5, r0, r3
 800209c:	468c      	mov	ip, r1
 800209e:	4285      	cmp	r5, r0
 80020a0:	4180      	sbcs	r0, r0
 80020a2:	4464      	add	r4, ip
 80020a4:	4240      	negs	r0, r0
 80020a6:	1824      	adds	r4, r4, r0
 80020a8:	0223      	lsls	r3, r4, #8
 80020aa:	d502      	bpl.n	80020b2 <__aeabi_dsub+0x42a>
 80020ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002394 <__aeabi_dsub+0x70c>)
 80020ae:	3701      	adds	r7, #1
 80020b0:	401c      	ands	r4, r3
 80020b2:	46ba      	mov	sl, r7
 80020b4:	9503      	str	r5, [sp, #12]
 80020b6:	e7d5      	b.n	8002064 <__aeabi_dsub+0x3dc>
 80020b8:	4662      	mov	r2, ip
 80020ba:	1a85      	subs	r5, r0, r2
 80020bc:	42a8      	cmp	r0, r5
 80020be:	4192      	sbcs	r2, r2
 80020c0:	4252      	negs	r2, r2
 80020c2:	4691      	mov	r9, r2
 80020c4:	9b02      	ldr	r3, [sp, #8]
 80020c6:	1ae3      	subs	r3, r4, r3
 80020c8:	001a      	movs	r2, r3
 80020ca:	464b      	mov	r3, r9
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	0013      	movs	r3, r2
 80020d0:	4691      	mov	r9, r2
 80020d2:	021a      	lsls	r2, r3, #8
 80020d4:	d46c      	bmi.n	80021b0 <__aeabi_dsub+0x528>
 80020d6:	464a      	mov	r2, r9
 80020d8:	464c      	mov	r4, r9
 80020da:	432a      	orrs	r2, r5
 80020dc:	d000      	beq.n	80020e0 <__aeabi_dsub+0x458>
 80020de:	e63a      	b.n	8001d56 <__aeabi_dsub+0xce>
 80020e0:	2600      	movs	r6, #0
 80020e2:	2400      	movs	r4, #0
 80020e4:	2500      	movs	r5, #0
 80020e6:	e678      	b.n	8001dda <__aeabi_dsub+0x152>
 80020e8:	9902      	ldr	r1, [sp, #8]
 80020ea:	4653      	mov	r3, sl
 80020ec:	000d      	movs	r5, r1
 80020ee:	3a20      	subs	r2, #32
 80020f0:	40d5      	lsrs	r5, r2
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d006      	beq.n	8002104 <__aeabi_dsub+0x47c>
 80020f6:	2240      	movs	r2, #64	@ 0x40
 80020f8:	1ad2      	subs	r2, r2, r3
 80020fa:	000b      	movs	r3, r1
 80020fc:	4093      	lsls	r3, r2
 80020fe:	4662      	mov	r2, ip
 8002100:	431a      	orrs	r2, r3
 8002102:	4693      	mov	fp, r2
 8002104:	465b      	mov	r3, fp
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	4193      	sbcs	r3, r2
 800210a:	431d      	orrs	r5, r3
 800210c:	e619      	b.n	8001d42 <__aeabi_dsub+0xba>
 800210e:	4653      	mov	r3, sl
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x490>
 8002116:	e0c6      	b.n	80022a6 <__aeabi_dsub+0x61e>
 8002118:	4e9d      	ldr	r6, [pc, #628]	@ (8002390 <__aeabi_dsub+0x708>)
 800211a:	45b2      	cmp	sl, r6
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x498>
 800211e:	e6bd      	b.n	8001e9c <__aeabi_dsub+0x214>
 8002120:	4688      	mov	r8, r1
 8002122:	000e      	movs	r6, r1
 8002124:	2501      	movs	r5, #1
 8002126:	2a38      	cmp	r2, #56	@ 0x38
 8002128:	dc10      	bgt.n	800214c <__aeabi_dsub+0x4c4>
 800212a:	2a1f      	cmp	r2, #31
 800212c:	dc7f      	bgt.n	800222e <__aeabi_dsub+0x5a6>
 800212e:	2120      	movs	r1, #32
 8002130:	0025      	movs	r5, r4
 8002132:	1a89      	subs	r1, r1, r2
 8002134:	0007      	movs	r7, r0
 8002136:	4088      	lsls	r0, r1
 8002138:	408d      	lsls	r5, r1
 800213a:	40d7      	lsrs	r7, r2
 800213c:	40d4      	lsrs	r4, r2
 800213e:	1e41      	subs	r1, r0, #1
 8002140:	4188      	sbcs	r0, r1
 8002142:	9b02      	ldr	r3, [sp, #8]
 8002144:	433d      	orrs	r5, r7
 8002146:	1b1b      	subs	r3, r3, r4
 8002148:	4305      	orrs	r5, r0
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	4662      	mov	r2, ip
 800214e:	1b55      	subs	r5, r2, r5
 8002150:	45ac      	cmp	ip, r5
 8002152:	4192      	sbcs	r2, r2
 8002154:	9b02      	ldr	r3, [sp, #8]
 8002156:	4252      	negs	r2, r2
 8002158:	464f      	mov	r7, r9
 800215a:	1a9c      	subs	r4, r3, r2
 800215c:	e5f6      	b.n	8001d4c <__aeabi_dsub+0xc4>
 800215e:	2d00      	cmp	r5, #0
 8002160:	d000      	beq.n	8002164 <__aeabi_dsub+0x4dc>
 8002162:	e0b7      	b.n	80022d4 <__aeabi_dsub+0x64c>
 8002164:	2a00      	cmp	r2, #0
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0x4e2>
 8002168:	e0f0      	b.n	800234c <__aeabi_dsub+0x6c4>
 800216a:	2601      	movs	r6, #1
 800216c:	400e      	ands	r6, r1
 800216e:	4663      	mov	r3, ip
 8002170:	9802      	ldr	r0, [sp, #8]
 8002172:	08d9      	lsrs	r1, r3, #3
 8002174:	0742      	lsls	r2, r0, #29
 8002176:	430a      	orrs	r2, r1
 8002178:	08c4      	lsrs	r4, r0, #3
 800217a:	e696      	b.n	8001eaa <__aeabi_dsub+0x222>
 800217c:	4c85      	ldr	r4, [pc, #532]	@ (8002394 <__aeabi_dsub+0x70c>)
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	4014      	ands	r4, r2
 8002182:	0762      	lsls	r2, r4, #29
 8002184:	08e4      	lsrs	r4, r4, #3
 8002186:	e760      	b.n	800204a <__aeabi_dsub+0x3c2>
 8002188:	4981      	ldr	r1, [pc, #516]	@ (8002390 <__aeabi_dsub+0x708>)
 800218a:	428a      	cmp	r2, r1
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x508>
 800218e:	e0c9      	b.n	8002324 <__aeabi_dsub+0x69c>
 8002190:	4663      	mov	r3, ip
 8002192:	18c1      	adds	r1, r0, r3
 8002194:	4281      	cmp	r1, r0
 8002196:	4180      	sbcs	r0, r0
 8002198:	9b02      	ldr	r3, [sp, #8]
 800219a:	4240      	negs	r0, r0
 800219c:	18e3      	adds	r3, r4, r3
 800219e:	181b      	adds	r3, r3, r0
 80021a0:	07dd      	lsls	r5, r3, #31
 80021a2:	085c      	lsrs	r4, r3, #1
 80021a4:	2307      	movs	r3, #7
 80021a6:	0849      	lsrs	r1, r1, #1
 80021a8:	430d      	orrs	r5, r1
 80021aa:	0017      	movs	r7, r2
 80021ac:	402b      	ands	r3, r5
 80021ae:	e710      	b.n	8001fd2 <__aeabi_dsub+0x34a>
 80021b0:	4663      	mov	r3, ip
 80021b2:	1a1d      	subs	r5, r3, r0
 80021b4:	45ac      	cmp	ip, r5
 80021b6:	4192      	sbcs	r2, r2
 80021b8:	2601      	movs	r6, #1
 80021ba:	9b02      	ldr	r3, [sp, #8]
 80021bc:	4252      	negs	r2, r2
 80021be:	1b1c      	subs	r4, r3, r4
 80021c0:	4688      	mov	r8, r1
 80021c2:	1aa4      	subs	r4, r4, r2
 80021c4:	400e      	ands	r6, r1
 80021c6:	e5c6      	b.n	8001d56 <__aeabi_dsub+0xce>
 80021c8:	4663      	mov	r3, ip
 80021ca:	18c5      	adds	r5, r0, r3
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	4285      	cmp	r5, r0
 80021d0:	4180      	sbcs	r0, r0
 80021d2:	469c      	mov	ip, r3
 80021d4:	4240      	negs	r0, r0
 80021d6:	4464      	add	r4, ip
 80021d8:	1824      	adds	r4, r4, r0
 80021da:	2701      	movs	r7, #1
 80021dc:	0223      	lsls	r3, r4, #8
 80021de:	d400      	bmi.n	80021e2 <__aeabi_dsub+0x55a>
 80021e0:	e6f5      	b.n	8001fce <__aeabi_dsub+0x346>
 80021e2:	2702      	movs	r7, #2
 80021e4:	e641      	b.n	8001e6a <__aeabi_dsub+0x1e2>
 80021e6:	4663      	mov	r3, ip
 80021e8:	1ac5      	subs	r5, r0, r3
 80021ea:	42a8      	cmp	r0, r5
 80021ec:	4180      	sbcs	r0, r0
 80021ee:	9b02      	ldr	r3, [sp, #8]
 80021f0:	4240      	negs	r0, r0
 80021f2:	1ae4      	subs	r4, r4, r3
 80021f4:	2701      	movs	r7, #1
 80021f6:	1a24      	subs	r4, r4, r0
 80021f8:	e5a8      	b.n	8001d4c <__aeabi_dsub+0xc4>
 80021fa:	9d02      	ldr	r5, [sp, #8]
 80021fc:	4652      	mov	r2, sl
 80021fe:	002b      	movs	r3, r5
 8002200:	3a20      	subs	r2, #32
 8002202:	40d3      	lsrs	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	4653      	mov	r3, sl
 8002208:	2b20      	cmp	r3, #32
 800220a:	d006      	beq.n	800221a <__aeabi_dsub+0x592>
 800220c:	2240      	movs	r2, #64	@ 0x40
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	002b      	movs	r3, r5
 8002212:	4093      	lsls	r3, r2
 8002214:	4662      	mov	r2, ip
 8002216:	431a      	orrs	r2, r3
 8002218:	4693      	mov	fp, r2
 800221a:	465d      	mov	r5, fp
 800221c:	1e6b      	subs	r3, r5, #1
 800221e:	419d      	sbcs	r5, r3
 8002220:	430d      	orrs	r5, r1
 8002222:	e615      	b.n	8001e50 <__aeabi_dsub+0x1c8>
 8002224:	0762      	lsls	r2, r4, #29
 8002226:	08c0      	lsrs	r0, r0, #3
 8002228:	4302      	orrs	r2, r0
 800222a:	08e4      	lsrs	r4, r4, #3
 800222c:	e70d      	b.n	800204a <__aeabi_dsub+0x3c2>
 800222e:	0011      	movs	r1, r2
 8002230:	0027      	movs	r7, r4
 8002232:	3920      	subs	r1, #32
 8002234:	40cf      	lsrs	r7, r1
 8002236:	2a20      	cmp	r2, #32
 8002238:	d005      	beq.n	8002246 <__aeabi_dsub+0x5be>
 800223a:	2140      	movs	r1, #64	@ 0x40
 800223c:	1a8a      	subs	r2, r1, r2
 800223e:	4094      	lsls	r4, r2
 8002240:	0025      	movs	r5, r4
 8002242:	4305      	orrs	r5, r0
 8002244:	9503      	str	r5, [sp, #12]
 8002246:	9d03      	ldr	r5, [sp, #12]
 8002248:	1e6a      	subs	r2, r5, #1
 800224a:	4195      	sbcs	r5, r2
 800224c:	433d      	orrs	r5, r7
 800224e:	e77d      	b.n	800214c <__aeabi_dsub+0x4c4>
 8002250:	2a00      	cmp	r2, #0
 8002252:	d100      	bne.n	8002256 <__aeabi_dsub+0x5ce>
 8002254:	e744      	b.n	80020e0 <__aeabi_dsub+0x458>
 8002256:	2601      	movs	r6, #1
 8002258:	400e      	ands	r6, r1
 800225a:	4663      	mov	r3, ip
 800225c:	08d9      	lsrs	r1, r3, #3
 800225e:	9b02      	ldr	r3, [sp, #8]
 8002260:	075a      	lsls	r2, r3, #29
 8002262:	430a      	orrs	r2, r1
 8002264:	08dc      	lsrs	r4, r3, #3
 8002266:	e6f0      	b.n	800204a <__aeabi_dsub+0x3c2>
 8002268:	2a00      	cmp	r2, #0
 800226a:	d028      	beq.n	80022be <__aeabi_dsub+0x636>
 800226c:	4662      	mov	r2, ip
 800226e:	9f02      	ldr	r7, [sp, #8]
 8002270:	08c0      	lsrs	r0, r0, #3
 8002272:	433a      	orrs	r2, r7
 8002274:	d100      	bne.n	8002278 <__aeabi_dsub+0x5f0>
 8002276:	e6dc      	b.n	8002032 <__aeabi_dsub+0x3aa>
 8002278:	0762      	lsls	r2, r4, #29
 800227a:	4310      	orrs	r0, r2
 800227c:	2280      	movs	r2, #128	@ 0x80
 800227e:	08e4      	lsrs	r4, r4, #3
 8002280:	0312      	lsls	r2, r2, #12
 8002282:	4214      	tst	r4, r2
 8002284:	d009      	beq.n	800229a <__aeabi_dsub+0x612>
 8002286:	08fd      	lsrs	r5, r7, #3
 8002288:	4215      	tst	r5, r2
 800228a:	d106      	bne.n	800229a <__aeabi_dsub+0x612>
 800228c:	4663      	mov	r3, ip
 800228e:	2601      	movs	r6, #1
 8002290:	002c      	movs	r4, r5
 8002292:	08d8      	lsrs	r0, r3, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4318      	orrs	r0, r3
 8002298:	400e      	ands	r6, r1
 800229a:	0f42      	lsrs	r2, r0, #29
 800229c:	00c0      	lsls	r0, r0, #3
 800229e:	08c0      	lsrs	r0, r0, #3
 80022a0:	0752      	lsls	r2, r2, #29
 80022a2:	4302      	orrs	r2, r0
 80022a4:	e601      	b.n	8001eaa <__aeabi_dsub+0x222>
 80022a6:	4663      	mov	r3, ip
 80022a8:	1a1d      	subs	r5, r3, r0
 80022aa:	45ac      	cmp	ip, r5
 80022ac:	4192      	sbcs	r2, r2
 80022ae:	9b02      	ldr	r3, [sp, #8]
 80022b0:	4252      	negs	r2, r2
 80022b2:	1b1c      	subs	r4, r3, r4
 80022b4:	000e      	movs	r6, r1
 80022b6:	4688      	mov	r8, r1
 80022b8:	2701      	movs	r7, #1
 80022ba:	1aa4      	subs	r4, r4, r2
 80022bc:	e546      	b.n	8001d4c <__aeabi_dsub+0xc4>
 80022be:	4663      	mov	r3, ip
 80022c0:	08d9      	lsrs	r1, r3, #3
 80022c2:	9b02      	ldr	r3, [sp, #8]
 80022c4:	075a      	lsls	r2, r3, #29
 80022c6:	430a      	orrs	r2, r1
 80022c8:	08dc      	lsrs	r4, r3, #3
 80022ca:	e5ee      	b.n	8001eaa <__aeabi_dsub+0x222>
 80022cc:	4663      	mov	r3, ip
 80022ce:	9c02      	ldr	r4, [sp, #8]
 80022d0:	9303      	str	r3, [sp, #12]
 80022d2:	e6c7      	b.n	8002064 <__aeabi_dsub+0x3dc>
 80022d4:	08c0      	lsrs	r0, r0, #3
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x654>
 80022da:	e6aa      	b.n	8002032 <__aeabi_dsub+0x3aa>
 80022dc:	0762      	lsls	r2, r4, #29
 80022de:	4310      	orrs	r0, r2
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	08e4      	lsrs	r4, r4, #3
 80022e4:	0312      	lsls	r2, r2, #12
 80022e6:	4214      	tst	r4, r2
 80022e8:	d0d7      	beq.n	800229a <__aeabi_dsub+0x612>
 80022ea:	9f02      	ldr	r7, [sp, #8]
 80022ec:	08fd      	lsrs	r5, r7, #3
 80022ee:	4215      	tst	r5, r2
 80022f0:	d1d3      	bne.n	800229a <__aeabi_dsub+0x612>
 80022f2:	4663      	mov	r3, ip
 80022f4:	2601      	movs	r6, #1
 80022f6:	08d8      	lsrs	r0, r3, #3
 80022f8:	077b      	lsls	r3, r7, #29
 80022fa:	002c      	movs	r4, r5
 80022fc:	4318      	orrs	r0, r3
 80022fe:	400e      	ands	r6, r1
 8002300:	e7cb      	b.n	800229a <__aeabi_dsub+0x612>
 8002302:	000a      	movs	r2, r1
 8002304:	0027      	movs	r7, r4
 8002306:	3a20      	subs	r2, #32
 8002308:	40d7      	lsrs	r7, r2
 800230a:	2920      	cmp	r1, #32
 800230c:	d005      	beq.n	800231a <__aeabi_dsub+0x692>
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	1a52      	subs	r2, r2, r1
 8002312:	4094      	lsls	r4, r2
 8002314:	0025      	movs	r5, r4
 8002316:	4305      	orrs	r5, r0
 8002318:	9503      	str	r5, [sp, #12]
 800231a:	9d03      	ldr	r5, [sp, #12]
 800231c:	1e6a      	subs	r2, r5, #1
 800231e:	4195      	sbcs	r5, r2
 8002320:	432f      	orrs	r7, r5
 8002322:	e610      	b.n	8001f46 <__aeabi_dsub+0x2be>
 8002324:	0014      	movs	r4, r2
 8002326:	2500      	movs	r5, #0
 8002328:	2200      	movs	r2, #0
 800232a:	e556      	b.n	8001dda <__aeabi_dsub+0x152>
 800232c:	9b02      	ldr	r3, [sp, #8]
 800232e:	4460      	add	r0, ip
 8002330:	4699      	mov	r9, r3
 8002332:	4560      	cmp	r0, ip
 8002334:	4192      	sbcs	r2, r2
 8002336:	444c      	add	r4, r9
 8002338:	4252      	negs	r2, r2
 800233a:	0005      	movs	r5, r0
 800233c:	18a4      	adds	r4, r4, r2
 800233e:	e74c      	b.n	80021da <__aeabi_dsub+0x552>
 8002340:	001a      	movs	r2, r3
 8002342:	001c      	movs	r4, r3
 8002344:	432a      	orrs	r2, r5
 8002346:	d000      	beq.n	800234a <__aeabi_dsub+0x6c2>
 8002348:	e6b3      	b.n	80020b2 <__aeabi_dsub+0x42a>
 800234a:	e6c9      	b.n	80020e0 <__aeabi_dsub+0x458>
 800234c:	2480      	movs	r4, #128	@ 0x80
 800234e:	2600      	movs	r6, #0
 8002350:	0324      	lsls	r4, r4, #12
 8002352:	e5ae      	b.n	8001eb2 <__aeabi_dsub+0x22a>
 8002354:	2120      	movs	r1, #32
 8002356:	2500      	movs	r5, #0
 8002358:	1a09      	subs	r1, r1, r0
 800235a:	e517      	b.n	8001d8c <__aeabi_dsub+0x104>
 800235c:	2200      	movs	r2, #0
 800235e:	2500      	movs	r5, #0
 8002360:	4c0b      	ldr	r4, [pc, #44]	@ (8002390 <__aeabi_dsub+0x708>)
 8002362:	e53a      	b.n	8001dda <__aeabi_dsub+0x152>
 8002364:	2d00      	cmp	r5, #0
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x6e2>
 8002368:	e5f6      	b.n	8001f58 <__aeabi_dsub+0x2d0>
 800236a:	464b      	mov	r3, r9
 800236c:	1bda      	subs	r2, r3, r7
 800236e:	4692      	mov	sl, r2
 8002370:	2f00      	cmp	r7, #0
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x6ee>
 8002374:	e66f      	b.n	8002056 <__aeabi_dsub+0x3ce>
 8002376:	2a38      	cmp	r2, #56	@ 0x38
 8002378:	dc05      	bgt.n	8002386 <__aeabi_dsub+0x6fe>
 800237a:	2680      	movs	r6, #128	@ 0x80
 800237c:	0436      	lsls	r6, r6, #16
 800237e:	4334      	orrs	r4, r6
 8002380:	4688      	mov	r8, r1
 8002382:	000e      	movs	r6, r1
 8002384:	e6d1      	b.n	800212a <__aeabi_dsub+0x4a2>
 8002386:	4688      	mov	r8, r1
 8002388:	000e      	movs	r6, r1
 800238a:	2501      	movs	r5, #1
 800238c:	e6de      	b.n	800214c <__aeabi_dsub+0x4c4>
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	000007ff 	.word	0x000007ff
 8002394:	ff7fffff 	.word	0xff7fffff
 8002398:	000007fe 	.word	0x000007fe
 800239c:	2d00      	cmp	r5, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x71a>
 80023a0:	e668      	b.n	8002074 <__aeabi_dsub+0x3ec>
 80023a2:	464b      	mov	r3, r9
 80023a4:	1bd9      	subs	r1, r3, r7
 80023a6:	2f00      	cmp	r7, #0
 80023a8:	d101      	bne.n	80023ae <__aeabi_dsub+0x726>
 80023aa:	468a      	mov	sl, r1
 80023ac:	e5a7      	b.n	8001efe <__aeabi_dsub+0x276>
 80023ae:	2701      	movs	r7, #1
 80023b0:	2938      	cmp	r1, #56	@ 0x38
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x72e>
 80023b4:	e5c7      	b.n	8001f46 <__aeabi_dsub+0x2be>
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	0412      	lsls	r2, r2, #16
 80023ba:	4314      	orrs	r4, r2
 80023bc:	e5af      	b.n	8001f1e <__aeabi_dsub+0x296>
 80023be:	46c0      	nop			@ (mov r8, r8)

080023c0 <__aeabi_dcmpun>:
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	46c6      	mov	lr, r8
 80023c4:	031e      	lsls	r6, r3, #12
 80023c6:	0b36      	lsrs	r6, r6, #12
 80023c8:	46b0      	mov	r8, r6
 80023ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002400 <__aeabi_dcmpun+0x40>)
 80023cc:	030c      	lsls	r4, r1, #12
 80023ce:	004d      	lsls	r5, r1, #1
 80023d0:	005f      	lsls	r7, r3, #1
 80023d2:	b500      	push	{lr}
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	0d6d      	lsrs	r5, r5, #21
 80023d8:	0d7f      	lsrs	r7, r7, #21
 80023da:	42b5      	cmp	r5, r6
 80023dc:	d00b      	beq.n	80023f6 <__aeabi_dcmpun+0x36>
 80023de:	4908      	ldr	r1, [pc, #32]	@ (8002400 <__aeabi_dcmpun+0x40>)
 80023e0:	2000      	movs	r0, #0
 80023e2:	428f      	cmp	r7, r1
 80023e4:	d104      	bne.n	80023f0 <__aeabi_dcmpun+0x30>
 80023e6:	4646      	mov	r6, r8
 80023e8:	4316      	orrs	r6, r2
 80023ea:	0030      	movs	r0, r6
 80023ec:	1e43      	subs	r3, r0, #1
 80023ee:	4198      	sbcs	r0, r3
 80023f0:	bc80      	pop	{r7}
 80023f2:	46b8      	mov	r8, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f6:	4304      	orrs	r4, r0
 80023f8:	2001      	movs	r0, #1
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	d1f8      	bne.n	80023f0 <__aeabi_dcmpun+0x30>
 80023fe:	e7ee      	b.n	80023de <__aeabi_dcmpun+0x1e>
 8002400:	000007ff 	.word	0x000007ff

08002404 <__aeabi_d2iz>:
 8002404:	000b      	movs	r3, r1
 8002406:	0002      	movs	r2, r0
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	4d16      	ldr	r5, [pc, #88]	@ (8002464 <__aeabi_d2iz+0x60>)
 800240c:	030c      	lsls	r4, r1, #12
 800240e:	b082      	sub	sp, #8
 8002410:	0049      	lsls	r1, r1, #1
 8002412:	2000      	movs	r0, #0
 8002414:	9200      	str	r2, [sp, #0]
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	0b24      	lsrs	r4, r4, #12
 800241a:	0d49      	lsrs	r1, r1, #21
 800241c:	0fde      	lsrs	r6, r3, #31
 800241e:	42a9      	cmp	r1, r5
 8002420:	dd04      	ble.n	800242c <__aeabi_d2iz+0x28>
 8002422:	4811      	ldr	r0, [pc, #68]	@ (8002468 <__aeabi_d2iz+0x64>)
 8002424:	4281      	cmp	r1, r0
 8002426:	dd03      	ble.n	8002430 <__aeabi_d2iz+0x2c>
 8002428:	4b10      	ldr	r3, [pc, #64]	@ (800246c <__aeabi_d2iz+0x68>)
 800242a:	18f0      	adds	r0, r6, r3
 800242c:	b002      	add	sp, #8
 800242e:	bd70      	pop	{r4, r5, r6, pc}
 8002430:	2080      	movs	r0, #128	@ 0x80
 8002432:	0340      	lsls	r0, r0, #13
 8002434:	4320      	orrs	r0, r4
 8002436:	4c0e      	ldr	r4, [pc, #56]	@ (8002470 <__aeabi_d2iz+0x6c>)
 8002438:	1a64      	subs	r4, r4, r1
 800243a:	2c1f      	cmp	r4, #31
 800243c:	dd08      	ble.n	8002450 <__aeabi_d2iz+0x4c>
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <__aeabi_d2iz+0x70>)
 8002440:	1a5b      	subs	r3, r3, r1
 8002442:	40d8      	lsrs	r0, r3
 8002444:	0003      	movs	r3, r0
 8002446:	4258      	negs	r0, r3
 8002448:	2e00      	cmp	r6, #0
 800244a:	d1ef      	bne.n	800242c <__aeabi_d2iz+0x28>
 800244c:	0018      	movs	r0, r3
 800244e:	e7ed      	b.n	800242c <__aeabi_d2iz+0x28>
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <__aeabi_d2iz+0x74>)
 8002452:	9a00      	ldr	r2, [sp, #0]
 8002454:	469c      	mov	ip, r3
 8002456:	0003      	movs	r3, r0
 8002458:	4461      	add	r1, ip
 800245a:	408b      	lsls	r3, r1
 800245c:	40e2      	lsrs	r2, r4
 800245e:	4313      	orrs	r3, r2
 8002460:	e7f1      	b.n	8002446 <__aeabi_d2iz+0x42>
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	000003fe 	.word	0x000003fe
 8002468:	0000041d 	.word	0x0000041d
 800246c:	7fffffff 	.word	0x7fffffff
 8002470:	00000433 	.word	0x00000433
 8002474:	00000413 	.word	0x00000413
 8002478:	fffffbed 	.word	0xfffffbed

0800247c <__aeabi_i2d>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2800      	cmp	r0, #0
 8002480:	d016      	beq.n	80024b0 <__aeabi_i2d+0x34>
 8002482:	17c3      	asrs	r3, r0, #31
 8002484:	18c5      	adds	r5, r0, r3
 8002486:	405d      	eors	r5, r3
 8002488:	0fc4      	lsrs	r4, r0, #31
 800248a:	0028      	movs	r0, r5
 800248c:	f000 f890 	bl	80025b0 <__clzsi2>
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <__aeabi_i2d+0x58>)
 8002492:	1a1b      	subs	r3, r3, r0
 8002494:	055b      	lsls	r3, r3, #21
 8002496:	0d5b      	lsrs	r3, r3, #21
 8002498:	280a      	cmp	r0, #10
 800249a:	dc14      	bgt.n	80024c6 <__aeabi_i2d+0x4a>
 800249c:	0002      	movs	r2, r0
 800249e:	002e      	movs	r6, r5
 80024a0:	3215      	adds	r2, #21
 80024a2:	4096      	lsls	r6, r2
 80024a4:	220b      	movs	r2, #11
 80024a6:	1a12      	subs	r2, r2, r0
 80024a8:	40d5      	lsrs	r5, r2
 80024aa:	032d      	lsls	r5, r5, #12
 80024ac:	0b2d      	lsrs	r5, r5, #12
 80024ae:	e003      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024b0:	2400      	movs	r4, #0
 80024b2:	2300      	movs	r3, #0
 80024b4:	2500      	movs	r5, #0
 80024b6:	2600      	movs	r6, #0
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	432b      	orrs	r3, r5
 80024bc:	07e4      	lsls	r4, r4, #31
 80024be:	4323      	orrs	r3, r4
 80024c0:	0030      	movs	r0, r6
 80024c2:	0019      	movs	r1, r3
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	380b      	subs	r0, #11
 80024c8:	4085      	lsls	r5, r0
 80024ca:	032d      	lsls	r5, r5, #12
 80024cc:	2600      	movs	r6, #0
 80024ce:	0b2d      	lsrs	r5, r5, #12
 80024d0:	e7f2      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	0000041e 	.word	0x0000041e

080024d8 <__aeabi_ui2d>:
 80024d8:	b510      	push	{r4, lr}
 80024da:	1e04      	subs	r4, r0, #0
 80024dc:	d010      	beq.n	8002500 <__aeabi_ui2d+0x28>
 80024de:	f000 f867 	bl	80025b0 <__clzsi2>
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <__aeabi_ui2d+0x44>)
 80024e4:	1a1b      	subs	r3, r3, r0
 80024e6:	055b      	lsls	r3, r3, #21
 80024e8:	0d5b      	lsrs	r3, r3, #21
 80024ea:	280a      	cmp	r0, #10
 80024ec:	dc0f      	bgt.n	800250e <__aeabi_ui2d+0x36>
 80024ee:	220b      	movs	r2, #11
 80024f0:	0021      	movs	r1, r4
 80024f2:	1a12      	subs	r2, r2, r0
 80024f4:	40d1      	lsrs	r1, r2
 80024f6:	3015      	adds	r0, #21
 80024f8:	030a      	lsls	r2, r1, #12
 80024fa:	4084      	lsls	r4, r0
 80024fc:	0b12      	lsrs	r2, r2, #12
 80024fe:	e001      	b.n	8002504 <__aeabi_ui2d+0x2c>
 8002500:	2300      	movs	r3, #0
 8002502:	2200      	movs	r2, #0
 8002504:	051b      	lsls	r3, r3, #20
 8002506:	4313      	orrs	r3, r2
 8002508:	0020      	movs	r0, r4
 800250a:	0019      	movs	r1, r3
 800250c:	bd10      	pop	{r4, pc}
 800250e:	0022      	movs	r2, r4
 8002510:	380b      	subs	r0, #11
 8002512:	4082      	lsls	r2, r0
 8002514:	0312      	lsls	r2, r2, #12
 8002516:	2400      	movs	r4, #0
 8002518:	0b12      	lsrs	r2, r2, #12
 800251a:	e7f3      	b.n	8002504 <__aeabi_ui2d+0x2c>
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_f2d>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	0242      	lsls	r2, r0, #9
 8002524:	0043      	lsls	r3, r0, #1
 8002526:	0fc4      	lsrs	r4, r0, #31
 8002528:	20fe      	movs	r0, #254	@ 0xfe
 800252a:	0e1b      	lsrs	r3, r3, #24
 800252c:	1c59      	adds	r1, r3, #1
 800252e:	0a55      	lsrs	r5, r2, #9
 8002530:	4208      	tst	r0, r1
 8002532:	d00c      	beq.n	800254e <__aeabi_f2d+0x2e>
 8002534:	21e0      	movs	r1, #224	@ 0xe0
 8002536:	0089      	lsls	r1, r1, #2
 8002538:	468c      	mov	ip, r1
 800253a:	076d      	lsls	r5, r5, #29
 800253c:	0b12      	lsrs	r2, r2, #12
 800253e:	4463      	add	r3, ip
 8002540:	051b      	lsls	r3, r3, #20
 8002542:	4313      	orrs	r3, r2
 8002544:	07e4      	lsls	r4, r4, #31
 8002546:	4323      	orrs	r3, r4
 8002548:	0028      	movs	r0, r5
 800254a:	0019      	movs	r1, r3
 800254c:	bd70      	pop	{r4, r5, r6, pc}
 800254e:	2b00      	cmp	r3, #0
 8002550:	d114      	bne.n	800257c <__aeabi_f2d+0x5c>
 8002552:	2d00      	cmp	r5, #0
 8002554:	d01b      	beq.n	800258e <__aeabi_f2d+0x6e>
 8002556:	0028      	movs	r0, r5
 8002558:	f000 f82a 	bl	80025b0 <__clzsi2>
 800255c:	280a      	cmp	r0, #10
 800255e:	dc1c      	bgt.n	800259a <__aeabi_f2d+0x7a>
 8002560:	230b      	movs	r3, #11
 8002562:	002a      	movs	r2, r5
 8002564:	1a1b      	subs	r3, r3, r0
 8002566:	40da      	lsrs	r2, r3
 8002568:	0003      	movs	r3, r0
 800256a:	3315      	adds	r3, #21
 800256c:	409d      	lsls	r5, r3
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <__aeabi_f2d+0x88>)
 8002570:	0312      	lsls	r2, r2, #12
 8002572:	1a1b      	subs	r3, r3, r0
 8002574:	055b      	lsls	r3, r3, #21
 8002576:	0b12      	lsrs	r2, r2, #12
 8002578:	0d5b      	lsrs	r3, r3, #21
 800257a:	e7e1      	b.n	8002540 <__aeabi_f2d+0x20>
 800257c:	2d00      	cmp	r5, #0
 800257e:	d009      	beq.n	8002594 <__aeabi_f2d+0x74>
 8002580:	0b13      	lsrs	r3, r2, #12
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	0312      	lsls	r2, r2, #12
 8002586:	431a      	orrs	r2, r3
 8002588:	076d      	lsls	r5, r5, #29
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <__aeabi_f2d+0x8c>)
 800258c:	e7d8      	b.n	8002540 <__aeabi_f2d+0x20>
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	e7d5      	b.n	8002540 <__aeabi_f2d+0x20>
 8002594:	2200      	movs	r2, #0
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <__aeabi_f2d+0x8c>)
 8002598:	e7d2      	b.n	8002540 <__aeabi_f2d+0x20>
 800259a:	0003      	movs	r3, r0
 800259c:	002a      	movs	r2, r5
 800259e:	3b0b      	subs	r3, #11
 80025a0:	409a      	lsls	r2, r3
 80025a2:	2500      	movs	r5, #0
 80025a4:	e7e3      	b.n	800256e <__aeabi_f2d+0x4e>
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	00000389 	.word	0x00000389
 80025ac:	000007ff 	.word	0x000007ff

080025b0 <__clzsi2>:
 80025b0:	211c      	movs	r1, #28
 80025b2:	2301      	movs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d301      	bcc.n	80025be <__clzsi2+0xe>
 80025ba:	0c00      	lsrs	r0, r0, #16
 80025bc:	3910      	subs	r1, #16
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	4298      	cmp	r0, r3
 80025c2:	d301      	bcc.n	80025c8 <__clzsi2+0x18>
 80025c4:	0a00      	lsrs	r0, r0, #8
 80025c6:	3908      	subs	r1, #8
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	4298      	cmp	r0, r3
 80025cc:	d301      	bcc.n	80025d2 <__clzsi2+0x22>
 80025ce:	0900      	lsrs	r0, r0, #4
 80025d0:	3904      	subs	r1, #4
 80025d2:	a202      	add	r2, pc, #8	@ (adr r2, 80025dc <__clzsi2+0x2c>)
 80025d4:	5c10      	ldrb	r0, [r2, r0]
 80025d6:	1840      	adds	r0, r0, r1
 80025d8:	4770      	bx	lr
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	02020304 	.word	0x02020304
 80025e0:	01010101 	.word	0x01010101
	...

080025ec <main_app>:

/**
 * Main app in which all the routines run
 */
void main_app(void)
{
 80025ec:	b510      	push	{r4, lr}


     sio_init();
 80025ee:	f000 f93f 	bl	8002870 <sio_init>
	while(1)
	{



	sio_task();
 80025f2:	f000 f947 	bl	8002884 <sio_task>
	while(1)
 80025f6:	e7fc      	b.n	80025f2 <main_app+0x6>

080025f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f8:	b500      	push	{lr}
 80025fa:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fc:	2218      	movs	r2, #24
 80025fe:	2100      	movs	r1, #0
 8002600:	a806      	add	r0, sp, #24
 8002602:	f002 ffa7 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002606:	2214      	movs	r2, #20
 8002608:	2100      	movs	r1, #0
 800260a:	4668      	mov	r0, sp
 800260c:	f002 ffa2 	bl	8005554 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002610:	2302      	movs	r3, #2
 8002612:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002614:	33fe      	adds	r3, #254	@ 0xfe
 8002616:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002618:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800261a:	3bc0      	subs	r3, #192	@ 0xc0
 800261c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261e:	f000 fd85 	bl	800312c <HAL_RCC_OscConfig>
 8002622:	2800      	cmp	r0, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002626:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002628:	e7fe      	b.n	8002628 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800262c:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800262e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002630:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002632:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002634:	2101      	movs	r1, #1
 8002636:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002638:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800263a:	f000 fed3 	bl	80033e4 <HAL_RCC_ClockConfig>
 800263e:	2800      	cmp	r0, #0
 8002640:	d001      	beq.n	8002646 <SystemClock_Config+0x4e>
 8002642:	b672      	cpsid	i
  while (1)
 8002644:	e7fe      	b.n	8002644 <SystemClock_Config+0x4c>
}
 8002646:	b00d      	add	sp, #52	@ 0x34
 8002648:	bd00      	pop	{pc}
	...

0800264c <main>:
{
 800264c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264e:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 8002650:	f000 fb38 	bl	8002cc4 <HAL_Init>
  SystemClock_Config();
 8002654:	f7ff ffd0 	bl	80025f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	2214      	movs	r2, #20
 800265a:	2100      	movs	r1, #0
 800265c:	a805      	add	r0, sp, #20
 800265e:	f002 ff79 	bl	8005554 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <main+0x180>)
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 800266a:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	430a      	orrs	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	@ 0x34
 8002674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002678:	400a      	ands	r2, r1
 800267a:	9200      	str	r2, [sp, #0]
 800267c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800267e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002680:	311c      	adds	r1, #28
 8002682:	430a      	orrs	r2, r1
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34
 8002686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 8002688:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800268a:	400a      	ands	r2, r1
 800268c:	9201      	str	r2, [sp, #4]
 800268e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	3918      	subs	r1, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	432a      	orrs	r2, r5
 8002696:	635a      	str	r2, [r3, #52]	@ 0x34
 8002698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269a:	402a      	ands	r2, r5
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a2:	4332      	orrs	r2, r6
 80026a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80026a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a8:	4032      	ands	r2, r6
 80026aa:	9203      	str	r2, [sp, #12]
 80026ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026b0:	430a      	orrs	r2, r1
 80026b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 80026b6:	002a      	movs	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b8:	400b      	ands	r3, r1
 80026ba:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 80026bc:	3108      	adds	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026be:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, GPIO_PIN_SET);
 80026c0:	f000 fd2e 	bl	8003120 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80026c4:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <main+0x184>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c6:	4843      	ldr	r0, [pc, #268]	@ (80027d4 <main+0x188>)
 80026c8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80026ca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026cc:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d0:	f000 fbee 	bl	8002eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026d4:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d6:	4840      	ldr	r0, [pc, #256]	@ (80027d8 <main+0x18c>)
 80026d8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026dc:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026e0:	f000 fbe6 	bl	8002eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80026e6:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <main+0x190>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	a905      	add	r1, sp, #20
 80026ea:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80026ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f000 fbdd 	bl	8002eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(ADS_CS_GPIO_Port, &GPIO_InitStruct);
 80026f6:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = ADS_CS_Pin;
 80026f8:	2310      	movs	r3, #16
  HAL_GPIO_Init(ADS_CS_GPIO_Port, &GPIO_InitStruct);
 80026fa:	a905      	add	r1, sp, #20
 80026fc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ADS_CS_Pin;
 80026fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002702:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002704:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(ADS_CS_GPIO_Port, &GPIO_InitStruct);
 8002706:	f000 fbd3 	bl	8002eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800270a:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <main+0x194>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270c:	4835      	ldr	r0, [pc, #212]	@ (80027e4 <main+0x198>)
 800270e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002710:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002712:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002716:	f000 fbcb 	bl	8002eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800271a:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271c:	4832      	ldr	r0, [pc, #200]	@ (80027e8 <main+0x19c>)
 800271e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002720:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002722:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002726:	f000 fbc3 	bl	8002eb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADS_BUSY1_Pin;
 800272a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ADS_BUSY1_GPIO_Port, &GPIO_InitStruct);
 800272c:	482d      	ldr	r0, [pc, #180]	@ (80027e4 <main+0x198>)
 800272e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = ADS_BUSY1_Pin;
 8002730:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002732:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002734:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(ADS_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8002736:	f000 fbbb 	bl	8002eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = SCKI_Pin|DINI_Pin;
 800273c:	379d      	adds	r7, #157	@ 0x9d
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	a905      	add	r1, sp, #20
 8002740:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = SCKI_Pin|DINI_Pin;
 8002744:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f000 fbb1 	bl	8002eb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DOUTI_GPIO_Port, &GPIO_InitStruct);
 800274e:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = DOUTI_Pin;
 8002750:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(DOUTI_GPIO_Port, &GPIO_InitStruct);
 8002752:	a905      	add	r1, sp, #20
 8002754:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DOUTI_Pin;
 8002756:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800275a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(DOUTI_GPIO_Port, &GPIO_InitStruct);
 800275c:	f000 fba8 	bl	8002eb0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, SCKI_Pin|DINI_Pin, GPIO_PIN_RESET);
 8002760:	20a0      	movs	r0, #160	@ 0xa0
 8002762:	0039      	movs	r1, r7
 8002764:	0022      	movs	r2, r4
 8002766:	05c0      	lsls	r0, r0, #23
 8002768:	f000 fcda 	bl	8003120 <HAL_GPIO_WritePin>
  huart1.Instance = USART1;
 800276c:	4d1f      	ldr	r5, [pc, #124]	@ (80027ec <main+0x1a0>)
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <main+0x1a4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002770:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 8002772:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 9600;
 8002774:	2396      	movs	r3, #150	@ 0x96
 8002776:	019b      	lsls	r3, r3, #6
 8002778:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277c:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800277e:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002780:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002782:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002784:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002786:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002788:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800278a:	626c      	str	r4, [r5, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	62ac      	str	r4, [r5, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278e:	f001 ff0b 	bl	80045a8 <HAL_UART_Init>
 8002792:	0001      	movs	r1, r0
 8002794:	42a0      	cmp	r0, r4
 8002796:	d001      	beq.n	800279c <main+0x150>
 8002798:	b672      	cpsid	i
  while (1)
 800279a:	e7fe      	b.n	800279a <main+0x14e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279c:	0028      	movs	r0, r5
 800279e:	f002 f845 	bl	800482c <HAL_UARTEx_SetTxFifoThreshold>
 80027a2:	1e01      	subs	r1, r0, #0
 80027a4:	d001      	beq.n	80027aa <main+0x15e>
 80027a6:	b672      	cpsid	i
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <main+0x15c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027aa:	0028      	movs	r0, r5
 80027ac:	f002 f85e 	bl	800486c <HAL_UARTEx_SetRxFifoThreshold>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d001      	beq.n	80027b8 <main+0x16c>
 80027b4:	b672      	cpsid	i
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <main+0x16a>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027b8:	0028      	movs	r0, r5
 80027ba:	f002 f819 	bl	80047f0 <HAL_UARTEx_DisableFifoMode>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d001      	beq.n	80027c6 <main+0x17a>
 80027c2:	b672      	cpsid	i
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <main+0x178>
  main_app();
 80027c6:	f7ff ff11 	bl	80025ec <main_app>
  while (1)
 80027ca:	e7fe      	b.n	80027ca <main+0x17e>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	0000e0c0 	.word	0x0000e0c0
 80027d4:	50000800 	.word	0x50000800
 80027d8:	50001400 	.word	0x50001400
 80027dc:	00009f0c 	.word	0x00009f0c
 80027e0:	0000ff7f 	.word	0x0000ff7f
 80027e4:	50000400 	.word	0x50000400
 80027e8:	50000c00 	.word	0x50000c00
 80027ec:	200001f0 	.word	0x200001f0
 80027f0:	40013800 	.word	0x40013800

080027f4 <Error_Handler>:
 80027f4:	b672      	cpsid	i
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <Error_Handler+0x2>

080027f8 <sio_uart_rxRec>:
//LOCAL void sio_TxIntS0 (UART_HandleTypeDef *huart);
LOCAL void sio_RxBlockStart();
LOCAL void sio_TxBlockStart(char *buf);

LOCAL uint16_t sio_uart_rxRec(UART_HandleTypeDef *huart) {
	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 80027f8:	0002      	movs	r2, r0
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80027fa:	0001      	movs	r1, r0
LOCAL uint16_t sio_uart_rxRec(UART_HandleTypeDef *huart) {
 80027fc:	0003      	movs	r3, r0
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80027fe:	318c      	adds	r1, #140	@ 0x8c
	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8002800:	3290      	adds	r2, #144	@ 0x90
 8002802:	6812      	ldr	r2, [r2, #0]
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8002804:	6808      	ldr	r0, [r1, #0]
		 else
		 {
		 // *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
		 *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
		 }*/
		uhData = ((uint16_t) READ_REG(huart->Instance->RDR)) & huart->Mask;
 8002806:	6819      	ldr	r1, [r3, #0]
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8002808:	2822      	cmp	r0, #34	@ 0x22
 800280a:	d10c      	bne.n	8002826 <sio_uart_rxRec+0x2e>
		uhData = ((uint16_t) READ_REG(huart->Instance->RDR)) & huart->Mask;
 800280c:	3360      	adds	r3, #96	@ 0x60
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8002812:	4018      	ands	r0, r3

		if (uhErr != HAL_UART_ERROR_NONE)
 8002814:	b293      	uxth	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <sio_uart_rxRec+0x2c>
			uhData |= (uhErr << 8);
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <sio_uart_rxRec+0x3c>)
 800281c:	0212      	lsls	r2, r2, #8
 800281e:	401a      	ands	r2, r3
 8002820:	4310      	orrs	r0, r2
 8002822:	b280      	uxth	r0, r0
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

		return (0);	// HAL_BUSY
	}
}
 8002824:	4770      	bx	lr
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002826:	2308      	movs	r3, #8
 8002828:	698a      	ldr	r2, [r1, #24]
 800282a:	2000      	movs	r0, #0
 800282c:	4313      	orrs	r3, r2
 800282e:	618b      	str	r3, [r1, #24]
		return (0);	// HAL_BUSY
 8002830:	e7f8      	b.n	8002824 <sio_uart_rxRec+0x2c>
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	00ffff00 	.word	0x00ffff00

08002838 <sio_RxIntS0>:
/***Interrupt Routines****/

/*
 * Interrupt handling for Received Data
 */
LOCAL void sio_RxIntS0(UART_HandleTypeDef *huart) {
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	0004      	movs	r4, r0

	//  HAL_UART_Receive_IT(&Analog_I_Uart,   uart_control_block.rx, 1); //we enable it again to reive another interrupt
	uart_control_block.Echar_rx = (uint8_t) sio_uart_rxRec(huart);
 800283c:	f7ff ffdc 	bl	80027f8 <sio_uart_rxRec>
 8002840:	4d09      	ldr	r5, [pc, #36]	@ (8002868 <sio_RxIntS0+0x30>)
 8002842:	b2c0      	uxtb	r0, r0
 8002844:	7368      	strb	r0, [r5, #13]
	*uart_control_block.rx++ = (uint8_t) sio_uart_rxRec(huart);
 8002846:	0020      	movs	r0, r4
 8002848:	f7ff ffd6 	bl	80027f8 <sio_uart_rxRec>
 800284c:	682b      	ldr	r3, [r5, #0]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	7018      	strb	r0, [r3, #0]

	if (uart_control_block.Echar == uart_control_block.Echar_rx) //we received end char so string is finish
 8002854:	7b2a      	ldrb	r2, [r5, #12]
 8002856:	7b6b      	ldrb	r3, [r5, #13]
 8002858:	429a      	cmp	r2, r3
 800285a:	d104      	bne.n	8002866 <sio_RxIntS0+0x2e>
			{
		huart->RxISR = NULL;
 800285c:	2300      	movs	r3, #0
		util_setUartEvent();
 800285e:	2201      	movs	r2, #1
		huart->RxISR = NULL;
 8002860:	6763      	str	r3, [r4, #116]	@ 0x74
		util_setUartEvent();
 8002862:	4b02      	ldr	r3, [pc, #8]	@ (800286c <sio_RxIntS0+0x34>)
 8002864:	701a      	strb	r2, [r3, #0]
	}



}
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	20000284 	.word	0x20000284
 800286c:	20000438 	.word	0x20000438

08002870 <sio_init>:
GLOBAL void sio_init() {
 8002870:	b510      	push	{r4, lr}
	memset((void*) &uart_control_block, 0, sizeof(uart_control_block)); // reset control block
 8002872:	2210      	movs	r2, #16
 8002874:	2100      	movs	r1, #0
 8002876:	4802      	ldr	r0, [pc, #8]	@ (8002880 <sio_init+0x10>)
 8002878:	f002 fe6c 	bl	8005554 <memset>
}
 800287c:	bd10      	pop	{r4, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	20000284 	.word	0x20000284

08002884 <sio_task>:
GLOBAL void sio_task() {
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
	util_resUartEvent();
 8002886:	2500      	movs	r5, #0
GLOBAL void sio_task() {
 8002888:	b087      	sub	sp, #28
	sio_init();
 800288a:	f7ff fff1 	bl	8002870 <sio_init>
	memset(S0RxBuf, 0, sizeof(S0RxBuf));
 800288e:	4f4d      	ldr	r7, [pc, #308]	@ (80029c4 <sio_task+0x140>)
	util_resUartEvent();
 8002890:	4b4d      	ldr	r3, [pc, #308]	@ (80029c8 <sio_task+0x144>)
	memset(S0RxBuf, 0, sizeof(S0RxBuf));
 8002892:	2232      	movs	r2, #50	@ 0x32
 8002894:	0029      	movs	r1, r5
 8002896:	0038      	movs	r0, r7
	util_resUartEvent();
 8002898:	9304      	str	r3, [sp, #16]
 800289a:	701d      	strb	r5, [r3, #0]
	memset(S0RxBuf, 0, sizeof(S0RxBuf));
 800289c:	f002 fe5a 	bl	8005554 <memset>
	uart_control_block.Echar = _LF;
 80028a0:	230a      	movs	r3, #10
	uart_control_block.rx = S0RxBuf;
 80028a2:	4e4a      	ldr	r6, [pc, #296]	@ (80029cc <sio_task+0x148>)
	HAL_UART_Receive_IT(&Analog_I_Uart, uart_control_block.rx, 1);
 80028a4:	4c4a      	ldr	r4, [pc, #296]	@ (80029d0 <sio_task+0x14c>)
	uart_control_block.rx = S0RxBuf;
 80028a6:	6037      	str	r7, [r6, #0]
	uart_control_block.Echar = _LF;
 80028a8:	7333      	strb	r3, [r6, #12]
	HAL_UART_Receive_IT(&Analog_I_Uart, uart_control_block.rx, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	6831      	ldr	r1, [r6, #0]
 80028ae:	0020      	movs	r0, r4
 80028b0:	f001 ff44 	bl	800473c <HAL_UART_Receive_IT>
	Analog_I_Uart.RxISR = &sio_RxIntS0;
 80028b4:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <sio_task+0x150>)
	util_check_UartEvent(50000);   //we wait here until we receive something
 80028b6:	4848      	ldr	r0, [pc, #288]	@ (80029d8 <sio_task+0x154>)
	Analog_I_Uart.RxISR = &sio_RxIntS0;
 80028b8:	6763      	str	r3, [r4, #116]	@ 0x74
	util_check_UartEvent(50000);   //we wait here until we receive something
 80028ba:	f000 f997 	bl	8002bec <util_check_UartEvent>
	if(strstr("/?senddata",(const char *)S0RxBuf))
 80028be:	0039      	movs	r1, r7
 80028c0:	4846      	ldr	r0, [pc, #280]	@ (80029dc <sio_task+0x158>)
 80028c2:	f002 fe4f 	bl	8005564 <strstr>
 80028c6:	0007      	movs	r7, r0
 80028c8:	42a8      	cmp	r0, r5
 80028ca:	d049      	beq.n	8002960 <sio_task+0xdc>
 80028cc:	4f44      	ldr	r7, [pc, #272]	@ (80029e0 <sio_task+0x15c>)
				Err = ani_Mess(i, &ad_val[i]);
 80028ce:	0039      	movs	r1, r7
 80028d0:	0028      	movs	r0, r5
 80028d2:	f002 f87d 	bl	80049d0 <ani_Mess>
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <sio_task+0x160>)
 80028d8:	b2c0      	uxtb	r0, r0
 80028da:	7018      	strb	r0, [r3, #0]
					sprintf((char*) ad_buf[i], "%s", "ERR"); //error
 80028dc:	2319      	movs	r3, #25
 80028de:	436b      	muls	r3, r5
 80028e0:	4a41      	ldr	r2, [pc, #260]	@ (80029e8 <sio_task+0x164>)
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	9205      	str	r2, [sp, #20]
 80028e6:	9303      	str	r3, [sp, #12]
				if (Err) {
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d02f      	beq.n	800294c <sio_task+0xc8>
					sprintf((char*) ad_buf[i], "%s", "ERR"); //error
 80028ec:	0018      	movs	r0, r3
 80028ee:	493f      	ldr	r1, [pc, #252]	@ (80029ec <sio_task+0x168>)
 80028f0:	f002 fecd 	bl	800568e <strcpy>
		for (int i = 0; i < ANALOG_INP; i++) {
 80028f4:	3501      	adds	r5, #1
 80028f6:	3704      	adds	r7, #4
 80028f8:	2d04      	cmp	r5, #4
 80028fa:	d1e8      	bne.n	80028ce <sio_task+0x4a>
		sprintf(Tx_buffer, "\x01IN1:%s,IN2:%s,IN3:%s,IN4:%s!\x0A",
 80028fc:	4a3c      	ldr	r2, [pc, #240]	@ (80029f0 <sio_task+0x16c>)
 80028fe:	4d3d      	ldr	r5, [pc, #244]	@ (80029f4 <sio_task+0x170>)
 8002900:	9201      	str	r2, [sp, #4]
 8002902:	4a3d      	ldr	r2, [pc, #244]	@ (80029f8 <sio_task+0x174>)
 8002904:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <sio_task+0x178>)
 8002906:	493e      	ldr	r1, [pc, #248]	@ (8002a00 <sio_task+0x17c>)
 8002908:	9200      	str	r2, [sp, #0]
 800290a:	0028      	movs	r0, r5
 800290c:	9a05      	ldr	r2, [sp, #20]
 800290e:	f002 fdb5 	bl	800547c <siprintf>
	util_resUartEvent();
 8002912:	2100      	movs	r1, #0
	memset(S0TxBuf, 0, sizeof(S0TxBuf));
 8002914:	4f3b      	ldr	r7, [pc, #236]	@ (8002a04 <sio_task+0x180>)
	util_resUartEvent();
 8002916:	9b04      	ldr	r3, [sp, #16]
	memset(S0TxBuf, 0, sizeof(S0TxBuf));
 8002918:	2278      	movs	r2, #120	@ 0x78
 800291a:	0038      	movs	r0, r7
	util_resUartEvent();
 800291c:	7019      	strb	r1, [r3, #0]
	memset(S0TxBuf, 0, sizeof(S0TxBuf));
 800291e:	f002 fe19 	bl	8005554 <memset>
	sprintf((char*) S0TxBuf, "%s", buf);
 8002922:	0029      	movs	r1, r5
 8002924:	0038      	movs	r0, r7
 8002926:	f002 feb2 	bl	800568e <strcpy>
	uart_control_block.txSize = strlen((const char*) S0TxBuf);
 800292a:	0038      	movs	r0, r7
	uart_control_block.tx = S0TxBuf;
 800292c:	6077      	str	r7, [r6, #4]
	uart_control_block.txSize = strlen((const char*) S0TxBuf);
 800292e:	f7fd fbeb 	bl	8000108 <strlen>
 8002932:	60b0      	str	r0, [r6, #8]
	HAL_UART_Transmit_IT(&Analog_I_Uart, uart_control_block.tx,
 8002934:	6871      	ldr	r1, [r6, #4]
			uart_control_block.txSize);
 8002936:	68b2      	ldr	r2, [r6, #8]
	HAL_UART_Transmit_IT(&Analog_I_Uart, uart_control_block.tx,
 8002938:	0020      	movs	r0, r4
 800293a:	b292      	uxth	r2, r2
 800293c:	f000 ffba 	bl	80038b4 <HAL_UART_Transmit_IT>
		util_check_UartEvent(2000);
 8002940:	20fa      	movs	r0, #250	@ 0xfa
 8002942:	00c0      	lsls	r0, r0, #3
 8002944:	f000 f952 	bl	8002bec <util_check_UartEvent>
}
 8002948:	b007      	add	sp, #28
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					sprintf((char*) ad_buf[i], "%.5f", ad_val[i]);
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	f7ff fde7 	bl	8002520 <__aeabi_f2d>
 8002952:	0002      	movs	r2, r0
 8002954:	000b      	movs	r3, r1
 8002956:	9803      	ldr	r0, [sp, #12]
 8002958:	492b      	ldr	r1, [pc, #172]	@ (8002a08 <sio_task+0x184>)
 800295a:	f002 fd8f 	bl	800547c <siprintf>
 800295e:	e7c9      	b.n	80028f4 <sio_task+0x70>
		HAL_UART_DeInit(&huart1);
 8002960:	0020      	movs	r0, r4
 8002962:	f000 ff87 	bl	8003874 <HAL_UART_DeInit>
		huart1.Instance = USART1;
 8002966:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <sio_task+0x188>)
		if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002968:	0020      	movs	r0, r4
		huart1.Instance = USART1;
 800296a:	6023      	str	r3, [r4, #0]
		huart1.Init.BaudRate = 9600;
 800296c:	2396      	movs	r3, #150	@ 0x96
 800296e:	019b      	lsls	r3, r3, #6
 8002970:	6063      	str	r3, [r4, #4]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8002972:	230c      	movs	r3, #12
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002974:	60a7      	str	r7, [r4, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8002976:	60e7      	str	r7, [r4, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8002978:	6127      	str	r7, [r4, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 800297a:	6163      	str	r3, [r4, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297c:	61a7      	str	r7, [r4, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800297e:	61e7      	str	r7, [r4, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002980:	6227      	str	r7, [r4, #32]
		huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002982:	6267      	str	r7, [r4, #36]	@ 0x24
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002984:	62a7      	str	r7, [r4, #40]	@ 0x28
		if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002986:	f001 fe0f 	bl	80045a8 <HAL_UART_Init>
 800298a:	2800      	cmp	r0, #0
 800298c:	d001      	beq.n	8002992 <sio_task+0x10e>
			Error_Handler();
 800298e:	f7ff ff31 	bl	80027f4 <Error_Handler>
		if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8002992:	2100      	movs	r1, #0
 8002994:	0020      	movs	r0, r4
 8002996:	f001 ff49 	bl	800482c <HAL_UARTEx_SetTxFifoThreshold>
 800299a:	2800      	cmp	r0, #0
 800299c:	d001      	beq.n	80029a2 <sio_task+0x11e>
			Error_Handler();
 800299e:	f7ff ff29 	bl	80027f4 <Error_Handler>
		if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80029a2:	2100      	movs	r1, #0
 80029a4:	0020      	movs	r0, r4
 80029a6:	f001 ff61 	bl	800486c <HAL_UARTEx_SetRxFifoThreshold>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d001      	beq.n	80029b2 <sio_task+0x12e>
			Error_Handler();
 80029ae:	f7ff ff21 	bl	80027f4 <Error_Handler>
		if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80029b2:	0020      	movs	r0, r4
 80029b4:	f001 ff1c 	bl	80047f0 <HAL_UARTEx_DisableFifoMode>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d0c5      	beq.n	8002948 <sio_task+0xc4>
			Error_Handler();
 80029bc:	f7ff ff1a 	bl	80027f4 <Error_Handler>
}
 80029c0:	e7c2      	b.n	8002948 <sio_task+0xc4>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	20000384 	.word	0x20000384
 80029c8:	20000438 	.word	0x20000438
 80029cc:	20000284 	.word	0x20000284
 80029d0:	200001f0 	.word	0x200001f0
 80029d4:	08002839 	.word	0x08002839
 80029d8:	0000c350 	.word	0x0000c350
 80029dc:	080078d0 	.word	0x080078d0
 80029e0:	20000374 	.word	0x20000374
 80029e4:	20000294 	.word	0x20000294
 80029e8:	2000030d 	.word	0x2000030d
 80029ec:	080078db 	.word	0x080078db
 80029f0:	20000358 	.word	0x20000358
 80029f4:	20000295 	.word	0x20000295
 80029f8:	2000033f 	.word	0x2000033f
 80029fc:	20000326 	.word	0x20000326
 8002a00:	080078e4 	.word	0x080078e4
 8002a04:	200003b6 	.word	0x200003b6
 8002a08:	080078df 	.word	0x080078df
 8002a0c:	40013800 	.word	0x40013800

08002a10 <HAL_UART_TxCpltCallback>:

/*
 * Interrupt handling for sent Data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	util_setUartEvent();
 8002a10:	2201      	movs	r2, #1
 8002a12:	4b01      	ldr	r3, [pc, #4]	@ (8002a18 <HAL_UART_TxCpltCallback+0x8>)
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	4770      	bx	lr
 8002a18:	20000438 	.word	0x20000438

08002a1c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_MspInit+0x2c>)
{
 8002a20:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a24:	430a      	orrs	r2, r1
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a2a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	9200      	str	r2, [sp, #0]
 8002a30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a34:	0549      	lsls	r1, r1, #21
 8002a36:	430a      	orrs	r2, r1
 8002a38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	b002      	add	sp, #8
 8002a44:	4770      	bx	lr
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	0004      	movs	r4, r0
 8002a50:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a52:	2214      	movs	r2, #20
 8002a54:	2100      	movs	r1, #0
 8002a56:	a802      	add	r0, sp, #8
 8002a58:	f002 fd7c 	bl	8005554 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a5c:	221c      	movs	r2, #28
 8002a5e:	2100      	movs	r1, #0
 8002a60:	a807      	add	r0, sp, #28
 8002a62:	f002 fd77 	bl	8005554 <memset>
  if(huart->Instance==USART1)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_UART_MspInit+0x88>)
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d130      	bne.n	8002ad0 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a6e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a70:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a72:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	f000 fd7c 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8002a7c:	f7ff feba 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <HAL_UART_MspInit+0x8c>)
 8002a84:	01c9      	lsls	r1, r1, #7
 8002a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a92:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aac:	2303      	movs	r3, #3
 8002aae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f000 f9f8 	bl	8002eb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ac0:	201b      	movs	r0, #27
 8002ac2:	0022      	movs	r2, r4
 8002ac4:	0021      	movs	r1, r4
 8002ac6:	f000 f91b 	bl	8002d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aca:	201b      	movs	r0, #27
 8002acc:	f000 f942 	bl	8002d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ad0:	b00e      	add	sp, #56	@ 0x38
 8002ad2:	bd10      	pop	{r4, pc}
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_UART_MspDeInit+0x28>)
 8002ade:	6802      	ldr	r2, [r0, #0]
{
 8002ae0:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10c      	bne.n	8002b00 <HAL_UART_MspDeInit+0x24>

    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8002ae6:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ae8:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <HAL_UART_MspDeInit+0x2c>)
 8002aea:	4908      	ldr	r1, [pc, #32]	@ (8002b0c <HAL_UART_MspDeInit+0x30>)
 8002aec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8002aee:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_DISABLE();
 8002af0:	400b      	ands	r3, r1
 8002af2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8002af4:	2103      	movs	r1, #3
 8002af6:	f000 fa95 	bl	8003024 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002afa:	201b      	movs	r0, #27
 8002afc:	f000 f936 	bl	8002d6c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	ffffbfff 	.word	0xffffbfff

08002b10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler>

08002b12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler>

08002b14 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b14:	4770      	bx	lr

08002b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002b16:	4770      	bx	lr

08002b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f000 f8df 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b22:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <USART1_IRQHandler+0xc>)
 8002b24:	f000 ff30 	bl	8003988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	200001f0 	.word	0x200001f0

08002b30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002b30:	2001      	movs	r0, #1
 8002b32:	4770      	bx	lr

08002b34 <_kill>:

int _kill(int pid, int sig)
{
 8002b34:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b36:	f002 fd7d 	bl	8005634 <__errno>
 8002b3a:	2316      	movs	r3, #22
 8002b3c:	6003      	str	r3, [r0, #0]
  return -1;
 8002b3e:	2001      	movs	r0, #1
}
 8002b40:	4240      	negs	r0, r0
 8002b42:	bd10      	pop	{r4, pc}

08002b44 <_exit>:

void _exit (int status)
{
 8002b44:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002b46:	f002 fd75 	bl	8005634 <__errno>
 8002b4a:	2316      	movs	r3, #22
 8002b4c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002b4e:	e7fe      	b.n	8002b4e <_exit+0xa>

08002b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	000e      	movs	r6, r1
 8002b54:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	2500      	movs	r5, #0
 8002b58:	42a5      	cmp	r5, r4
 8002b5a:	db01      	blt.n	8002b60 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002b5c:	0020      	movs	r0, r4
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002b60:	e000      	b.n	8002b64 <_read+0x14>
 8002b62:	bf00      	nop
 8002b64:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b66:	3501      	adds	r5, #1
 8002b68:	e7f6      	b.n	8002b58 <_read+0x8>

08002b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6a:	b570      	push	{r4, r5, r6, lr}
 8002b6c:	000e      	movs	r6, r1
 8002b6e:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2500      	movs	r5, #0
 8002b72:	42a5      	cmp	r5, r4
 8002b74:	db01      	blt.n	8002b7a <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002b76:	0020      	movs	r0, r4
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002b7a:	5d70      	ldrb	r0, [r6, r5]
 8002b7c:	e000      	b.n	8002b80 <_write+0x16>
 8002b7e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b80:	3501      	adds	r5, #1
 8002b82:	e7f6      	b.n	8002b72 <_write+0x8>

08002b84 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002b84:	2001      	movs	r0, #1
}
 8002b86:	4240      	negs	r0, r0
 8002b88:	4770      	bx	lr

08002b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002b8e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002b90:	604b      	str	r3, [r1, #4]
}
 8002b92:	4770      	bx	lr

08002b94 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002b94:	2001      	movs	r0, #1
 8002b96:	4770      	bx	lr

08002b98 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002b98:	2000      	movs	r0, #0
 8002b9a:	4770      	bx	lr

08002b9c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b9c:	490b      	ldr	r1, [pc, #44]	@ (8002bcc <_sbrk+0x30>)
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd0 <_sbrk+0x34>)
{
 8002ba0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba2:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba4:	490b      	ldr	r1, [pc, #44]	@ (8002bd4 <_sbrk+0x38>)
{
 8002ba6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002ba8:	6808      	ldr	r0, [r1, #0]
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d101      	bne.n	8002bb2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002bae:	480a      	ldr	r0, [pc, #40]	@ (8002bd8 <_sbrk+0x3c>)
 8002bb0:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb2:	6808      	ldr	r0, [r1, #0]
 8002bb4:	18c3      	adds	r3, r0, r3
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d906      	bls.n	8002bc8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002bba:	f002 fd3b 	bl	8005634 <__errno>
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002bc6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002bc8:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8002bca:	e7fc      	b.n	8002bc6 <_sbrk+0x2a>
 8002bcc:	00000400 	.word	0x00000400
 8002bd0:	20003000 	.word	0x20003000
 8002bd4:	20000430 	.word	0x20000430
 8002bd8:	20000590 	.word	0x20000590

08002bdc <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	4b02      	ldr	r3, [pc, #8]	@ (8002be8 <SystemInit+0xc>)
 8002be0:	0512      	lsls	r2, r2, #20
 8002be2:	609a      	str	r2, [r3, #8]
#endif
}
 8002be4:	4770      	bx	lr
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <util_check_UartEvent>:
/*
 *Checks for uart event for set time
 *time is in ms
 */
GLOBAL void util_check_UartEvent(uint32_t time_ms)
{
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	1e04      	subs	r4, r0, #0
 8002bf0:	4e09      	ldr	r6, [pc, #36]	@ (8002c18 <util_check_UartEvent+0x2c>)

	switch(time_ms)
 8002bf2:	d103      	bne.n	8002bfc <util_check_UartEvent+0x10>
	{

	case 0:
	{
		 while(util_UartEvent_Nequal)  //just wait for event dont perform anything else
 8002bf4:	7833      	ldrb	r3, [r6, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d1fc      	bne.n	8002bf4 <util_check_UartEvent+0x8>
	 }


	}

}
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
		 prev_time = HAL_GetTick(); //we get new time before going into while
 8002bfc:	f000 f87a 	bl	8002cf4 <HAL_GetTick>
 8002c00:	4d06      	ldr	r5, [pc, #24]	@ (8002c1c <util_check_UartEvent+0x30>)
 8002c02:	6028      	str	r0, [r5, #0]
		 while(util_UartEvent_Nequal && (HAL_GetTick() - prev_time < time_ms)); //wait here until get event or time passes
 8002c04:	7833      	ldrb	r3, [r6, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d0f7      	beq.n	8002bfa <util_check_UartEvent+0xe>
 8002c0a:	f000 f873 	bl	8002cf4 <HAL_GetTick>
 8002c0e:	682b      	ldr	r3, [r5, #0]
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	42a0      	cmp	r0, r4
 8002c14:	d3f6      	bcc.n	8002c04 <util_check_UartEvent+0x18>
 8002c16:	e7f0      	b.n	8002bfa <util_check_UartEvent+0xe>
 8002c18:	20000438 	.word	0x20000438
 8002c1c:	20000434 	.word	0x20000434

08002c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c20:	480d      	ldr	r0, [pc, #52]	@ (8002c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c24:	f7ff ffda 	bl	8002bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c2a:	e003      	b.n	8002c34 <LoopCopyDataInit>

08002c2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002c2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c32:	3104      	adds	r1, #4

08002c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c34:	480a      	ldr	r0, [pc, #40]	@ (8002c60 <LoopForever+0xa>)
  ldr r3, =_edata
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <LoopForever+0xe>)
  adds r2, r0, r1
 8002c38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c3c:	d3f6      	bcc.n	8002c2c <CopyDataInit>
  ldr r2, =_sbss
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <LoopForever+0x12>)
  b LoopFillZerobss
 8002c40:	e002      	b.n	8002c48 <LoopFillZerobss>

08002c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  str  r3, [r2]
 8002c44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c46:	3204      	adds	r2, #4

08002c48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002c48:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <LoopForever+0x16>)
  cmp r2, r3
 8002c4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c4c:	d3f9      	bcc.n	8002c42 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002c4e:	f002 fcf7 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c52:	f7ff fcfb 	bl	800264c <main>

08002c56 <LoopForever>:

LoopForever:
    b LoopForever
 8002c56:	e7fe      	b.n	8002c56 <LoopForever>
  ldr   r0, =_estack
 8002c58:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002c5c:	08007d08 	.word	0x08007d08
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c64:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8002c68:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 8002c6c:	2000058c 	.word	0x2000058c

08002c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC1_IRQHandler>
	...

08002c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_InitTick+0x44>)
{
 8002c78:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0UL)
 8002c7a:	7819      	ldrb	r1, [r3, #0]
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c80:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002c84:	20fa      	movs	r0, #250	@ 0xfa
 8002c86:	0080      	lsls	r0, r0, #2
 8002c88:	f7fd fa5a 	bl	8000140 <__udivsi3>
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8002cbc <HAL_InitTick+0x48>)
 8002c8e:	0001      	movs	r1, r0
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	f7fd fa55 	bl	8000140 <__udivsi3>
 8002c96:	f000 f879 	bl	8002d8c <HAL_SYSTICK_Config>
 8002c9a:	1e04      	subs	r4, r0, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9e:	2d03      	cmp	r5, #3
 8002ca0:	d8ee      	bhi.n	8002c80 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	0029      	movs	r1, r5
 8002ca8:	4240      	negs	r0, r0
 8002caa:	f000 f829 	bl	8002d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cae:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <HAL_InitTick+0x4c>)
 8002cb0:	0020      	movs	r0, r4
 8002cb2:	601d      	str	r5, [r3, #0]
  return status;
 8002cb4:	e7e5      	b.n	8002c82 <HAL_InitTick+0xe>
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_Init>:
{
 8002cc4:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	f7ff ffd4 	bl	8002c74 <HAL_InitTick>
 8002ccc:	1e04      	subs	r4, r0, #0
 8002cce:	d103      	bne.n	8002cd8 <HAL_Init+0x14>
    HAL_MspInit();
 8002cd0:	f7ff fea4 	bl	8002a1c <HAL_MspInit>
}
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002cd8:	2401      	movs	r4, #1
 8002cda:	e7fb      	b.n	8002cd4 <HAL_Init+0x10>

08002cdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002cdc:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <HAL_IncTick+0x10>)
 8002cde:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <HAL_IncTick+0x14>)
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	185b      	adds	r3, r3, r1
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	4770      	bx	lr
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	2000043c 	.word	0x2000043c
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cf4:	4b01      	ldr	r3, [pc, #4]	@ (8002cfc <HAL_GetTick+0x8>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
}
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	2000043c 	.word	0x2000043c

08002d00 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d02:	24ff      	movs	r4, #255	@ 0xff
 8002d04:	2203      	movs	r2, #3
 8002d06:	000b      	movs	r3, r1
 8002d08:	0021      	movs	r1, r4
 8002d0a:	4002      	ands	r2, r0
 8002d0c:	00d2      	lsls	r2, r2, #3
 8002d0e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d14:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d16:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	db0a      	blt.n	8002d32 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d1c:	24c0      	movs	r4, #192	@ 0xc0
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d4c <HAL_NVIC_SetPriority+0x4c>)
 8002d20:	0880      	lsrs	r0, r0, #2
 8002d22:	0080      	lsls	r0, r0, #2
 8002d24:	1880      	adds	r0, r0, r2
 8002d26:	00a4      	lsls	r4, r4, #2
 8002d28:	5902      	ldr	r2, [r0, r4]
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002d30:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d32:	220f      	movs	r2, #15
 8002d34:	4010      	ands	r0, r2
 8002d36:	3808      	subs	r0, #8
 8002d38:	4a05      	ldr	r2, [pc, #20]	@ (8002d50 <HAL_NVIC_SetPriority+0x50>)
 8002d3a:	0880      	lsrs	r0, r0, #2
 8002d3c:	0080      	lsls	r0, r0, #2
 8002d3e:	1880      	adds	r0, r0, r2
 8002d40:	69c2      	ldr	r2, [r0, #28]
 8002d42:	4011      	ands	r1, r2
 8002d44:	4319      	orrs	r1, r3
 8002d46:	61c1      	str	r1, [r0, #28]
 8002d48:	e7f2      	b.n	8002d30 <HAL_NVIC_SetPriority+0x30>
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d54:	2800      	cmp	r0, #0
 8002d56:	db05      	blt.n	8002d64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d58:	231f      	movs	r3, #31
 8002d5a:	4018      	ands	r0, r3
 8002d5c:	3b1e      	subs	r3, #30
 8002d5e:	4083      	lsls	r3, r0
 8002d60:	4a01      	ldr	r2, [pc, #4]	@ (8002d68 <HAL_NVIC_EnableIRQ+0x14>)
 8002d62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d64:	4770      	bx	lr
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	db09      	blt.n	8002d84 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d70:	231f      	movs	r3, #31
 8002d72:	4018      	ands	r0, r3
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	4083      	lsls	r3, r0
 8002d78:	4a03      	ldr	r2, [pc, #12]	@ (8002d88 <HAL_NVIC_DisableIRQ+0x1c>)
 8002d7a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 8002d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d80:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002d84:	4770      	bx	lr
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	e000e104 	.word	0xe000e104

08002d8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	2280      	movs	r2, #128	@ 0x80
 8002d8e:	1e43      	subs	r3, r0, #1
 8002d90:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d20d      	bcs.n	8002db4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d98:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d9c:	4807      	ldr	r0, [pc, #28]	@ (8002dbc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da0:	6a03      	ldr	r3, [r0, #32]
 8002da2:	0609      	lsls	r1, r1, #24
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002db4:	4770      	bx	lr
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	e000e010 	.word	0xe000e010
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dc6:	1d84      	adds	r4, r0, #6
 8002dc8:	7fe3      	ldrb	r3, [r4, #31]
 8002dca:	1d41      	adds	r1, r0, #5
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d005      	beq.n	8002ddc <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	63c3      	str	r3, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77cb      	strb	r3, [r1, #31]
    return HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ddc:	250e      	movs	r5, #14
 8002dde:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de0:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	43ab      	bics	r3, r5
 8002de6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de8:	6833      	ldr	r3, [r6, #0]
 8002dea:	4d10      	ldr	r5, [pc, #64]	@ (8002e2c <HAL_DMA_Abort+0x6c>)
 8002dec:	402b      	ands	r3, r5
 8002dee:	6033      	str	r3, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8002df0:	2301      	movs	r3, #1
 8002df2:	6816      	ldr	r6, [r2, #0]
 8002df4:	439e      	bics	r6, r3
 8002df6:	6016      	str	r6, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002df8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002dfa:	331b      	adds	r3, #27
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	3b1b      	subs	r3, #27
 8002e00:	4093      	lsls	r3, r2
 8002e02:	4e0b      	ldr	r6, [pc, #44]	@ (8002e30 <HAL_DMA_Abort+0x70>)
 8002e04:	6877      	ldr	r7, [r6, #4]
 8002e06:	433b      	orrs	r3, r7
 8002e08:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002e0c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002e0e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e10:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	402a      	ands	r2, r5
 8002e1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e1c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e1e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002e20:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002e24:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002e26:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002e28:	77c8      	strb	r0, [r1, #31]
  return HAL_OK;
 8002e2a:	e7d6      	b.n	8002dda <HAL_DMA_Abort+0x1a>
 8002e2c:	fffffeff 	.word	0xfffffeff
 8002e30:	40020000 	.word	0x40020000

08002e34 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
  __HAL_LOCK(hdma);
 8002e36:	2301      	movs	r3, #1
 8002e38:	1d41      	adds	r1, r0, #5
 8002e3a:	77cb      	strb	r3, [r1, #31]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e3c:	1d84      	adds	r4, r0, #6
 8002e3e:	7fe2      	ldrb	r2, [r4, #31]
 8002e40:	2a02      	cmp	r2, #2
 8002e42:	d003      	beq.n	8002e4c <HAL_DMA_Abort_IT+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e44:	2204      	movs	r2, #4
 8002e46:	63c2      	str	r2, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e48:	0018      	movs	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e4c:	260e      	movs	r6, #14
 8002e4e:	6802      	ldr	r2, [r0, #0]
 8002e50:	6815      	ldr	r5, [r2, #0]
 8002e52:	43b5      	bics	r5, r6
 8002e54:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e56:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e58:	6c46      	ldr	r6, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	439d      	bics	r5, r3
 8002e5c:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e5e:	6832      	ldr	r2, [r6, #0]
 8002e60:	4d11      	ldr	r5, [pc, #68]	@ (8002ea8 <HAL_DMA_Abort_IT+0x74>)
 8002e62:	402a      	ands	r2, r5
 8002e64:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002e66:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002e68:	4e10      	ldr	r6, [pc, #64]	@ (8002eac <HAL_DMA_Abort_IT+0x78>)
 8002e6a:	0015      	movs	r5, r2
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	4015      	ands	r5, r2
 8002e70:	40ab      	lsls	r3, r5
 8002e72:	6877      	ldr	r7, [r6, #4]
 8002e74:	433b      	orrs	r3, r7
 8002e76:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e78:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002e7a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002e7c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e7e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4d08      	ldr	r5, [pc, #32]	@ (8002ea8 <HAL_DMA_Abort_IT+0x74>)
 8002e88:	402a      	ands	r2, r5
 8002e8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e8e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002e90:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	2301      	movs	r3, #1
 8002e94:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002e96:	2300      	movs	r3, #0
 8002e98:	77cb      	strb	r3, [r1, #31]
    if (hdma->XferAbortCallback != NULL)
 8002e9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d000      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002ea0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	e7d1      	b.n	8002e4a <HAL_DMA_Abort_IT+0x16>
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	fffffeff 	.word	0xfffffeff
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_GPIO_Init>:
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	469c      	mov	ip, r3
{
 8002eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb6:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eb8:	680b      	ldr	r3, [r1, #0]
 8002eba:	4664      	mov	r4, ip
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	40e2      	lsrs	r2, r4
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8002ec2:	b005      	add	sp, #20
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ec6:	4662      	mov	r2, ip
 8002ec8:	2601      	movs	r6, #1
 8002eca:	4096      	lsls	r6, r2
 8002ecc:	001a      	movs	r2, r3
 8002ece:	4032      	ands	r2, r6
 8002ed0:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0U)
 8002ed2:	4233      	tst	r3, r6
 8002ed4:	d100      	bne.n	8002ed8 <HAL_GPIO_Init+0x28>
 8002ed6:	e094      	b.n	8003002 <HAL_GPIO_Init+0x152>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed8:	684f      	ldr	r7, [r1, #4]
 8002eda:	2310      	movs	r3, #16
 8002edc:	003d      	movs	r5, r7
 8002ede:	439d      	bics	r5, r3
 8002ee0:	9503      	str	r5, [sp, #12]
 8002ee2:	2d02      	cmp	r5, #2
 8002ee4:	d114      	bne.n	8002f10 <HAL_GPIO_Init+0x60>
        tmp = GPIOx->AFR[position >> 3U];
 8002ee6:	4663      	mov	r3, ip
 8002ee8:	08da      	lsrs	r2, r3, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	1882      	adds	r2, r0, r2
 8002eee:	6a13      	ldr	r3, [r2, #32]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002ef0:	2407      	movs	r4, #7
        tmp = GPIOx->AFR[position >> 3U];
 8002ef2:	001d      	movs	r5, r3
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002ef4:	4663      	mov	r3, ip
 8002ef6:	401c      	ands	r4, r3
 8002ef8:	230f      	movs	r3, #15
 8002efa:	00a4      	lsls	r4, r4, #2
 8002efc:	40a3      	lsls	r3, r4
 8002efe:	439d      	bics	r5, r3
 8002f00:	9502      	str	r5, [sp, #8]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002f02:	250f      	movs	r5, #15
 8002f04:	690b      	ldr	r3, [r1, #16]
 8002f06:	402b      	ands	r3, r5
 8002f08:	40a3      	lsls	r3, r4
 8002f0a:	9c02      	ldr	r4, [sp, #8]
 8002f0c:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = tmp;
 8002f0e:	6213      	str	r3, [r2, #32]
      tmp = GPIOx->MODER;
 8002f10:	4663      	mov	r3, ip
 8002f12:	005a      	lsls	r2, r3, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f14:	2303      	movs	r3, #3
 8002f16:	4093      	lsls	r3, r2
      tmp = GPIOx->MODER;
 8002f18:	6804      	ldr	r4, [r0, #0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f1a:	43dd      	mvns	r5, r3
 8002f1c:	439c      	bics	r4, r3
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1e:	2303      	movs	r3, #3
 8002f20:	403b      	ands	r3, r7
 8002f22:	4093      	lsls	r3, r2
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f24:	9502      	str	r5, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f26:	9d03      	ldr	r5, [sp, #12]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f28:	4323      	orrs	r3, r4
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f2a:	3d01      	subs	r5, #1
      GPIOx->MODER = tmp;
 8002f2c:	6003      	str	r3, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f2e:	2d01      	cmp	r5, #1
 8002f30:	d80f      	bhi.n	8002f52 <HAL_GPIO_Init+0xa2>
        tmp = GPIOx->OSPEEDR;
 8002f32:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f34:	9b02      	ldr	r3, [sp, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f36:	2501      	movs	r5, #1
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f38:	401c      	ands	r4, r3
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002f3a:	68cb      	ldr	r3, [r1, #12]
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4323      	orrs	r3, r4
        GPIOx->OSPEEDR = tmp;
 8002f40:	6083      	str	r3, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f42:	093b      	lsrs	r3, r7, #4
 8002f44:	402b      	ands	r3, r5
 8002f46:	4665      	mov	r5, ip
 8002f48:	40ab      	lsls	r3, r5
        tmp = GPIOx->OTYPER;
 8002f4a:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f4c:	43b4      	bics	r4, r6
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f4e:	4323      	orrs	r3, r4
        GPIOx->OTYPER = tmp;
 8002f50:	6043      	str	r3, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f52:	2f03      	cmp	r7, #3
 8002f54:	d055      	beq.n	8003002 <HAL_GPIO_Init+0x152>
        tmp = GPIOx->PUPDR;
 8002f56:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	9b02      	ldr	r3, [sp, #8]
 8002f5a:	401c      	ands	r4, r3
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002f5c:	688b      	ldr	r3, [r1, #8]
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	4323      	orrs	r3, r4
        GPIOx->PUPDR = tmp;
 8002f62:	60c3      	str	r3, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	055b      	lsls	r3, r3, #21
 8002f68:	421f      	tst	r7, r3
 8002f6a:	d04a      	beq.n	8003002 <HAL_GPIO_Init+0x152>
        tmp = EXTI->EXTICR[position >> 2U];
 8002f6c:	4663      	mov	r3, ip
 8002f6e:	089a      	lsrs	r2, r3, #2
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <HAL_GPIO_Init+0x158>)
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	18d2      	adds	r2, r2, r3
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002f76:	2403      	movs	r4, #3
 8002f78:	4663      	mov	r3, ip
 8002f7a:	401c      	ands	r4, r3
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	00e4      	lsls	r4, r4, #3
 8002f80:	40a3      	lsls	r3, r4
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f82:	26a0      	movs	r6, #160	@ 0xa0
        tmp = EXTI->EXTICR[position >> 2U];
 8002f84:	6e15      	ldr	r5, [r2, #96]	@ 0x60
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f86:	05f6      	lsls	r6, r6, #23
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002f88:	439d      	bics	r5, r3
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	42b0      	cmp	r0, r6
 8002f8e:	d010      	beq.n	8002fb2 <HAL_GPIO_Init+0x102>
 8002f90:	4e1e      	ldr	r6, [pc, #120]	@ (800300c <HAL_GPIO_Init+0x15c>)
 8002f92:	3301      	adds	r3, #1
 8002f94:	42b0      	cmp	r0, r6
 8002f96:	d00c      	beq.n	8002fb2 <HAL_GPIO_Init+0x102>
 8002f98:	4e1d      	ldr	r6, [pc, #116]	@ (8003010 <HAL_GPIO_Init+0x160>)
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	42b0      	cmp	r0, r6
 8002f9e:	d008      	beq.n	8002fb2 <HAL_GPIO_Init+0x102>
 8002fa0:	4e1c      	ldr	r6, [pc, #112]	@ (8003014 <HAL_GPIO_Init+0x164>)
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	42b0      	cmp	r0, r6
 8002fa6:	d004      	beq.n	8002fb2 <HAL_GPIO_Init+0x102>
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_GPIO_Init+0x168>)
 8002faa:	18c3      	adds	r3, r0, r3
 8002fac:	1e5e      	subs	r6, r3, #1
 8002fae:	41b3      	sbcs	r3, r6
 8002fb0:	3305      	adds	r3, #5
 8002fb2:	40a3      	lsls	r3, r4
 8002fb4:	432b      	orrs	r3, r5
        EXTI->EXTICR[position >> 2U] = tmp;
 8002fb6:	6613      	str	r3, [r2, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_GPIO_Init+0x16c>)
        tmp &= ~((uint32_t)iocurrent);
 8002fba:	9a01      	ldr	r2, [sp, #4]
        tmp = EXTI->IMR1;
 8002fbc:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
          tmp |= iocurrent;
 8002fbe:	9c01      	ldr	r4, [sp, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002fc0:	43d2      	mvns	r2, r2
          tmp |= iocurrent;
 8002fc2:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc4:	03fe      	lsls	r6, r7, #15
 8002fc6:	d401      	bmi.n	8002fcc <HAL_GPIO_Init+0x11c>
        tmp &= ~((uint32_t)iocurrent);
 8002fc8:	002c      	movs	r4, r5
 8002fca:	4014      	ands	r4, r2
        EXTI->IMR1 = tmp;
 8002fcc:	67dc      	str	r4, [r3, #124]	@ 0x7c
        tmp = EXTI->EMR1;
 8002fce:	4c14      	ldr	r4, [pc, #80]	@ (8003020 <HAL_GPIO_Init+0x170>)
          tmp |= iocurrent;
 8002fd0:	9d01      	ldr	r5, [sp, #4]
        tmp = EXTI->EMR1;
 8002fd2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
          tmp |= iocurrent;
 8002fd4:	431d      	orrs	r5, r3
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd6:	03be      	lsls	r6, r7, #14
 8002fd8:	d401      	bmi.n	8002fde <HAL_GPIO_Init+0x12e>
        tmp &= ~((uint32_t)iocurrent);
 8002fda:	4013      	ands	r3, r2
 8002fdc:	001d      	movs	r5, r3
        EXTI->EMR1 = tmp;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_GPIO_Init+0x158>)
 8002fe0:	67e5      	str	r5, [r4, #124]	@ 0x7c
        tmp = EXTI->RTSR1;
 8002fe2:	681d      	ldr	r5, [r3, #0]
          tmp |= iocurrent;
 8002fe4:	9c01      	ldr	r4, [sp, #4]
 8002fe6:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe8:	02fe      	lsls	r6, r7, #11
 8002fea:	d401      	bmi.n	8002ff0 <HAL_GPIO_Init+0x140>
        tmp &= ~((uint32_t)iocurrent);
 8002fec:	002c      	movs	r4, r5
 8002fee:	4014      	ands	r4, r2
        EXTI->RTSR1 = tmp;
 8002ff0:	601c      	str	r4, [r3, #0]
        tmp = EXTI->FTSR1;
 8002ff2:	685c      	ldr	r4, [r3, #4]
          tmp |= iocurrent;
 8002ff4:	9d01      	ldr	r5, [sp, #4]
 8002ff6:	4325      	orrs	r5, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	02bf      	lsls	r7, r7, #10
 8002ffa:	d401      	bmi.n	8003000 <HAL_GPIO_Init+0x150>
        tmp &= ~((uint32_t)iocurrent);
 8002ffc:	4014      	ands	r4, r2
 8002ffe:	0025      	movs	r5, r4
        EXTI->FTSR1 = tmp;
 8003000:	605d      	str	r5, [r3, #4]
    position++;
 8003002:	2301      	movs	r3, #1
 8003004:	449c      	add	ip, r3
 8003006:	e757      	b.n	8002eb8 <HAL_GPIO_Init+0x8>
 8003008:	40021800 	.word	0x40021800
 800300c:	50000400 	.word	0x50000400
 8003010:	50000800 	.word	0x50000800
 8003014:	50000c00 	.word	0x50000c00
 8003018:	afffec00 	.word	0xafffec00
 800301c:	40021804 	.word	0x40021804
 8003020:	40021808 	.word	0x40021808

08003024 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003024:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003026:	2200      	movs	r2, #0
{
 8003028:	000f      	movs	r7, r1
 800302a:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800302c:	003b      	movs	r3, r7
 800302e:	40d3      	lsrs	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_DeInit+0x12>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
    }

    position++;
  }
}
 8003032:	b005      	add	sp, #20
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003036:	2301      	movs	r3, #1
 8003038:	4093      	lsls	r3, r2
 800303a:	001c      	movs	r4, r3
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	403c      	ands	r4, r7
    if (iocurrent != 0U)
 8003040:	421f      	tst	r7, r3
 8003042:	d057      	beq.n	80030f4 <HAL_GPIO_DeInit+0xd0>
      tmp = EXTI->EXTICR[position >> 2U];
 8003044:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <HAL_GPIO_DeInit+0xd4>)
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003046:	2503      	movs	r5, #3
      tmp = EXTI->EXTICR[position >> 2U];
 8003048:	0891      	lsrs	r1, r2, #2
 800304a:	0089      	lsls	r1, r1, #2
 800304c:	18c9      	adds	r1, r1, r3
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800304e:	230f      	movs	r3, #15
 8003050:	4015      	ands	r5, r2
 8003052:	00ed      	lsls	r5, r5, #3
 8003054:	40ab      	lsls	r3, r5
      tmp = EXTI->EXTICR[position >> 2U];
 8003056:	6e0e      	ldr	r6, [r1, #96]	@ 0x60
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	401e      	ands	r6, r3
 800305c:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800305e:	26a0      	movs	r6, #160	@ 0xa0
 8003060:	2300      	movs	r3, #0
 8003062:	05f6      	lsls	r6, r6, #23
 8003064:	42b0      	cmp	r0, r6
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_DeInit+0x6c>
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_GPIO_DeInit+0xd8>)
 800306a:	469c      	mov	ip, r3
 800306c:	2301      	movs	r3, #1
 800306e:	4560      	cmp	r0, ip
 8003070:	d00e      	beq.n	8003090 <HAL_GPIO_DeInit+0x6c>
 8003072:	4b23      	ldr	r3, [pc, #140]	@ (8003100 <HAL_GPIO_DeInit+0xdc>)
 8003074:	469c      	mov	ip, r3
 8003076:	2302      	movs	r3, #2
 8003078:	4560      	cmp	r0, ip
 800307a:	d009      	beq.n	8003090 <HAL_GPIO_DeInit+0x6c>
 800307c:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <HAL_GPIO_DeInit+0xe0>)
 800307e:	469c      	mov	ip, r3
 8003080:	2303      	movs	r3, #3
 8003082:	4560      	cmp	r0, ip
 8003084:	d004      	beq.n	8003090 <HAL_GPIO_DeInit+0x6c>
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_GPIO_DeInit+0xe4>)
 8003088:	18c3      	adds	r3, r0, r3
 800308a:	1e5e      	subs	r6, r3, #1
 800308c:	41b3      	sbcs	r3, r6
 800308e:	3305      	adds	r3, #5
 8003090:	40ab      	lsls	r3, r5
 8003092:	9d03      	ldr	r5, [sp, #12]
 8003094:	42ab      	cmp	r3, r5
 8003096:	d112      	bne.n	80030be <HAL_GPIO_DeInit+0x9a>
        EXTI->IMR1 &= ~(iocurrent);
 8003098:	4e1c      	ldr	r6, [pc, #112]	@ (800310c <HAL_GPIO_DeInit+0xe8>)
 800309a:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <HAL_GPIO_DeInit+0xd4>)
 800309c:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800309e:	43a5      	bics	r5, r4
 80030a0:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 80030a2:	4e1b      	ldr	r6, [pc, #108]	@ (8003110 <HAL_GPIO_DeInit+0xec>)
 80030a4:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 80030a6:	43a5      	bics	r5, r4
 80030a8:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 80030aa:	681d      	ldr	r5, [r3, #0]
 80030ac:	43a5      	bics	r5, r4
 80030ae:	601d      	str	r5, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80030b0:	685d      	ldr	r5, [r3, #4]
 80030b2:	43a5      	bics	r5, r4
 80030b4:	605d      	str	r5, [r3, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80030b6:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
 80030b8:	9c02      	ldr	r4, [sp, #8]
 80030ba:	43a3      	bics	r3, r4
 80030bc:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030be:	2403      	movs	r4, #3
 80030c0:	0051      	lsls	r1, r2, #1
 80030c2:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80030c4:	2107      	movs	r1, #7
 80030c6:	260f      	movs	r6, #15
 80030c8:	4011      	ands	r1, r2
 80030ca:	0089      	lsls	r1, r1, #2
 80030cc:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030ce:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80030d0:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030d2:	4323      	orrs	r3, r4
 80030d4:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80030d6:	08d3      	lsrs	r3, r2, #3
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	18c3      	adds	r3, r0, r3
 80030dc:	6a1d      	ldr	r5, [r3, #32]
 80030de:	43b5      	bics	r5, r6
 80030e0:	621d      	str	r5, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030e2:	6883      	ldr	r3, [r0, #8]
 80030e4:	43a3      	bics	r3, r4
 80030e6:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80030e8:	6843      	ldr	r3, [r0, #4]
 80030ea:	438b      	bics	r3, r1
 80030ec:	6043      	str	r3, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ee:	68c3      	ldr	r3, [r0, #12]
 80030f0:	43a3      	bics	r3, r4
 80030f2:	60c3      	str	r3, [r0, #12]
    position++;
 80030f4:	3201      	adds	r2, #1
 80030f6:	e799      	b.n	800302c <HAL_GPIO_DeInit+0x8>
 80030f8:	40021800 	.word	0x40021800
 80030fc:	50000400 	.word	0x50000400
 8003100:	50000800 	.word	0x50000800
 8003104:	50000c00 	.word	0x50000c00
 8003108:	afffec00 	.word	0xafffec00
 800310c:	40021804 	.word	0x40021804
 8003110:	40021808 	.word	0x40021808

08003114 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003114:	6900      	ldr	r0, [r0, #16]
 8003116:	4008      	ands	r0, r1
 8003118:	1e43      	subs	r3, r0, #1
 800311a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800311c:	b2c0      	uxtb	r0, r0
}
 800311e:	4770      	bx	lr

08003120 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003120:	2a00      	cmp	r2, #0
 8003122:	d001      	beq.n	8003128 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003124:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003126:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003128:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800312a:	e7fc      	b.n	8003126 <HAL_GPIO_WritePin+0x6>

0800312c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	1e05      	subs	r5, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0xa>
  {
    return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
}
 8003134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	07db      	lsls	r3, r3, #31
 800313a:	d40d      	bmi.n	8003158 <HAL_RCC_OscConfig+0x2c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	079b      	lsls	r3, r3, #30
 8003140:	d44f      	bmi.n	80031e2 <HAL_RCC_OscConfig+0xb6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	d500      	bpl.n	800314a <HAL_RCC_OscConfig+0x1e>
 8003148:	e0a4      	b.n	8003294 <HAL_RCC_OscConfig+0x168>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314a:	2204      	movs	r2, #4
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	4213      	tst	r3, r2
 8003150:	d000      	beq.n	8003154 <HAL_RCC_OscConfig+0x28>
 8003152:	e0cf      	b.n	80032f4 <HAL_RCC_OscConfig+0x1c8>
  return HAL_OK;
 8003154:	2000      	movs	r0, #0
 8003156:	e7ed      	b.n	8003134 <HAL_RCC_OscConfig+0x8>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003158:	2138      	movs	r1, #56	@ 0x38
 800315a:	4c85      	ldr	r4, [pc, #532]	@ (8003370 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800315c:	6843      	ldr	r3, [r0, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315e:	68a2      	ldr	r2, [r4, #8]
 8003160:	400a      	ands	r2, r1
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003162:	2a08      	cmp	r2, #8
 8003164:	d102      	bne.n	800316c <HAL_RCC_OscConfig+0x40>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e8      	bne.n	800313c <HAL_RCC_OscConfig+0x10>
 800316a:	e7e2      	b.n	8003132 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	2280      	movs	r2, #128	@ 0x80
 800316e:	0252      	lsls	r2, r2, #9
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x6c>
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800317a:	f7ff fdbb 	bl	8002cf4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003180:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003182:	02bf      	lsls	r7, r7, #10
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	423b      	tst	r3, r7
 8003188:	d1d8      	bne.n	800313c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800318a:	f7ff fdb3 	bl	8002cf4 <HAL_GetTick>
 800318e:	1b80      	subs	r0, r0, r6
 8003190:	2864      	cmp	r0, #100	@ 0x64
 8003192:	d9f7      	bls.n	8003184 <HAL_RCC_OscConfig+0x58>
            return HAL_TIMEOUT;
 8003194:	2003      	movs	r0, #3
 8003196:	e7cd      	b.n	8003134 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	21a0      	movs	r1, #160	@ 0xa0
 800319a:	02c9      	lsls	r1, r1, #11
 800319c:	428b      	cmp	r3, r1
 800319e:	d108      	bne.n	80031b2 <HAL_RCC_OscConfig+0x86>
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	6821      	ldr	r1, [r4, #0]
 80031a4:	02db      	lsls	r3, r3, #11
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	e7e3      	b.n	800317a <HAL_RCC_OscConfig+0x4e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	6822      	ldr	r2, [r4, #0]
 80031b4:	496f      	ldr	r1, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x248>)
 80031b6:	400a      	ands	r2, r1
 80031b8:	6022      	str	r2, [r4, #0]
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	496e      	ldr	r1, [pc, #440]	@ (8003378 <HAL_RCC_OscConfig+0x24c>)
 80031be:	400a      	ands	r2, r1
 80031c0:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1d9      	bne.n	800317a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80031c6:	f7ff fd95 	bl	8002cf4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ca:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80031cc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	02bf      	lsls	r7, r7, #10
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	423b      	tst	r3, r7
 80031d4:	d0b2      	beq.n	800313c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80031d6:	f7ff fd8d 	bl	8002cf4 <HAL_GetTick>
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	2864      	cmp	r0, #100	@ 0x64
 80031de:	d9f7      	bls.n	80031d0 <HAL_RCC_OscConfig+0xa4>
 80031e0:	e7d8      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e2:	2238      	movs	r2, #56	@ 0x38
 80031e4:	4c62      	ldr	r4, [pc, #392]	@ (8003370 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80031e6:	68eb      	ldr	r3, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e8:	68a1      	ldr	r1, [r4, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80031ea:	4211      	tst	r1, r2
 80031ec:	d11c      	bne.n	8003228 <HAL_RCC_OscConfig+0xfc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d09f      	beq.n	8003132 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	6862      	ldr	r2, [r4, #4]
 80031f4:	696b      	ldr	r3, [r5, #20]
 80031f6:	4961      	ldr	r1, [pc, #388]	@ (800337c <HAL_RCC_OscConfig+0x250>)
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	400a      	ands	r2, r1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	6063      	str	r3, [r4, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	4a5f      	ldr	r2, [pc, #380]	@ (8003380 <HAL_RCC_OscConfig+0x254>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003204:	495f      	ldr	r1, [pc, #380]	@ (8003384 <HAL_RCC_OscConfig+0x258>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003206:	4013      	ands	r3, r2
 8003208:	692a      	ldr	r2, [r5, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	6023      	str	r3, [r4, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x25c>)
 8003212:	049b      	lsls	r3, r3, #18
 8003214:	0f5b      	lsrs	r3, r3, #29
 8003216:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003218:	4b5c      	ldr	r3, [pc, #368]	@ (800338c <HAL_RCC_OscConfig+0x260>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800321a:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	f7ff fd29 	bl	8002c74 <HAL_InitTick>
 8003222:	2800      	cmp	r0, #0
 8003224:	d08d      	beq.n	8003142 <HAL_RCC_OscConfig+0x16>
 8003226:	e784      	b.n	8003132 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	4a54      	ldr	r2, [pc, #336]	@ (8003380 <HAL_RCC_OscConfig+0x254>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003232:	4013      	ands	r3, r2
 8003234:	692a      	ldr	r2, [r5, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003236:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003238:	4313      	orrs	r3, r2
 800323a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	6822      	ldr	r2, [r4, #0]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4313      	orrs	r3, r2
 8003244:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003246:	f7ff fd55 	bl	8002cf4 <HAL_GetTick>
 800324a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	423b      	tst	r3, r7
 8003250:	d007      	beq.n	8003262 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	6862      	ldr	r2, [r4, #4]
 8003254:	696b      	ldr	r3, [r5, #20]
 8003256:	4949      	ldr	r1, [pc, #292]	@ (800337c <HAL_RCC_OscConfig+0x250>)
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	400a      	ands	r2, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	6063      	str	r3, [r4, #4]
 8003260:	e76f      	b.n	8003142 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003262:	f7ff fd47 	bl	8002cf4 <HAL_GetTick>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	2802      	cmp	r0, #2
 800326a:	d9ef      	bls.n	800324c <HAL_RCC_OscConfig+0x120>
 800326c:	e792      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_HSI_DISABLE();
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	4a47      	ldr	r2, [pc, #284]	@ (8003390 <HAL_RCC_OscConfig+0x264>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003272:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8003274:	4013      	ands	r3, r2
 8003276:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003278:	f7ff fd3c 	bl	8002cf4 <HAL_GetTick>
 800327c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327e:	00ff      	lsls	r7, r7, #3
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	423b      	tst	r3, r7
 8003284:	d100      	bne.n	8003288 <HAL_RCC_OscConfig+0x15c>
 8003286:	e75c      	b.n	8003142 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003288:	f7ff fd34 	bl	8002cf4 <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	2802      	cmp	r0, #2
 8003290:	d9f6      	bls.n	8003280 <HAL_RCC_OscConfig+0x154>
 8003292:	e77f      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003294:	2138      	movs	r1, #56	@ 0x38
 8003296:	4c36      	ldr	r4, [pc, #216]	@ (8003370 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003298:	69aa      	ldr	r2, [r5, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	400b      	ands	r3, r1
 800329e:	2b18      	cmp	r3, #24
 80032a0:	d103      	bne.n	80032aa <HAL_RCC_OscConfig+0x17e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	d000      	beq.n	80032a8 <HAL_RCC_OscConfig+0x17c>
 80032a6:	e750      	b.n	800314a <HAL_RCC_OscConfig+0x1e>
 80032a8:	e743      	b.n	8003132 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032aa:	2301      	movs	r3, #1
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_LSI_ENABLE();
 80032b0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80032b2:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80032b4:	4313      	orrs	r3, r2
 80032b6:	6623      	str	r3, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80032b8:	f7ff fd1c 	bl	8002cf4 <HAL_GetTick>
 80032bc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80032be:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80032c0:	423b      	tst	r3, r7
 80032c2:	d000      	beq.n	80032c6 <HAL_RCC_OscConfig+0x19a>
 80032c4:	e741      	b.n	800314a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80032c6:	f7ff fd15 	bl	8002cf4 <HAL_GetTick>
 80032ca:	1b80      	subs	r0, r0, r6
 80032cc:	2802      	cmp	r0, #2
 80032ce:	d9f6      	bls.n	80032be <HAL_RCC_OscConfig+0x192>
 80032d0:	e760      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_LSI_DISABLE();
 80032d2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032d4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80032d6:	439a      	bics	r2, r3
 80032d8:	6622      	str	r2, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80032da:	f7ff fd0b 	bl	8002cf4 <HAL_GetTick>
 80032de:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032e0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80032e2:	423b      	tst	r3, r7
 80032e4:	d100      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1bc>
 80032e6:	e730      	b.n	800314a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80032e8:	f7ff fd04 	bl	8002cf4 <HAL_GetTick>
 80032ec:	1b80      	subs	r0, r0, r6
 80032ee:	2802      	cmp	r0, #2
 80032f0:	d9f6      	bls.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
 80032f2:	e74f      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80032f4:	2138      	movs	r1, #56	@ 0x38
 80032f6:	4c1e      	ldr	r4, [pc, #120]	@ (8003370 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80032f8:	68a8      	ldr	r0, [r5, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80032fa:	68a3      	ldr	r3, [r4, #8]
 80032fc:	400b      	ands	r3, r1
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d103      	bne.n	800330a <HAL_RCC_OscConfig+0x1de>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003302:	4243      	negs	r3, r0
 8003304:	4158      	adcs	r0, r3
 8003306:	b2c0      	uxtb	r0, r0
 8003308:	e714      	b.n	8003134 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800330c:	2801      	cmp	r0, #1
 800330e:	d110      	bne.n	8003332 <HAL_RCC_OscConfig+0x206>
 8003310:	4303      	orrs	r3, r0
 8003312:	65e3      	str	r3, [r4, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003314:	f7ff fcee 	bl	8002cf4 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003318:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 800331a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800331c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800331e:	4233      	tst	r3, r6
 8003320:	d000      	beq.n	8003324 <HAL_RCC_OscConfig+0x1f8>
 8003322:	e717      	b.n	8003154 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7ff fce6 	bl	8002cf4 <HAL_GetTick>
 8003328:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <HAL_RCC_OscConfig+0x268>)
 800332a:	1b40      	subs	r0, r0, r5
 800332c:	4298      	cmp	r0, r3
 800332e:	d9f5      	bls.n	800331c <HAL_RCC_OscConfig+0x1f0>
 8003330:	e730      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	2805      	cmp	r0, #5
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x216>
 8003336:	4313      	orrs	r3, r2
 8003338:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800333a:	2301      	movs	r3, #1
 800333c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800333e:	4313      	orrs	r3, r2
 8003340:	e7e7      	b.n	8003312 <HAL_RCC_OscConfig+0x1e6>
 8003342:	2101      	movs	r1, #1
 8003344:	438b      	bics	r3, r1
 8003346:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003348:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800334a:	4393      	bics	r3, r2
 800334c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334e:	2800      	cmp	r0, #0
 8003350:	d1e0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1e8>
        tickstart = HAL_GetTick();
 8003352:	f7ff fccf 	bl	8002cf4 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003356:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8003358:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800335a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800335c:	4233      	tst	r3, r6
 800335e:	d100      	bne.n	8003362 <HAL_RCC_OscConfig+0x236>
 8003360:	e6f8      	b.n	8003154 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7ff fcc7 	bl	8002cf4 <HAL_GetTick>
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_OscConfig+0x268>)
 8003368:	1b40      	subs	r0, r0, r5
 800336a:	4298      	cmp	r0, r3
 800336c:	d9f5      	bls.n	800335a <HAL_RCC_OscConfig+0x22e>
 800336e:	e711      	b.n	8003194 <HAL_RCC_OscConfig+0x68>
 8003370:	40021000 	.word	0x40021000
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff80ff 	.word	0xffff80ff
 8003380:	ffffc7ff 	.word	0xffffc7ff
 8003384:	20000000 	.word	0x20000000
 8003388:	02dc6c00 	.word	0x02dc6c00
 800338c:	20000008 	.word	0x20000008
 8003390:	fffffeff 	.word	0xfffffeff
 8003394:	00001388 	.word	0x00001388

08003398 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003398:	2238      	movs	r2, #56	@ 0x38
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x40>)
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	4211      	tst	r1, r2
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033a2:	681b      	ldr	r3, [r3, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033a4:	480d      	ldr	r0, [pc, #52]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x44>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033a6:	049b      	lsls	r3, r3, #18
 80033a8:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033aa:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80033ac:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	4011      	ands	r1, r2
 80033b2:	2908      	cmp	r1, #8
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x36>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	4011      	ands	r1, r2
 80033ba:	2920      	cmp	r1, #32
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x3a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033be:	689b      	ldr	r3, [r3, #8]
    sysclockfreq = 0U;
 80033c0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSI_VALUE;
 80033c8:	20fa      	movs	r0, #250	@ 0xfa
 80033ca:	01c0      	lsls	r0, r0, #7
 80033cc:	e7ee      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 80033ce:	4804      	ldr	r0, [pc, #16]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x48>)
 80033d0:	e7ec      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 80033d2:	2080      	movs	r0, #128	@ 0x80
 80033d4:	0200      	lsls	r0, r0, #8
 80033d6:	e7e9      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x14>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	02dc6c00 	.word	0x02dc6c00
 80033e0:	007a1200 	.word	0x007a1200

080033e4 <HAL_RCC_ClockConfig>:
{
 80033e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e6:	0004      	movs	r4, r0
 80033e8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
}
 80033f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f2:	2707      	movs	r7, #7
 80033f4:	4e4b      	ldr	r6, [pc, #300]	@ (8003524 <HAL_RCC_ClockConfig+0x140>)
 80033f6:	6833      	ldr	r3, [r6, #0]
 80033f8:	403b      	ands	r3, r7
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d32a      	bcc.n	8003454 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	0793      	lsls	r3, r2, #30
 8003402:	d43b      	bmi.n	800347c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003404:	07d2      	lsls	r2, r2, #31
 8003406:	d44a      	bmi.n	800349e <HAL_RCC_ClockConfig+0xba>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	2707      	movs	r7, #7
 800340a:	6833      	ldr	r3, [r6, #0]
 800340c:	403b      	ands	r3, r7
 800340e:	42ab      	cmp	r3, r5
 8003410:	d90a      	bls.n	8003428 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	6833      	ldr	r3, [r6, #0]
 8003414:	43bb      	bics	r3, r7
 8003416:	432b      	orrs	r3, r5
 8003418:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800341a:	f7ff fc6b 	bl	8002cf4 <HAL_GetTick>
 800341e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003420:	6833      	ldr	r3, [r6, #0]
 8003422:	403b      	ands	r3, r7
 8003424:	42ab      	cmp	r3, r5
 8003426:	d16d      	bne.n	8003504 <HAL_RCC_ClockConfig+0x120>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	4d3f      	ldr	r5, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x144>)
 800342c:	075b      	lsls	r3, r3, #29
 800342e:	d471      	bmi.n	8003514 <HAL_RCC_ClockConfig+0x130>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003430:	f7ff ffb2 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003434:	68ab      	ldr	r3, [r5, #8]
 8003436:	493d      	ldr	r1, [pc, #244]	@ (800352c <HAL_RCC_ClockConfig+0x148>)
 8003438:	051b      	lsls	r3, r3, #20
 800343a:	0f1b      	lsrs	r3, r3, #28
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	585b      	ldr	r3, [r3, r1]
 8003440:	211f      	movs	r1, #31
 8003442:	400b      	ands	r3, r1
 8003444:	40d8      	lsrs	r0, r3
 8003446:	4a3a      	ldr	r2, [pc, #232]	@ (8003530 <HAL_RCC_ClockConfig+0x14c>)
  return HAL_InitTick(uwTickPrio);
 8003448:	4b3a      	ldr	r3, [pc, #232]	@ (8003534 <HAL_RCC_ClockConfig+0x150>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800344a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	f7ff fc11 	bl	8002c74 <HAL_InitTick>
 8003452:	e7cd      	b.n	80033f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003454:	6833      	ldr	r3, [r6, #0]
 8003456:	43bb      	bics	r3, r7
 8003458:	430b      	orrs	r3, r1
 800345a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800345c:	f7ff fc4a 	bl	8002cf4 <HAL_GetTick>
 8003460:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003462:	6833      	ldr	r3, [r6, #0]
 8003464:	403b      	ands	r3, r7
 8003466:	42ab      	cmp	r3, r5
 8003468:	d0c9      	beq.n	80033fe <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7ff fc43 	bl	8002cf4 <HAL_GetTick>
 800346e:	9b01      	ldr	r3, [sp, #4]
 8003470:	1ac0      	subs	r0, r0, r3
 8003472:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_RCC_ClockConfig+0x154>)
 8003474:	4298      	cmp	r0, r3
 8003476:	d9f4      	bls.n	8003462 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8003478:	2003      	movs	r0, #3
 800347a:	e7b9      	b.n	80033f0 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	492a      	ldr	r1, [pc, #168]	@ (8003528 <HAL_RCC_ClockConfig+0x144>)
 800347e:	0753      	lsls	r3, r2, #29
 8003480:	d506      	bpl.n	8003490 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003482:	6888      	ldr	r0, [r1, #8]
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_ClockConfig+0x158>)
 8003486:	4018      	ands	r0, r3
 8003488:	23b0      	movs	r3, #176	@ 0xb0
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4303      	orrs	r3, r0
 800348e:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	688b      	ldr	r3, [r1, #8]
 8003492:	482b      	ldr	r0, [pc, #172]	@ (8003540 <HAL_RCC_ClockConfig+0x15c>)
 8003494:	4003      	ands	r3, r0
 8003496:	68e0      	ldr	r0, [r4, #12]
 8003498:	4303      	orrs	r3, r0
 800349a:	608b      	str	r3, [r1, #8]
 800349c:	e7b2      	b.n	8003404 <HAL_RCC_ClockConfig+0x20>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800349e:	221c      	movs	r2, #28
 80034a0:	4f21      	ldr	r7, [pc, #132]	@ (8003528 <HAL_RCC_ClockConfig+0x144>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4393      	bics	r3, r2
 80034a6:	68a2      	ldr	r2, [r4, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	603b      	str	r3, [r7, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ac:	6862      	ldr	r2, [r4, #4]
 80034ae:	2a01      	cmp	r2, #1
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x102>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	039b      	lsls	r3, r3, #14
 80034b6:	d59a      	bpl.n	80033ee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b8:	2107      	movs	r1, #7
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	438b      	bics	r3, r1
 80034be:	4313      	orrs	r3, r2
 80034c0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80034c2:	f7ff fc17 	bl	8002cf4 <HAL_GetTick>
 80034c6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c8:	2338      	movs	r3, #56	@ 0x38
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	401a      	ands	r2, r3
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d098      	beq.n	8003408 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80034d6:	f7ff fc0d 	bl	8002cf4 <HAL_GetTick>
 80034da:	9b01      	ldr	r3, [sp, #4]
 80034dc:	1ac0      	subs	r0, r0, r3
 80034de:	4b16      	ldr	r3, [pc, #88]	@ (8003538 <HAL_RCC_ClockConfig+0x154>)
 80034e0:	4298      	cmp	r0, r3
 80034e2:	d9f1      	bls.n	80034c8 <HAL_RCC_ClockConfig+0xe4>
 80034e4:	e7c8      	b.n	8003478 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	055b      	lsls	r3, r3, #21
 80034ee:	d4e3      	bmi.n	80034b8 <HAL_RCC_ClockConfig+0xd4>
 80034f0:	e77d      	b.n	80033ee <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80034f2:	2302      	movs	r3, #2
 80034f4:	2a03      	cmp	r2, #3
 80034f6:	d103      	bne.n	8003500 <HAL_RCC_ClockConfig+0x11c>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80034f8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80034fa:	4219      	tst	r1, r3
 80034fc:	d1dc      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xd4>
 80034fe:	e776      	b.n	80033ee <HAL_RCC_ClockConfig+0xa>
 8003500:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003502:	e7fa      	b.n	80034fa <HAL_RCC_ClockConfig+0x116>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7ff fbf6 	bl	8002cf4 <HAL_GetTick>
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	1ac0      	subs	r0, r0, r3
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x154>)
 800350e:	4298      	cmp	r0, r3
 8003510:	d986      	bls.n	8003420 <HAL_RCC_ClockConfig+0x3c>
 8003512:	e7b1      	b.n	8003478 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	68ab      	ldr	r3, [r5, #8]
 8003516:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003518:	4013      	ands	r3, r2
 800351a:	6922      	ldr	r2, [r4, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	60ab      	str	r3, [r5, #8]
 8003520:	e786      	b.n	8003430 <HAL_RCC_ClockConfig+0x4c>
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	08007924 	.word	0x08007924
 8003530:	20000000 	.word	0x20000000
 8003534:	20000008 	.word	0x20000008
 8003538:	00001388 	.word	0x00001388
 800353c:	ffff84ff 	.word	0xffff84ff
 8003540:	fffff0ff 	.word	0xfffff0ff
 8003544:	ffff8fff 	.word	0xffff8fff

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800354a:	4907      	ldr	r1, [pc, #28]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800354e:	4a07      	ldr	r2, [pc, #28]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003550:	045b      	lsls	r3, r3, #17
 8003552:	0f5b      	lsrs	r3, r3, #29
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	585b      	ldr	r3, [r3, r1]
 8003558:	211f      	movs	r1, #31
 800355a:	6810      	ldr	r0, [r2, #0]
 800355c:	400b      	ands	r3, r1
 800355e:	40d8      	lsrs	r0, r3
}
 8003560:	4770      	bx	lr
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	40021000 	.word	0x40021000
 8003568:	08007904 	.word	0x08007904
 800356c:	20000000 	.word	0x20000000

08003570 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	6803      	ldr	r3, [r0, #0]
{
 8003572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003574:	0005      	movs	r5, r0
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003576:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003578:	039b      	lsls	r3, r3, #14
 800357a:	d523      	bpl.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x54>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	4c39      	ldr	r4, [pc, #228]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003580:	0552      	lsls	r2, r2, #21
 8003582:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8003584:	0007      	movs	r7, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4213      	tst	r3, r2
 8003588:	d107      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      pwrclkchanged = SET;
 800358c:	3701      	adds	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	4313      	orrs	r3, r2
 8003590:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003592:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003594:	4013      	ands	r3, r2
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	9b01      	ldr	r3, [sp, #4]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800359a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800359c:	22c0      	movs	r2, #192	@ 0xc0
 800359e:	0008      	movs	r0, r1
 80035a0:	0092      	lsls	r2, r2, #2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035a2:	69ab      	ldr	r3, [r5, #24]
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80035a4:	4010      	ands	r0, r2
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035a6:	4211      	tst	r1, r2
 80035a8:	d13b      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035aa:	2000      	movs	r0, #0
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80035ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	69aa      	ldr	r2, [r5, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b8:	2f01      	cmp	r7, #1
 80035ba:	d103      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80035be:	4a2b      	ldr	r2, [pc, #172]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c4:	682a      	ldr	r2, [r5, #0]
 80035c6:	07d3      	lsls	r3, r2, #31
 80035c8:	d506      	bpl.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ca:	2403      	movs	r4, #3
 80035cc:	4925      	ldr	r1, [pc, #148]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80035ce:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80035d0:	43a3      	bics	r3, r4
 80035d2:	68ac      	ldr	r4, [r5, #8]
 80035d4:	4323      	orrs	r3, r4
 80035d6:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d8:	0653      	lsls	r3, r2, #25
 80035da:	d506      	bpl.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035dc:	4921      	ldr	r1, [pc, #132]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80035de:	4c24      	ldr	r4, [pc, #144]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80035e0:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80035e2:	4023      	ands	r3, r4
 80035e4:	68ec      	ldr	r4, [r5, #12]
 80035e6:	4323      	orrs	r3, r4
 80035e8:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ea:	0453      	lsls	r3, r2, #17
 80035ec:	d506      	bpl.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ee:	491d      	ldr	r1, [pc, #116]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80035f0:	696c      	ldr	r4, [r5, #20]
 80035f2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	4323      	orrs	r3, r4
 80035fa:	654b      	str	r3, [r1, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80035fc:	0513      	lsls	r3, r2, #20
 80035fe:	d506      	bpl.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003600:	4918      	ldr	r1, [pc, #96]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003602:	4c1c      	ldr	r4, [pc, #112]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8003604:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8003606:	4023      	ands	r3, r4
 8003608:	692c      	ldr	r4, [r5, #16]
 800360a:	4323      	orrs	r3, r4
 800360c:	654b      	str	r3, [r1, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800360e:	2a00      	cmp	r2, #0
 8003610:	da06      	bge.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003612:	21e0      	movs	r1, #224	@ 0xe0
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	438b      	bics	r3, r1
 800361a:	6869      	ldr	r1, [r5, #4]
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8003620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003622:	4298      	cmp	r0, r3
 8003624:	d00c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003626:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003628:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800362c:	4013      	ands	r3, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	2280      	movs	r2, #128	@ 0x80
 8003630:	0252      	lsls	r2, r2, #9
 8003632:	430a      	orrs	r2, r1
 8003634:	65e2      	str	r2, [r4, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003638:	490f      	ldr	r1, [pc, #60]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800363a:	400a      	ands	r2, r1
 800363c:	65e2      	str	r2, [r4, #92]	@ 0x5c
      RCC->CSR1 = tmpregister;
 800363e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003640:	07db      	lsls	r3, r3, #31
 8003642:	d5b2      	bpl.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      tickstart = HAL_GetTick();
 8003644:	f7ff fb56 	bl	8002cf4 <HAL_GetTick>
 8003648:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800364a:	2202      	movs	r2, #2
 800364c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800364e:	4213      	tst	r3, r2
 8003650:	d1ab      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7ff fb4f 	bl	8002cf4 <HAL_GetTick>
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	4298      	cmp	r0, r3
 800365c:	d9f5      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800365e:	2003      	movs	r0, #3
 8003660:	e7aa      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	40021000 	.word	0x40021000
 8003668:	fffffcff 	.word	0xfffffcff
 800366c:	efffffff 	.word	0xefffffff
 8003670:	ffffcfff 	.word	0xffffcfff
 8003674:	ffff3fff 	.word	0xffff3fff
 8003678:	fffeffff 	.word	0xfffeffff
 800367c:	00001388 	.word	0x00001388

08003680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003680:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003682:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003686:	2201      	movs	r2, #1
 8003688:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800368c:	6801      	ldr	r1, [r0, #0]
 800368e:	4d13      	ldr	r5, [pc, #76]	@ (80036dc <UART_EndRxTransfer+0x5c>)
 8003690:	680b      	ldr	r3, [r1, #0]
 8003692:	402b      	ands	r3, r5
 8003694:	600b      	str	r3, [r1, #0]
 8003696:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800369a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036a2:	6802      	ldr	r2, [r0, #0]
 80036a4:	4c0e      	ldr	r4, [pc, #56]	@ (80036e0 <UART_EndRxTransfer+0x60>)
 80036a6:	6893      	ldr	r3, [r2, #8]
 80036a8:	4023      	ands	r3, r4
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10a      	bne.n	80036cc <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036be:	2410      	movs	r4, #16
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	43a3      	bics	r3, r4
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	0003      	movs	r3, r0
 80036ce:	2220      	movs	r2, #32
 80036d0:	338c      	adds	r3, #140	@ 0x8c
 80036d2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	2300      	movs	r3, #0
 80036d6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036d8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80036da:	bd30      	pop	{r4, r5, pc}
 80036dc:	fffffedf 	.word	0xfffffedf
 80036e0:	effffffe 	.word	0xeffffffe

080036e4 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 80036e4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	2201      	movs	r2, #1
 80036ec:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80036f0:	2580      	movs	r5, #128	@ 0x80
 80036f2:	6801      	ldr	r1, [r0, #0]
 80036f4:	680b      	ldr	r3, [r1, #0]
 80036f6:	43ab      	bics	r3, r5
 80036f8:	600b      	str	r3, [r1, #0]
 80036fa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003706:	2340      	movs	r3, #64	@ 0x40
 8003708:	6802      	ldr	r2, [r0, #0]
 800370a:	6810      	ldr	r0, [r2, #0]
 800370c:	4303      	orrs	r3, r0
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003714:	bd30      	pop	{r4, r5, pc}

08003716 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003716:	0003      	movs	r3, r0
 8003718:	3388      	adds	r3, #136	@ 0x88
 800371a:	681b      	ldr	r3, [r3, #0]
{
 800371c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800371e:	2b21      	cmp	r3, #33	@ 0x21
 8003720:	d106      	bne.n	8003730 <UART_TxISR_8BIT+0x1a>
    if (huart->TxXferCount == 0U)
 8003722:	0002      	movs	r2, r0
 8003724:	3256      	adds	r2, #86	@ 0x56
 8003726:	8813      	ldrh	r3, [r2, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <UART_TxISR_8BIT+0x1c>
 800372c:	f7ff ffda 	bl	80036e4 <UART_TxISR_16BIT.part.0>
}
 8003730:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003732:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003734:	6801      	ldr	r1, [r0, #0]
 8003736:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 8003738:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800373a:	628c      	str	r4, [r1, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800373c:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 800373e:	8813      	ldrh	r3, [r2, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]
}
 8003746:	e7f3      	b.n	8003730 <UART_TxISR_8BIT+0x1a>

08003748 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003748:	0003      	movs	r3, r0
 800374a:	3388      	adds	r3, #136	@ 0x88
 800374c:	681b      	ldr	r3, [r3, #0]
{
 800374e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003750:	2b21      	cmp	r3, #33	@ 0x21
 8003752:	d106      	bne.n	8003762 <UART_TxISR_16BIT+0x1a>
  {
    if (huart->TxXferCount == 0U)
 8003754:	0001      	movs	r1, r0
 8003756:	3156      	adds	r1, #86	@ 0x56
 8003758:	880b      	ldrh	r3, [r1, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <UART_TxISR_16BIT+0x1c>
 800375e:	f7ff ffc1 	bl	80036e4 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003762:	bd10      	pop	{r4, pc}
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003764:	6d02      	ldr	r2, [r0, #80]	@ 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003766:	6804      	ldr	r4, [r0, #0]
 8003768:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 800376a:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800376c:	05db      	lsls	r3, r3, #23
 800376e:	0ddb      	lsrs	r3, r3, #23
 8003770:	62a3      	str	r3, [r4, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003772:	6502      	str	r2, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8003774:	880b      	ldrh	r3, [r1, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	b29b      	uxth	r3, r3
 800377a:	800b      	strh	r3, [r1, #0]
}
 800377c:	e7f1      	b.n	8003762 <UART_TxISR_16BIT+0x1a>
	...

08003780 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003780:	0003      	movs	r3, r0
 8003782:	3388      	adds	r3, #136	@ 0x88
 8003784:	681b      	ldr	r3, [r3, #0]
{
 8003786:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003788:	2b21      	cmp	r3, #33	@ 0x21
 800378a:	d121      	bne.n	80037d0 <UART_TxISR_8BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800378c:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 800378e:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003790:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003792:	336a      	adds	r3, #106	@ 0x6a
 8003794:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 8003796:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003798:	2b00      	cmp	r3, #0
 800379a:	d019      	beq.n	80037d0 <UART_TxISR_8BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 800379c:	880a      	ldrh	r2, [r1, #0]
 800379e:	2a00      	cmp	r2, #0
 80037a0:	d117      	bne.n	80037d2 <UART_TxISR_8BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a6:	3201      	adds	r2, #1
 80037a8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80037ac:	6801      	ldr	r1, [r0, #0]
 80037ae:	4d11      	ldr	r5, [pc, #68]	@ (80037f4 <UART_TxISR_8BIT_FIFOEN+0x74>)
 80037b0:	688b      	ldr	r3, [r1, #8]
 80037b2:	402b      	ands	r3, r5
 80037b4:	608b      	str	r3, [r1, #8]
 80037b6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c2:	2340      	movs	r3, #64	@ 0x40
 80037c4:	6802      	ldr	r2, [r0, #0]
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	4303      	orrs	r3, r0
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80037d2:	6805      	ldr	r5, [r0, #0]
 80037d4:	69ea      	ldr	r2, [r5, #28]
 80037d6:	4222      	tst	r2, r4
 80037d8:	d008      	beq.n	80037ec <UART_TxISR_8BIT_FIFOEN+0x6c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037da:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80037dc:	7816      	ldrb	r6, [r2, #0]
        huart->pTxBuffPtr++;
 80037de:	3201      	adds	r2, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037e0:	62ae      	str	r6, [r5, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80037e2:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 80037e4:	880a      	ldrh	r2, [r1, #0]
 80037e6:	3a01      	subs	r2, #1
 80037e8:	b292      	uxth	r2, r2
 80037ea:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	e7d2      	b.n	8003798 <UART_TxISR_8BIT_FIFOEN+0x18>
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	ff7fffff 	.word	0xff7fffff

080037f8 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037f8:	0003      	movs	r3, r0
 80037fa:	3388      	adds	r3, #136	@ 0x88
 80037fc:	681b      	ldr	r3, [r3, #0]
{
 80037fe:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003800:	2b21      	cmp	r3, #33	@ 0x21
 8003802:	d121      	bne.n	8003848 <UART_TxISR_16BIT_FIFOEN+0x50>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003804:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8003806:	0001      	movs	r1, r0
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003808:	2480      	movs	r4, #128	@ 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800380a:	336a      	adds	r3, #106	@ 0x6a
 800380c:	881b      	ldrh	r3, [r3, #0]
      if (huart->TxXferCount == 0U)
 800380e:	3156      	adds	r1, #86	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003810:	2b00      	cmp	r3, #0
 8003812:	d019      	beq.n	8003848 <UART_TxISR_16BIT_FIFOEN+0x50>
      if (huart->TxXferCount == 0U)
 8003814:	880a      	ldrh	r2, [r1, #0]
 8003816:	2a00      	cmp	r2, #0
 8003818:	d117      	bne.n	800384a <UART_TxISR_16BIT_FIFOEN+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800381a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	3201      	adds	r2, #1
 8003820:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003824:	6801      	ldr	r1, [r0, #0]
 8003826:	4d12      	ldr	r5, [pc, #72]	@ (8003870 <UART_TxISR_16BIT_FIFOEN+0x78>)
 8003828:	688b      	ldr	r3, [r1, #8]
 800382a:	402b      	ands	r3, r5
 800382c:	608b      	str	r3, [r1, #8]
 800382e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003832:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800383a:	2340      	movs	r3, #64	@ 0x40
 800383c:	6802      	ldr	r2, [r0, #0]
 800383e:	6810      	ldr	r0, [r2, #0]
 8003840:	4303      	orrs	r3, r0
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	f381 8810 	msr	PRIMASK, r1
      {
        /* Nothing to do */
      }
    }
  }
}
 8003848:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800384a:	6806      	ldr	r6, [r0, #0]
 800384c:	69f2      	ldr	r2, [r6, #28]
 800384e:	4222      	tst	r2, r4
 8003850:	d00a      	beq.n	8003868 <UART_TxISR_16BIT_FIFOEN+0x70>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003852:	6d05      	ldr	r5, [r0, #80]	@ 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003854:	882a      	ldrh	r2, [r5, #0]
        huart->pTxBuffPtr += 2U;
 8003856:	3502      	adds	r5, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003858:	05d2      	lsls	r2, r2, #23
 800385a:	0dd2      	lsrs	r2, r2, #23
 800385c:	62b2      	str	r2, [r6, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800385e:	6505      	str	r5, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 8003860:	880a      	ldrh	r2, [r1, #0]
 8003862:	3a01      	subs	r2, #1
 8003864:	b292      	uxth	r2, r2
 8003866:	800a      	strh	r2, [r1, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003868:	3b01      	subs	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	e7d0      	b.n	8003810 <UART_TxISR_16BIT_FIFOEN+0x18>
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	ff7fffff 	.word	0xff7fffff

08003874 <HAL_UART_DeInit>:
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	0005      	movs	r5, r0
    return HAL_ERROR;
 8003878:	2001      	movs	r0, #1
  if (huart == NULL)
 800387a:	2d00      	cmp	r5, #0
 800387c:	d019      	beq.n	80038b2 <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 800387e:	002e      	movs	r6, r5
 8003880:	2324      	movs	r3, #36	@ 0x24
  huart->Instance->CR1 = 0x0U;
 8003882:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8003884:	3688      	adds	r6, #136	@ 0x88
 8003886:	6033      	str	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4382      	bics	r2, r0
 800388e:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8003890:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8003892:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003894:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003896:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8003898:	f7ff f920 	bl	8002adc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	002b      	movs	r3, r5
  return HAL_OK;
 800389e:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	3390      	adds	r3, #144	@ 0x90
 80038a2:	601c      	str	r4, [r3, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 80038a4:	3b04      	subs	r3, #4
  huart->gState = HAL_UART_STATE_RESET;
 80038a6:	6034      	str	r4, [r6, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 80038a8:	601c      	str	r4, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80038ae:	3584      	adds	r5, #132	@ 0x84
 80038b0:	702c      	strb	r4, [r5, #0]
}
 80038b2:	bd70      	pop	{r4, r5, r6, pc}

080038b4 <HAL_UART_Transmit_IT>:
{
 80038b4:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80038b6:	0005      	movs	r5, r0
 80038b8:	3588      	adds	r5, #136	@ 0x88
 80038ba:	682c      	ldr	r4, [r5, #0]
{
 80038bc:	0003      	movs	r3, r0
    return HAL_BUSY;
 80038be:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80038c0:	2c20      	cmp	r4, #32
 80038c2:	d137      	bne.n	8003934 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 80038c4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80038c6:	2900      	cmp	r1, #0
 80038c8:	d034      	beq.n	8003934 <HAL_UART_Transmit_IT+0x80>
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d032      	beq.n	8003934 <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ce:	2080      	movs	r0, #128	@ 0x80
 80038d0:	689c      	ldr	r4, [r3, #8]
 80038d2:	0140      	lsls	r0, r0, #5
 80038d4:	4284      	cmp	r4, r0
 80038d6:	d105      	bne.n	80038e4 <HAL_UART_Transmit_IT+0x30>
 80038d8:	6918      	ldr	r0, [r3, #16]
 80038da:	2800      	cmp	r0, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_UART_Transmit_IT+0x30>
      return HAL_ERROR;
 80038de:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 80038e0:	4201      	tst	r1, r0
 80038e2:	d127      	bne.n	8003934 <HAL_UART_Transmit_IT+0x80>
    huart->pTxBuffPtr  = pData;
 80038e4:	6519      	str	r1, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80038e6:	0019      	movs	r1, r3
 80038e8:	3154      	adds	r1, #84	@ 0x54
 80038ea:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 80038ec:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	001a      	movs	r2, r3
 80038f0:	2100      	movs	r1, #0
 80038f2:	3290      	adds	r2, #144	@ 0x90
 80038f4:	6011      	str	r1, [r2, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f6:	2221      	movs	r2, #33	@ 0x21
 80038f8:	2180      	movs	r1, #128	@ 0x80
 80038fa:	602a      	str	r2, [r5, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003900:	0592      	lsls	r2, r2, #22
 8003902:	0149      	lsls	r1, r1, #5
 8003904:	4290      	cmp	r0, r2
 8003906:	d116      	bne.n	8003936 <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <HAL_UART_Transmit_IT+0xa8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390a:	428c      	cmp	r4, r1
 800390c:	d103      	bne.n	8003916 <HAL_UART_Transmit_IT+0x62>
 800390e:	6919      	ldr	r1, [r3, #16]
 8003910:	2900      	cmp	r1, #0
 8003912:	d100      	bne.n	8003916 <HAL_UART_Transmit_IT+0x62>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003914:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <HAL_UART_Transmit_IT+0xac>)
 8003916:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003918:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391c:	2201      	movs	r2, #1
 800391e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	6890      	ldr	r0, [r2, #8]
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	4303      	orrs	r3, r0
 800392c:	6093      	str	r3, [r2, #8]
 800392e:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8003932:	2000      	movs	r0, #0
}
 8003934:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 8003936:	4a0b      	ldr	r2, [pc, #44]	@ (8003964 <HAL_UART_Transmit_IT+0xb0>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003938:	428c      	cmp	r4, r1
 800393a:	d103      	bne.n	8003944 <HAL_UART_Transmit_IT+0x90>
 800393c:	6919      	ldr	r1, [r3, #16]
 800393e:	2900      	cmp	r1, #0
 8003940:	d100      	bne.n	8003944 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_16BIT;
 8003942:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_UART_Transmit_IT+0xb4>)
 8003944:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003946:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	2201      	movs	r2, #1
 800394c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2380      	movs	r3, #128	@ 0x80
 8003954:	6810      	ldr	r0, [r2, #0]
 8003956:	4303      	orrs	r3, r0
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e7e8      	b.n	800392e <HAL_UART_Transmit_IT+0x7a>
 800395c:	08003781 	.word	0x08003781
 8003960:	080037f9 	.word	0x080037f9
 8003964:	08003717 	.word	0x08003717
 8003968:	08003749 	.word	0x08003749

0800396c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800396c:	4770      	bx	lr

0800396e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800396e:	4770      	bx	lr

08003970 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003970:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	0002      	movs	r2, r0
{
 8003976:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003978:	325e      	adds	r2, #94	@ 0x5e
 800397a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800397c:	3a08      	subs	r2, #8
 800397e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8003980:	f7ff fff5 	bl	800396e <HAL_UART_ErrorCallback>
}
 8003984:	bd10      	pop	{r4, pc}

08003986 <HAL_UARTEx_RxEventCallback>:
}
 8003986:	4770      	bx	lr

08003988 <HAL_UART_IRQHandler>:
{
 8003988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800398a:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800398c:	4dc1      	ldr	r5, [pc, #772]	@ (8003c94 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800398e:	69cb      	ldr	r3, [r1, #28]
{
 8003990:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003992:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003994:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8003996:	422b      	tst	r3, r5
 8003998:	d110      	bne.n	80039bc <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800399a:	2520      	movs	r5, #32
 800399c:	422b      	tst	r3, r5
 800399e:	d100      	bne.n	80039a2 <HAL_UART_IRQHandler+0x1a>
 80039a0:	e09b      	b.n	8003ada <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039a2:	2680      	movs	r6, #128	@ 0x80
 80039a4:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039a6:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039a8:	4006      	ands	r6, r0
 80039aa:	4335      	orrs	r5, r6
 80039ac:	d100      	bne.n	80039b0 <HAL_UART_IRQHandler+0x28>
 80039ae:	e094      	b.n	8003ada <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 80039b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
      huart->TxISR(huart);
 80039b2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d000      	beq.n	80039ba <HAL_UART_IRQHandler+0x32>
 80039b8:	e085      	b.n	8003ac6 <HAL_UART_IRQHandler+0x13e>
 80039ba:	e085      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039bc:	4db6      	ldr	r5, [pc, #728]	@ (8003c98 <HAL_UART_IRQHandler+0x310>)
 80039be:	4005      	ands	r5, r0
 80039c0:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039c2:	4db6      	ldr	r5, [pc, #728]	@ (8003c9c <HAL_UART_IRQHandler+0x314>)
 80039c4:	9e00      	ldr	r6, [sp, #0]
 80039c6:	4015      	ands	r5, r2
 80039c8:	4335      	orrs	r5, r6
 80039ca:	d100      	bne.n	80039ce <HAL_UART_IRQHandler+0x46>
 80039cc:	e085      	b.n	8003ada <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ce:	0025      	movs	r5, r4
 80039d0:	2601      	movs	r6, #1
 80039d2:	3590      	adds	r5, #144	@ 0x90
 80039d4:	4233      	tst	r3, r6
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_IRQHandler+0x5c>
 80039d8:	05d7      	lsls	r7, r2, #23
 80039da:	d503      	bpl.n	80039e4 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039dc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039de:	682f      	ldr	r7, [r5, #0]
 80039e0:	433e      	orrs	r6, r7
 80039e2:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039e4:	2602      	movs	r6, #2
 80039e6:	4233      	tst	r3, r6
 80039e8:	d00c      	beq.n	8003a04 <HAL_UART_IRQHandler+0x7c>
 80039ea:	07c7      	lsls	r7, r0, #31
 80039ec:	d50a      	bpl.n	8003a04 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ee:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039f0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f2:	3790      	adds	r7, #144	@ 0x90
 80039f4:	683e      	ldr	r6, [r7, #0]
 80039f6:	9701      	str	r7, [sp, #4]
 80039f8:	46b4      	mov	ip, r6
 80039fa:	2604      	movs	r6, #4
 80039fc:	4667      	mov	r7, ip
 80039fe:	433e      	orrs	r6, r7
 8003a00:	9f01      	ldr	r7, [sp, #4]
 8003a02:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a04:	2604      	movs	r6, #4
 8003a06:	4233      	tst	r3, r6
 8003a08:	d00c      	beq.n	8003a24 <HAL_UART_IRQHandler+0x9c>
 8003a0a:	07c7      	lsls	r7, r0, #31
 8003a0c:	d50a      	bpl.n	8003a24 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0e:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a10:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	3790      	adds	r7, #144	@ 0x90
 8003a14:	683e      	ldr	r6, [r7, #0]
 8003a16:	9701      	str	r7, [sp, #4]
 8003a18:	46b4      	mov	ip, r6
 8003a1a:	2602      	movs	r6, #2
 8003a1c:	4667      	mov	r7, ip
 8003a1e:	433e      	orrs	r6, r7
 8003a20:	9f01      	ldr	r7, [sp, #4]
 8003a22:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a24:	2608      	movs	r6, #8
 8003a26:	46b4      	mov	ip, r6
 8003a28:	4233      	tst	r3, r6
 8003a2a:	d009      	beq.n	8003a40 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a2c:	2720      	movs	r7, #32
 8003a2e:	9e00      	ldr	r6, [sp, #0]
 8003a30:	4017      	ands	r7, r2
 8003a32:	4337      	orrs	r7, r6
 8003a34:	d004      	beq.n	8003a40 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a36:	4666      	mov	r6, ip
 8003a38:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3a:	682f      	ldr	r7, [r5, #0]
 8003a3c:	433e      	orrs	r6, r7
 8003a3e:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a40:	2680      	movs	r6, #128	@ 0x80
 8003a42:	0136      	lsls	r6, r6, #4
 8003a44:	4233      	tst	r3, r6
 8003a46:	d006      	beq.n	8003a56 <HAL_UART_IRQHandler+0xce>
 8003a48:	0157      	lsls	r7, r2, #5
 8003a4a:	d504      	bpl.n	8003a56 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a4c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a4e:	2120      	movs	r1, #32
 8003a50:	682e      	ldr	r6, [r5, #0]
 8003a52:	4331      	orrs	r1, r6
 8003a54:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a56:	6829      	ldr	r1, [r5, #0]
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d035      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	420b      	tst	r3, r1
 8003a60:	d00a      	beq.n	8003a78 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a66:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a68:	4003      	ands	r3, r0
 8003a6a:	4319      	orrs	r1, r3
 8003a6c:	d004      	beq.n	8003a78 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 8003a6e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8003a74:	0020      	movs	r0, r4
 8003a76:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a78:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003a7a:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a7c:	2740      	movs	r7, #64	@ 0x40
 8003a7e:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a80:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a82:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a84:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003a86:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a88:	431e      	orrs	r6, r3
 8003a8a:	d022      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8003a8c:	f7ff fdf8 	bl	8003680 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	423b      	tst	r3, r7
 8003a96:	d018      	beq.n	8003aca <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	0025      	movs	r5, r4
 8003aa4:	cd04      	ldmia	r5!, {r2}
 8003aa6:	6893      	ldr	r3, [r2, #8]
 8003aa8:	43bb      	bics	r3, r7
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003ab0:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca0 <HAL_UART_IRQHandler+0x318>)
 8003ab8:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aba:	f7ff f9bb 	bl	8002e34 <HAL_DMA_Abort_IT>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ac2:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8003ac4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003ac6:	4798      	blx	r3
}
 8003ac8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003aca:	0020      	movs	r0, r4
 8003acc:	f7ff ff4f 	bl	800396e <HAL_UART_ErrorCallback>
 8003ad0:	e7fa      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 8003ad2:	f7ff ff4c 	bl	800396e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad6:	602e      	str	r6, [r5, #0]
 8003ad8:	e7f6      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ada:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8003adc:	2d01      	cmp	r5, #1
 8003ade:	d000      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x15a>
 8003ae0:	e09f      	b.n	8003c22 <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ae2:	2610      	movs	r6, #16
 8003ae4:	4233      	tst	r3, r6
 8003ae6:	d100      	bne.n	8003aea <HAL_UART_IRQHandler+0x162>
 8003ae8:	e09b      	b.n	8003c22 <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aea:	4232      	tst	r2, r6
 8003aec:	d100      	bne.n	8003af0 <HAL_UART_IRQHandler+0x168>
 8003aee:	e098      	b.n	8003c22 <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af0:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af2:	6889      	ldr	r1, [r1, #8]
 8003af4:	2340      	movs	r3, #64	@ 0x40
 8003af6:	000a      	movs	r2, r1
 8003af8:	401a      	ands	r2, r3
 8003afa:	4219      	tst	r1, r3
 8003afc:	d057      	beq.n	8003bae <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afe:	1d21      	adds	r1, r4, #4
 8003b00:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 8003b02:	6810      	ldr	r0, [r2, #0]
 8003b04:	6842      	ldr	r2, [r0, #4]
 8003b06:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003b08:	2a00      	cmp	r2, #0
 8003b0a:	d0dd      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b0c:	0027      	movs	r7, r4
 8003b0e:	375c      	adds	r7, #92	@ 0x5c
 8003b10:	883f      	ldrh	r7, [r7, #0]
 8003b12:	4297      	cmp	r7, r2
 8003b14:	d9d8      	bls.n	8003ac8 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 8003b16:	0027      	movs	r7, r4
 8003b18:	375e      	adds	r7, #94	@ 0x5e
 8003b1a:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b1c:	6802      	ldr	r2, [r0, #0]
 8003b1e:	2020      	movs	r0, #32
 8003b20:	4684      	mov	ip, r0
 8003b22:	4010      	ands	r0, r2
 8003b24:	9000      	str	r0, [sp, #0]
 8003b26:	4660      	mov	r0, ip
 8003b28:	4202      	tst	r2, r0
 8003b2a:	d132      	bne.n	8003b92 <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b2c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	4e5b      	ldr	r6, [pc, #364]	@ (8003ca4 <HAL_UART_IRQHandler+0x31c>)
 8003b38:	6802      	ldr	r2, [r0, #0]
 8003b3a:	4032      	ands	r2, r6
 8003b3c:	6002      	str	r2, [r0, #0]
 8003b3e:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b42:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	6882      	ldr	r2, [r0, #8]
 8003b4e:	43aa      	bics	r2, r5
 8003b50:	6082      	str	r2, [r0, #8]
 8003b52:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b56:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	6882      	ldr	r2, [r0, #8]
 8003b62:	439a      	bics	r2, r3
 8003b64:	6082      	str	r2, [r0, #8]
 8003b66:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	0023      	movs	r3, r4
 8003b6c:	4662      	mov	r2, ip
 8003b6e:	338c      	adds	r3, #140	@ 0x8c
 8003b70:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b76:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	350f      	adds	r5, #15
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	43ab      	bics	r3, r5
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8c:	6fc8      	ldr	r0, [r1, #124]	@ 0x7c
 8003b8e:	f7ff f917 	bl	8002dc0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b92:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b94:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b96:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b98:	0023      	movs	r3, r4
 8003b9a:	325c      	adds	r2, #92	@ 0x5c
 8003b9c:	335e      	adds	r3, #94	@ 0x5e
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	8811      	ldrh	r1, [r2, #0]
 8003ba2:	1ac9      	subs	r1, r1, r3
 8003ba4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	f7ff feed 	bl	8003986 <HAL_UARTEx_RxEventCallback>
 8003bac:	e78c      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bae:	0023      	movs	r3, r4
 8003bb0:	0020      	movs	r0, r4
 8003bb2:	335c      	adds	r3, #92	@ 0x5c
 8003bb4:	305e      	adds	r0, #94	@ 0x5e
 8003bb6:	8819      	ldrh	r1, [r3, #0]
 8003bb8:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 8003bba:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bbc:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d100      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x23c>
 8003bc2:	e781      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc4:	1ac9      	subs	r1, r1, r3
 8003bc6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d100      	bne.n	8003bce <HAL_UART_IRQHandler+0x246>
 8003bcc:	e77c      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bce:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	4e33      	ldr	r6, [pc, #204]	@ (8003ca8 <HAL_UART_IRQHandler+0x320>)
 8003bda:	6803      	ldr	r3, [r0, #0]
 8003bdc:	4033      	ands	r3, r6
 8003bde:	6003      	str	r3, [r0, #0]
 8003be0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003be4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	4e2f      	ldr	r6, [pc, #188]	@ (8003cac <HAL_UART_IRQHandler+0x324>)
 8003bf0:	6883      	ldr	r3, [r0, #8]
 8003bf2:	4033      	ands	r3, r6
 8003bf4:	6083      	str	r3, [r0, #8]
 8003bf6:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	0023      	movs	r3, r4
 8003bfc:	2020      	movs	r0, #32
 8003bfe:	338c      	adds	r3, #140	@ 0x8c
 8003c00:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c02:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003c04:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c06:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0e:	2510      	movs	r5, #16
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	43ab      	bics	r3, r5
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	6723      	str	r3, [r4, #112]	@ 0x70
 8003c20:	e7c1      	b.n	8003ba6 <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c22:	2580      	movs	r5, #128	@ 0x80
 8003c24:	036d      	lsls	r5, r5, #13
 8003c26:	422b      	tst	r3, r5
 8003c28:	d006      	beq.n	8003c38 <HAL_UART_IRQHandler+0x2b0>
 8003c2a:	0246      	lsls	r6, r0, #9
 8003c2c:	d504      	bpl.n	8003c38 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8003c2e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c30:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003c32:	f000 fdd9 	bl	80047e8 <HAL_UARTEx_WakeupCallback>
    return;
 8003c36:	e747      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	420b      	tst	r3, r1
 8003c3c:	d007      	beq.n	8003c4e <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c3e:	2580      	movs	r5, #128	@ 0x80
 8003c40:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c42:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c44:	4028      	ands	r0, r5
 8003c46:	4301      	orrs	r1, r0
 8003c48:	d001      	beq.n	8003c4e <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8003c4a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003c4c:	e6b1      	b.n	80039b2 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c4e:	2140      	movs	r1, #64	@ 0x40
 8003c50:	420b      	tst	r3, r1
 8003c52:	d016      	beq.n	8003c82 <HAL_UART_IRQHandler+0x2fa>
 8003c54:	420a      	tst	r2, r1
 8003c56:	d014      	beq.n	8003c82 <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c58:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	438b      	bics	r3, r1
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	0023      	movs	r3, r4
 8003c70:	2220      	movs	r2, #32
 8003c72:	3388      	adds	r3, #136	@ 0x88
 8003c74:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c76:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c78:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003c7a:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8003c7c:	f7fe fec8 	bl	8002a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c80:	e722      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c82:	0219      	lsls	r1, r3, #8
 8003c84:	d514      	bpl.n	8003cb0 <HAL_UART_IRQHandler+0x328>
 8003c86:	0051      	lsls	r1, r2, #1
 8003c88:	d512      	bpl.n	8003cb0 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	f000 fdae 	bl	80047ec <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003c90:	e71a      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	0000080f 	.word	0x0000080f
 8003c98:	10000001 	.word	0x10000001
 8003c9c:	04000120 	.word	0x04000120
 8003ca0:	08003971 	.word	0x08003971
 8003ca4:	fffffeff 	.word	0xfffffeff
 8003ca8:	fffffedf 	.word	0xfffffedf
 8003cac:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cb0:	01db      	lsls	r3, r3, #7
 8003cb2:	d400      	bmi.n	8003cb6 <HAL_UART_IRQHandler+0x32e>
 8003cb4:	e708      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	db00      	blt.n	8003cbc <HAL_UART_IRQHandler+0x334>
 8003cba:	e705      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cbc:	0020      	movs	r0, r4
 8003cbe:	f000 fd94 	bl	80047ea <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003cc2:	e701      	b.n	8003ac8 <HAL_UART_IRQHandler+0x140>

08003cc4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc4:	0001      	movs	r1, r0
{
 8003cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003cc8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cca:	318c      	adds	r1, #140	@ 0x8c
 8003ccc:	680c      	ldr	r4, [r1, #0]
  uint16_t uhMask = huart->Mask;
 8003cce:	3360      	adds	r3, #96	@ 0x60
 8003cd0:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cd2:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	2c22      	cmp	r4, #34	@ 0x22
 8003cd6:	d157      	bne.n	8003d88 <UART_RxISR_8BIT+0xc4>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cda:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8003cdc:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003cde:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ce0:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8003ce2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003ce4:	325e      	adds	r2, #94	@ 0x5e
    huart->pRxBuffPtr++;
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003cf2:	8813      	ldrh	r3, [r2, #0]
 8003cf4:	b29c      	uxth	r4, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d142      	bne.n	8003d80 <UART_RxISR_8BIT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cfa:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d04:	6805      	ldr	r5, [r0, #0]
 8003d06:	4f23      	ldr	r7, [pc, #140]	@ (8003d94 <UART_RxISR_8BIT+0xd0>)
 8003d08:	682a      	ldr	r2, [r5, #0]
 8003d0a:	403a      	ands	r2, r7
 8003d0c:	602a      	str	r2, [r5, #0]
 8003d0e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d12:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	6805      	ldr	r5, [r0, #0]
 8003d1c:	68aa      	ldr	r2, [r5, #8]
 8003d1e:	439a      	bics	r2, r3
 8003d20:	60aa      	str	r2, [r5, #8]
 8003d22:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d26:	2220      	movs	r2, #32
 8003d28:	600a      	str	r2, [r1, #0]

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d2a:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	6704      	str	r4, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d2e:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003d30:	6744      	str	r4, [r0, #116]	@ 0x74
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d32:	0212      	lsls	r2, r2, #8
 8003d34:	d50a      	bpl.n	8003d4c <UART_RxISR_8BIT+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d3e:	6802      	ldr	r2, [r0, #0]
 8003d40:	4c15      	ldr	r4, [pc, #84]	@ (8003d98 <UART_RxISR_8BIT+0xd4>)
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	4023      	ands	r3, r4
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f381 8810 	msr	PRIMASK, r1
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d117      	bne.n	8003d82 <UART_RxISR_8BIT+0xbe>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	2200      	movs	r2, #0
 8003d54:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5e:	6801      	ldr	r1, [r0, #0]
 8003d60:	330f      	adds	r3, #15
 8003d62:	680a      	ldr	r2, [r1, #0]
 8003d64:	439a      	bics	r2, r3
 8003d66:	600a      	str	r2, [r1, #0]
 8003d68:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d6c:	6802      	ldr	r2, [r0, #0]
 8003d6e:	69d1      	ldr	r1, [r2, #28]
 8003d70:	4219      	tst	r1, r3
 8003d72:	d000      	beq.n	8003d76 <UART_RxISR_8BIT+0xb2>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d74:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d76:	0003      	movs	r3, r0
 8003d78:	335c      	adds	r3, #92	@ 0x5c
 8003d7a:	8819      	ldrh	r1, [r3, #0]
 8003d7c:	f7ff fe03 	bl	8003986 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003d82:	f7ff fdf3 	bl	800396c <HAL_UART_RxCpltCallback>
 8003d86:	e7fb      	b.n	8003d80 <UART_RxISR_8BIT+0xbc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d88:	2208      	movs	r2, #8
 8003d8a:	6999      	ldr	r1, [r3, #24]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	619a      	str	r2, [r3, #24]
}
 8003d90:	e7f6      	b.n	8003d80 <UART_RxISR_8BIT+0xbc>
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	fffffedf 	.word	0xfffffedf
 8003d98:	fbffffff 	.word	0xfbffffff

08003d9c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d9c:	0002      	movs	r2, r0
{
 8003d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003da0:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da2:	328c      	adds	r2, #140	@ 0x8c
 8003da4:	6811      	ldr	r1, [r2, #0]
  uint16_t uhMask = huart->Mask;
 8003da6:	3360      	adds	r3, #96	@ 0x60
 8003da8:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003daa:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dac:	2922      	cmp	r1, #34	@ 0x22
 8003dae:	d156      	bne.n	8003e5e <UART_RxISR_16BIT+0xc2>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003db0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003db2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8003db4:	4021      	ands	r1, r4
 8003db6:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003db8:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8003dba:	3302      	adds	r3, #2
 8003dbc:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8003dbe:	315e      	adds	r1, #94	@ 0x5e
 8003dc0:	880b      	ldrh	r3, [r1, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003dc8:	880b      	ldrh	r3, [r1, #0]
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d142      	bne.n	8003e56 <UART_RxISR_16BIT+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003dd0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dda:	6805      	ldr	r5, [r0, #0]
 8003ddc:	4f22      	ldr	r7, [pc, #136]	@ (8003e68 <UART_RxISR_16BIT+0xcc>)
 8003dde:	6829      	ldr	r1, [r5, #0]
 8003de0:	4039      	ands	r1, r7
 8003de2:	6029      	str	r1, [r5, #0]
 8003de4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003de8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df0:	6805      	ldr	r5, [r0, #0]
 8003df2:	68a9      	ldr	r1, [r5, #8]
 8003df4:	4399      	bics	r1, r3
 8003df6:	60a9      	str	r1, [r5, #8]
 8003df8:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	2120      	movs	r1, #32
 8003dfe:	6011      	str	r1, [r2, #0]

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e00:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e02:	6704      	str	r4, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e04:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 8003e06:	6744      	str	r4, [r0, #116]	@ 0x74
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e08:	0212      	lsls	r2, r2, #8
 8003e0a:	d50a      	bpl.n	8003e22 <UART_RxISR_16BIT+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e14:	6802      	ldr	r2, [r0, #0]
 8003e16:	4c15      	ldr	r4, [pc, #84]	@ (8003e6c <UART_RxISR_16BIT+0xd0>)
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	4023      	ands	r3, r4
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	f381 8810 	msr	PRIMASK, r1
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d117      	bne.n	8003e58 <UART_RxISR_16BIT+0xbc>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	2200      	movs	r2, #0
 8003e2a:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	6801      	ldr	r1, [r0, #0]
 8003e36:	330f      	adds	r3, #15
 8003e38:	680a      	ldr	r2, [r1, #0]
 8003e3a:	439a      	bics	r2, r3
 8003e3c:	600a      	str	r2, [r1, #0]
 8003e3e:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e42:	6802      	ldr	r2, [r0, #0]
 8003e44:	69d1      	ldr	r1, [r2, #28]
 8003e46:	4219      	tst	r1, r3
 8003e48:	d000      	beq.n	8003e4c <UART_RxISR_16BIT+0xb0>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	335c      	adds	r3, #92	@ 0x5c
 8003e50:	8819      	ldrh	r1, [r3, #0]
 8003e52:	f7ff fd98 	bl	8003986 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003e58:	f7ff fd88 	bl	800396c <HAL_UART_RxCpltCallback>
 8003e5c:	e7fb      	b.n	8003e56 <UART_RxISR_16BIT+0xba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e5e:	2208      	movs	r2, #8
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	e7f6      	b.n	8003e56 <UART_RxISR_16BIT+0xba>
 8003e68:	fffffedf 	.word	0xfffffedf
 8003e6c:	fbffffff 	.word	0xfbffffff

08003e70 <UART_RxISR_8BIT_FIFOEN>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 8003e70:	0003      	movs	r3, r0
{
 8003e72:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8003e74:	3360      	adds	r3, #96	@ 0x60
 8003e76:	881b      	ldrh	r3, [r3, #0]
{
 8003e78:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8003e7a:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e7c:	6803      	ldr	r3, [r0, #0]
{
 8003e7e:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e80:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	328c      	adds	r2, #140	@ 0x8c
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	2a22      	cmp	r2, #34	@ 0x22
 8003e92:	d000      	beq.n	8003e96 <UART_RxISR_8BIT_FIFOEN+0x26>
 8003e94:	e0c2      	b.n	800401c <UART_RxISR_8BIT_FIFOEN+0x1ac>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e96:	0003      	movs	r3, r0
 8003e98:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <UART_RxISR_8BIT_FIFOEN+0x36>
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	421d      	tst	r5, r3
 8003ea4:	d125      	bne.n	8003ef2 <UART_RxISR_8BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003ea6:	0023      	movs	r3, r4
 8003ea8:	335e      	adds	r3, #94	@ 0x5e
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01d      	beq.n	8003eee <UART_RxISR_8BIT_FIFOEN+0x7e>
 8003eb2:	0023      	movs	r3, r4
 8003eb4:	3368      	adds	r3, #104	@ 0x68
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d918      	bls.n	8003eee <UART_RxISR_8BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ebc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ec6:	6821      	ldr	r1, [r4, #0]
 8003ec8:	4d57      	ldr	r5, [pc, #348]	@ (8004028 <UART_RxISR_8BIT_FIFOEN+0x1b8>)
 8003eca:	688b      	ldr	r3, [r1, #8]
 8003ecc:	402b      	ands	r3, r5
 8003ece:	608b      	str	r3, [r1, #8]
 8003ed0:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003ed4:	4b55      	ldr	r3, [pc, #340]	@ (800402c <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8003ed6:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ed8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	6810      	ldr	r0, [r2, #0]
 8003ee6:	4303      	orrs	r3, r0
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eee:	b005      	add	sp, #20
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 8003ef2:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef4:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ef6:	9902      	ldr	r1, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003efa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003efc:	400b      	ands	r3, r1
 8003efe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8003f00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003f02:	365e      	adds	r6, #94	@ 0x5e
      huart->pRxBuffPtr++;
 8003f04:	3301      	adds	r3, #1
 8003f06:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003f08:	8833      	ldrh	r3, [r6, #0]
      isrflags = READ_REG(huart->Instance->ISR);
 8003f0a:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8033      	strh	r3, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f12:	2307      	movs	r3, #7
      isrflags = READ_REG(huart->Instance->ISR);
 8003f14:	69d5      	ldr	r5, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f16:	421d      	tst	r5, r3
 8003f18:	d02f      	beq.n	8003f7a <UART_RxISR_8BIT_FIFOEN+0x10a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f1a:	3b06      	subs	r3, #6
 8003f1c:	421d      	tst	r5, r3
 8003f1e:	d008      	beq.n	8003f32 <UART_RxISR_8BIT_FIFOEN+0xc2>
 8003f20:	9903      	ldr	r1, [sp, #12]
 8003f22:	05c9      	lsls	r1, r1, #23
 8003f24:	d505      	bpl.n	8003f32 <UART_RxISR_8BIT_FIFOEN+0xc2>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f26:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f28:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	3190      	adds	r1, #144	@ 0x90
 8003f2c:	6808      	ldr	r0, [r1, #0]
 8003f2e:	4303      	orrs	r3, r0
 8003f30:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f32:	2302      	movs	r3, #2
 8003f34:	421d      	tst	r5, r3
 8003f36:	d009      	beq.n	8003f4c <UART_RxISR_8BIT_FIFOEN+0xdc>
 8003f38:	9901      	ldr	r1, [sp, #4]
 8003f3a:	07c9      	lsls	r1, r1, #31
 8003f3c:	d506      	bpl.n	8003f4c <UART_RxISR_8BIT_FIFOEN+0xdc>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3e:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f40:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f42:	3190      	adds	r1, #144	@ 0x90
 8003f44:	6808      	ldr	r0, [r1, #0]
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	4303      	orrs	r3, r0
 8003f4a:	600b      	str	r3, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	421d      	tst	r5, r3
 8003f50:	d009      	beq.n	8003f66 <UART_RxISR_8BIT_FIFOEN+0xf6>
 8003f52:	9901      	ldr	r1, [sp, #4]
 8003f54:	07c9      	lsls	r1, r1, #31
 8003f56:	d506      	bpl.n	8003f66 <UART_RxISR_8BIT_FIFOEN+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f58:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5a:	0022      	movs	r2, r4
 8003f5c:	3290      	adds	r2, #144	@ 0x90
 8003f5e:	6811      	ldr	r1, [r2, #0]
 8003f60:	3b02      	subs	r3, #2
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f66:	0027      	movs	r7, r4
 8003f68:	3790      	adds	r7, #144	@ 0x90
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <UART_RxISR_8BIT_FIFOEN+0x10a>
          HAL_UART_ErrorCallback(huart);
 8003f70:	0020      	movs	r0, r4
 8003f72:	f7ff fcfc 	bl	800396e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8003f7a:	8833      	ldrh	r3, [r6, #0]
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d000      	beq.n	8003f84 <UART_RxISR_8BIT_FIFOEN+0x114>
 8003f82:	e78d      	b.n	8003ea0 <UART_RxISR_8BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f84:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	4f27      	ldr	r7, [pc, #156]	@ (8004030 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8003f92:	6802      	ldr	r2, [r0, #0]
 8003f94:	403a      	ands	r2, r7
 8003f96:	6002      	str	r2, [r0, #0]
 8003f98:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f9c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	4f23      	ldr	r7, [pc, #140]	@ (8004034 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8003fa8:	6882      	ldr	r2, [r0, #8]
 8003faa:	403a      	ands	r2, r7
 8003fac:	6082      	str	r2, [r0, #8]
 8003fae:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	0022      	movs	r2, r4
 8003fb4:	2020      	movs	r0, #32
 8003fb6:	328c      	adds	r2, #140	@ 0x8c
 8003fb8:	6010      	str	r0, [r2, #0]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fba:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbc:	6721      	str	r1, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fbe:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8003fc0:	6761      	str	r1, [r4, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fc2:	0212      	lsls	r2, r2, #8
 8003fc4:	d50a      	bpl.n	8003fdc <UART_RxISR_8BIT_FIFOEN+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	4819      	ldr	r0, [pc, #100]	@ (8004038 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	4003      	ands	r3, r0
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d118      	bne.n	8004014 <UART_RxISR_8BIT_FIFOEN+0x1a4>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fe6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fee:	6821      	ldr	r1, [r4, #0]
 8003ff0:	330f      	adds	r3, #15
 8003ff2:	680a      	ldr	r2, [r1, #0]
 8003ff4:	439a      	bics	r2, r3
 8003ff6:	600a      	str	r2, [r1, #0]
 8003ff8:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	69d1      	ldr	r1, [r2, #28]
 8004000:	4219      	tst	r1, r3
 8004002:	d000      	beq.n	8004006 <UART_RxISR_8BIT_FIFOEN+0x196>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004004:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004006:	0023      	movs	r3, r4
 8004008:	335c      	adds	r3, #92	@ 0x5c
 800400a:	0020      	movs	r0, r4
 800400c:	8819      	ldrh	r1, [r3, #0]
 800400e:	f7ff fcba 	bl	8003986 <HAL_UARTEx_RxEventCallback>
 8004012:	e745      	b.n	8003ea0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 8004014:	0020      	movs	r0, r4
 8004016:	f7ff fca9 	bl	800396c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800401a:	e741      	b.n	8003ea0 <UART_RxISR_8BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800401c:	2208      	movs	r2, #8
 800401e:	6999      	ldr	r1, [r3, #24]
 8004020:	430a      	orrs	r2, r1
 8004022:	619a      	str	r2, [r3, #24]
}
 8004024:	e763      	b.n	8003eee <UART_RxISR_8BIT_FIFOEN+0x7e>
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	efffffff 	.word	0xefffffff
 800402c:	08003cc5 	.word	0x08003cc5
 8004030:	fffffeff 	.word	0xfffffeff
 8004034:	effffffe 	.word	0xeffffffe
 8004038:	fbffffff 	.word	0xfbffffff

0800403c <UART_RxISR_16BIT_FIFOEN>:
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800403c:	0003      	movs	r3, r0
{
 800403e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 8004040:	3360      	adds	r3, #96	@ 0x60
 8004042:	881b      	ldrh	r3, [r3, #0]
{
 8004044:	b085      	sub	sp, #20
  uint16_t  uhMask = huart->Mask;
 8004046:	9302      	str	r3, [sp, #8]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004048:	6803      	ldr	r3, [r0, #0]
{
 800404a:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800404c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	9203      	str	r2, [sp, #12]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	9201      	str	r2, [sp, #4]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004056:	0002      	movs	r2, r0
 8004058:	328c      	adds	r2, #140	@ 0x8c
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	2a22      	cmp	r2, #34	@ 0x22
 800405e:	d000      	beq.n	8004062 <UART_RxISR_16BIT_FIFOEN+0x26>
 8004060:	e0c0      	b.n	80041e4 <UART_RxISR_16BIT_FIFOEN+0x1a8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004062:	0003      	movs	r3, r0
 8004064:	3368      	adds	r3, #104	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <UART_RxISR_16BIT_FIFOEN+0x36>
 800406c:	2320      	movs	r3, #32
 800406e:	421d      	tst	r5, r3
 8004070:	d125      	bne.n	80040be <UART_RxISR_16BIT_FIFOEN+0x82>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004072:	0023      	movs	r3, r4
 8004074:	335e      	adds	r3, #94	@ 0x5e
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x7e>
 800407e:	0023      	movs	r3, r4
 8004080:	3368      	adds	r3, #104	@ 0x68
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	4293      	cmp	r3, r2
 8004086:	d918      	bls.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004088:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	2201      	movs	r2, #1
 800408e:	f382 8810 	msr	PRIMASK, r2
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004092:	6821      	ldr	r1, [r4, #0]
 8004094:	4d56      	ldr	r5, [pc, #344]	@ (80041f0 <UART_RxISR_16BIT_FIFOEN+0x1b4>)
 8004096:	688b      	ldr	r3, [r1, #8]
 8004098:	402b      	ands	r3, r5
 800409a:	608b      	str	r3, [r1, #8]
 800409c:	f380 8810 	msr	PRIMASK, r0

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80040a0:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 80040a2:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040ac:	2320      	movs	r3, #32
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	6810      	ldr	r0, [r2, #0]
 80040b2:	4303      	orrs	r3, r0
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	f381 8810 	msr	PRIMASK, r1
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040ba:	b005      	add	sp, #20
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->RxXferCount--;
 80040be:	0026      	movs	r6, r4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c0:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80040c2:	9802      	ldr	r0, [sp, #8]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040c6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80040c8:	4001      	ands	r1, r0
 80040ca:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80040cc:	3202      	adds	r2, #2
 80040ce:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80040d0:	365e      	adds	r6, #94	@ 0x5e
 80040d2:	8832      	ldrh	r2, [r6, #0]
 80040d4:	3a01      	subs	r2, #1
 80040d6:	b292      	uxth	r2, r2
 80040d8:	8032      	strh	r2, [r6, #0]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040da:	2207      	movs	r2, #7
      isrflags = READ_REG(huart->Instance->ISR);
 80040dc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040de:	4215      	tst	r5, r2
 80040e0:	d02f      	beq.n	8004142 <UART_RxISR_16BIT_FIFOEN+0x106>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040e2:	3a06      	subs	r2, #6
 80040e4:	4215      	tst	r5, r2
 80040e6:	d008      	beq.n	80040fa <UART_RxISR_16BIT_FIFOEN+0xbe>
 80040e8:	9903      	ldr	r1, [sp, #12]
 80040ea:	05c9      	lsls	r1, r1, #23
 80040ec:	d505      	bpl.n	80040fa <UART_RxISR_16BIT_FIFOEN+0xbe>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ee:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f2:	3190      	adds	r1, #144	@ 0x90
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	4302      	orrs	r2, r0
 80040f8:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040fa:	2202      	movs	r2, #2
 80040fc:	4215      	tst	r5, r2
 80040fe:	d009      	beq.n	8004114 <UART_RxISR_16BIT_FIFOEN+0xd8>
 8004100:	9901      	ldr	r1, [sp, #4]
 8004102:	07c9      	lsls	r1, r1, #31
 8004104:	d506      	bpl.n	8004114 <UART_RxISR_16BIT_FIFOEN+0xd8>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004106:	0021      	movs	r1, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004108:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410a:	3190      	adds	r1, #144	@ 0x90
 800410c:	6808      	ldr	r0, [r1, #0]
 800410e:	1892      	adds	r2, r2, r2
 8004110:	4302      	orrs	r2, r0
 8004112:	600a      	str	r2, [r1, #0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004114:	2204      	movs	r2, #4
 8004116:	4215      	tst	r5, r2
 8004118:	d009      	beq.n	800412e <UART_RxISR_16BIT_FIFOEN+0xf2>
 800411a:	9901      	ldr	r1, [sp, #4]
 800411c:	07c9      	lsls	r1, r1, #31
 800411e:	d506      	bpl.n	800412e <UART_RxISR_16BIT_FIFOEN+0xf2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004120:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004122:	0022      	movs	r2, r4
 8004124:	2302      	movs	r3, #2
 8004126:	3290      	adds	r2, #144	@ 0x90
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	430b      	orrs	r3, r1
 800412c:	6013      	str	r3, [r2, #0]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412e:	0027      	movs	r7, r4
 8004130:	3790      	adds	r7, #144	@ 0x90
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <UART_RxISR_16BIT_FIFOEN+0x106>
          HAL_UART_ErrorCallback(huart);
 8004138:	0020      	movs	r0, r4
 800413a:	f7ff fc18 	bl	800396e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413e:	2300      	movs	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
      if (huart->RxXferCount == 0U)
 8004142:	8833      	ldrh	r3, [r6, #0]
 8004144:	b299      	uxth	r1, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <UART_RxISR_16BIT_FIFOEN+0x110>
 800414a:	e78f      	b.n	800406c <UART_RxISR_16BIT_FIFOEN+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800414c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	3301      	adds	r3, #1
 8004152:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	4f27      	ldr	r7, [pc, #156]	@ (80041f8 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 800415a:	6802      	ldr	r2, [r0, #0]
 800415c:	403a      	ands	r2, r7
 800415e:	6002      	str	r2, [r0, #0]
 8004160:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004164:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	4f23      	ldr	r7, [pc, #140]	@ (80041fc <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8004170:	6882      	ldr	r2, [r0, #8]
 8004172:	403a      	ands	r2, r7
 8004174:	6082      	str	r2, [r0, #8]
 8004176:	f386 8810 	msr	PRIMASK, r6
        huart->RxState = HAL_UART_STATE_READY;
 800417a:	0022      	movs	r2, r4
 800417c:	2020      	movs	r0, #32
 800417e:	328c      	adds	r2, #140	@ 0x8c
 8004180:	6010      	str	r0, [r2, #0]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004182:	6822      	ldr	r2, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004184:	6721      	str	r1, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004186:	6852      	ldr	r2, [r2, #4]
        huart->RxISR = NULL;
 8004188:	6761      	str	r1, [r4, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800418a:	0212      	lsls	r2, r2, #8
 800418c:	d50a      	bpl.n	80041a4 <UART_RxISR_16BIT_FIFOEN+0x168>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800418e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	4819      	ldr	r0, [pc, #100]	@ (8004200 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	4003      	ands	r3, r0
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d118      	bne.n	80041dc <UART_RxISR_16BIT_FIFOEN+0x1a0>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	2200      	movs	r2, #0
 80041ac:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	6821      	ldr	r1, [r4, #0]
 80041b8:	330f      	adds	r3, #15
 80041ba:	680a      	ldr	r2, [r1, #0]
 80041bc:	439a      	bics	r2, r3
 80041be:	600a      	str	r2, [r1, #0]
 80041c0:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	69d1      	ldr	r1, [r2, #28]
 80041c8:	4219      	tst	r1, r3
 80041ca:	d000      	beq.n	80041ce <UART_RxISR_16BIT_FIFOEN+0x192>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041cc:	6213      	str	r3, [r2, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ce:	0023      	movs	r3, r4
 80041d0:	335c      	adds	r3, #92	@ 0x5c
 80041d2:	0020      	movs	r0, r4
 80041d4:	8819      	ldrh	r1, [r3, #0]
 80041d6:	f7ff fbd6 	bl	8003986 <HAL_UARTEx_RxEventCallback>
 80041da:	e747      	b.n	800406c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_RxCpltCallback(huart);
 80041dc:	0020      	movs	r0, r4
 80041de:	f7ff fbc5 	bl	800396c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041e2:	e743      	b.n	800406c <UART_RxISR_16BIT_FIFOEN+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041e4:	2208      	movs	r2, #8
 80041e6:	6999      	ldr	r1, [r3, #24]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
}
 80041ec:	e765      	b.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x7e>
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	efffffff 	.word	0xefffffff
 80041f4:	08003d9d 	.word	0x08003d9d
 80041f8:	fffffeff 	.word	0xfffffeff
 80041fc:	effffffe 	.word	0xeffffffe
 8004200:	fbffffff 	.word	0xfbffffff

08004204 <UART_SetConfig>:
{
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004208:	6925      	ldr	r5, [r4, #16]
 800420a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420e:	4329      	orrs	r1, r5
 8004210:	6965      	ldr	r5, [r4, #20]
 8004212:	69c2      	ldr	r2, [r0, #28]
 8004214:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	4d50      	ldr	r5, [pc, #320]	@ (800435c <UART_SetConfig+0x158>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800421a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800421c:	4028      	ands	r0, r5
 800421e:	4301      	orrs	r1, r0
 8004220:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	484e      	ldr	r0, [pc, #312]	@ (8004360 <UART_SetConfig+0x15c>)
  tmpreg |= huart->Init.OneBitSampling;
 8004226:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	4001      	ands	r1, r0
 800422a:	68e0      	ldr	r0, [r4, #12]
 800422c:	4301      	orrs	r1, r0
 800422e:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004230:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004232:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004234:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004236:	4d4b      	ldr	r5, [pc, #300]	@ (8004364 <UART_SetConfig+0x160>)
 8004238:	4028      	ands	r0, r5
 800423a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800423c:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004242:	4381      	bics	r1, r0
 8004244:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004246:	4301      	orrs	r1, r0
 8004248:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424a:	4947      	ldr	r1, [pc, #284]	@ (8004368 <UART_SetConfig+0x164>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d115      	bne.n	800427c <UART_SetConfig+0x78>
 8004250:	2103      	movs	r1, #3
 8004252:	4b46      	ldr	r3, [pc, #280]	@ (800436c <UART_SetConfig+0x168>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	400b      	ands	r3, r1
 8004258:	3b01      	subs	r3, #1
 800425a:	2b02      	cmp	r3, #2
 800425c:	d86f      	bhi.n	800433e <UART_SetConfig+0x13a>
 800425e:	4944      	ldr	r1, [pc, #272]	@ (8004370 <UART_SetConfig+0x16c>)
 8004260:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	429a      	cmp	r2, r3
 8004268:	d137      	bne.n	80042da <UART_SetConfig+0xd6>
    switch (clocksource)
 800426a:	2808      	cmp	r0, #8
 800426c:	d865      	bhi.n	800433a <UART_SetConfig+0x136>
 800426e:	f7fb ff53 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004272:	646a      	.short	0x646a
 8004274:	6431640b 	.word	0x6431640b
 8004278:	6464      	.short	0x6464
 800427a:	14          	.byte	0x14
 800427b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427c:	493d      	ldr	r1, [pc, #244]	@ (8004374 <UART_SetConfig+0x170>)
 800427e:	185b      	adds	r3, r3, r1
 8004280:	1e59      	subs	r1, r3, #1
 8004282:	418b      	sbcs	r3, r1
 8004284:	0118      	lsls	r0, r3, #4
 8004286:	e7ec      	b.n	8004262 <UART_SetConfig+0x5e>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004288:	4b38      	ldr	r3, [pc, #224]	@ (800436c <UART_SetConfig+0x168>)
 800428a:	483b      	ldr	r0, [pc, #236]	@ (8004378 <UART_SetConfig+0x174>)
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	0609      	lsls	r1, r1, #24
 8004290:	0f49      	lsrs	r1, r1, #29
 8004292:	3101      	adds	r1, #1
 8004294:	f7fb ff54 	bl	8000140 <__udivsi3>
 8004298:	0002      	movs	r2, r0
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800429a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <UART_SetConfig+0x178>)
 800429e:	0049      	lsls	r1, r1, #1
 80042a0:	0010      	movs	r0, r2
 80042a2:	5ac9      	ldrh	r1, [r1, r3]
 80042a4:	f7fb ff4c 	bl	8000140 <__udivsi3>
 80042a8:	6865      	ldr	r5, [r4, #4]
 80042aa:	0040      	lsls	r0, r0, #1
 80042ac:	086b      	lsrs	r3, r5, #1
 80042ae:	18c0      	adds	r0, r0, r3
 80042b0:	0029      	movs	r1, r5
 80042b2:	f7fb ff45 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b6:	0002      	movs	r2, r0
 80042b8:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <UART_SetConfig+0x17c>)
 80042ba:	3a10      	subs	r2, #16
 80042bc:	429a      	cmp	r2, r3
 80042be:	d83c      	bhi.n	800433a <UART_SetConfig+0x136>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c0:	230f      	movs	r3, #15
 80042c2:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c4:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c6:	439a      	bics	r2, r3
 80042c8:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ca:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	4303      	orrs	r3, r0
 80042d0:	60d3      	str	r3, [r2, #12]
 80042d2:	e03c      	b.n	800434e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetSysClockFreq();
 80042d4:	f7ff f860 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80042d8:	e037      	b.n	800434a <UART_SetConfig+0x146>
    switch (clocksource)
 80042da:	2808      	cmp	r0, #8
 80042dc:	d82d      	bhi.n	800433a <UART_SetConfig+0x136>
 80042de:	f7fb ff1b 	bl	8000118 <__gnu_thumb1_case_uqi>
 80042e2:	2c05      	.short	0x2c05
 80042e4:	2c262c0a 	.word	0x2c262c0a
 80042e8:	2c2c      	.short	0x2c2c
 80042ea:	29          	.byte	0x29
 80042eb:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7ff f92c 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d02c      	beq.n	800434e <UART_SetConfig+0x14a>
 80042f4:	e007      	b.n	8004306 <UART_SetConfig+0x102>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80042f6:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <UART_SetConfig+0x168>)
 80042f8:	481f      	ldr	r0, [pc, #124]	@ (8004378 <UART_SetConfig+0x174>)
 80042fa:	6819      	ldr	r1, [r3, #0]
 80042fc:	0609      	lsls	r1, r1, #24
 80042fe:	0f49      	lsrs	r1, r1, #29
 8004300:	3101      	adds	r1, #1
 8004302:	f7fb ff1d 	bl	8000140 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004306:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004308:	4b1c      	ldr	r3, [pc, #112]	@ (800437c <UART_SetConfig+0x178>)
 800430a:	0052      	lsls	r2, r2, #1
 800430c:	5ad1      	ldrh	r1, [r2, r3]
 800430e:	f7fb ff17 	bl	8000140 <__udivsi3>
 8004312:	6865      	ldr	r5, [r4, #4]
 8004314:	086b      	lsrs	r3, r5, #1
 8004316:	18c0      	adds	r0, r0, r3
 8004318:	0029      	movs	r1, r5
 800431a:	f7fb ff11 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431e:	0002      	movs	r2, r0
 8004320:	4b17      	ldr	r3, [pc, #92]	@ (8004380 <UART_SetConfig+0x17c>)
 8004322:	3a10      	subs	r2, #16
 8004324:	429a      	cmp	r2, r3
 8004326:	d808      	bhi.n	800433a <UART_SetConfig+0x136>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	60d8      	str	r0, [r3, #12]
 800432c:	e00f      	b.n	800434e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7ff f833 	bl	8003398 <HAL_RCC_GetSysClockFreq>
        break;
 8004332:	e7dd      	b.n	80042f0 <UART_SetConfig+0xec>
    switch (clocksource)
 8004334:	2080      	movs	r0, #128	@ 0x80
 8004336:	0200      	lsls	r0, r0, #8
 8004338:	e7e5      	b.n	8004306 <UART_SetConfig+0x102>
        ret = HAL_ERROR;
 800433a:	2001      	movs	r0, #1
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	429a      	cmp	r2, r3
 8004344:	d1d2      	bne.n	80042ec <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004346:	f7ff f8ff 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 800434c:	d1a5      	bne.n	800429a <UART_SetConfig+0x96>
    switch (clocksource)
 800434e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <UART_SetConfig+0x180>)
 8004352:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8004358:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	cfff69f3 	.word	0xcfff69f3
 8004360:	ffffcfff 	.word	0xffffcfff
 8004364:	11fff4ff 	.word	0x11fff4ff
 8004368:	40013800 	.word	0x40013800
 800436c:	40021000 	.word	0x40021000
 8004370:	08007964 	.word	0x08007964
 8004374:	bfffbc00 	.word	0xbfffbc00
 8004378:	02dc6c00 	.word	0x02dc6c00
 800437c:	08007968 	.word	0x08007968
 8004380:	0000ffef 	.word	0x0000ffef
 8004384:	00010001 	.word	0x00010001

08004388 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004388:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800438a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800438c:	071a      	lsls	r2, r3, #28
 800438e:	d506      	bpl.n	800439e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004390:	6801      	ldr	r1, [r0, #0]
 8004392:	4c28      	ldr	r4, [pc, #160]	@ (8004434 <UART_AdvFeatureConfig+0xac>)
 8004394:	684a      	ldr	r2, [r1, #4]
 8004396:	4022      	ands	r2, r4
 8004398:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800439a:	4322      	orrs	r2, r4
 800439c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800439e:	07da      	lsls	r2, r3, #31
 80043a0:	d506      	bpl.n	80043b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043a2:	6801      	ldr	r1, [r0, #0]
 80043a4:	4c24      	ldr	r4, [pc, #144]	@ (8004438 <UART_AdvFeatureConfig+0xb0>)
 80043a6:	684a      	ldr	r2, [r1, #4]
 80043a8:	4022      	ands	r2, r4
 80043aa:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80043ac:	4322      	orrs	r2, r4
 80043ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043b0:	079a      	lsls	r2, r3, #30
 80043b2:	d506      	bpl.n	80043c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b4:	6801      	ldr	r1, [r0, #0]
 80043b6:	4c21      	ldr	r4, [pc, #132]	@ (800443c <UART_AdvFeatureConfig+0xb4>)
 80043b8:	684a      	ldr	r2, [r1, #4]
 80043ba:	4022      	ands	r2, r4
 80043bc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80043be:	4322      	orrs	r2, r4
 80043c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c2:	075a      	lsls	r2, r3, #29
 80043c4:	d506      	bpl.n	80043d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c6:	6801      	ldr	r1, [r0, #0]
 80043c8:	4c1d      	ldr	r4, [pc, #116]	@ (8004440 <UART_AdvFeatureConfig+0xb8>)
 80043ca:	684a      	ldr	r2, [r1, #4]
 80043cc:	4022      	ands	r2, r4
 80043ce:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80043d0:	4322      	orrs	r2, r4
 80043d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d4:	06da      	lsls	r2, r3, #27
 80043d6:	d506      	bpl.n	80043e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	4c1a      	ldr	r4, [pc, #104]	@ (8004444 <UART_AdvFeatureConfig+0xbc>)
 80043dc:	688a      	ldr	r2, [r1, #8]
 80043de:	4022      	ands	r2, r4
 80043e0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80043e2:	4322      	orrs	r2, r4
 80043e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e6:	069a      	lsls	r2, r3, #26
 80043e8:	d506      	bpl.n	80043f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ea:	6801      	ldr	r1, [r0, #0]
 80043ec:	4c16      	ldr	r4, [pc, #88]	@ (8004448 <UART_AdvFeatureConfig+0xc0>)
 80043ee:	688a      	ldr	r2, [r1, #8]
 80043f0:	4022      	ands	r2, r4
 80043f2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80043f4:	4322      	orrs	r2, r4
 80043f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f8:	065a      	lsls	r2, r3, #25
 80043fa:	d510      	bpl.n	800441e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043fc:	6801      	ldr	r1, [r0, #0]
 80043fe:	4d13      	ldr	r5, [pc, #76]	@ (800444c <UART_AdvFeatureConfig+0xc4>)
 8004400:	684a      	ldr	r2, [r1, #4]
 8004402:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004404:	402a      	ands	r2, r5
 8004406:	4322      	orrs	r2, r4
 8004408:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	0352      	lsls	r2, r2, #13
 800440e:	4294      	cmp	r4, r2
 8004410:	d105      	bne.n	800441e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004412:	684a      	ldr	r2, [r1, #4]
 8004414:	4c0e      	ldr	r4, [pc, #56]	@ (8004450 <UART_AdvFeatureConfig+0xc8>)
 8004416:	4022      	ands	r2, r4
 8004418:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800441a:	4322      	orrs	r2, r4
 800441c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	d506      	bpl.n	8004430 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004422:	6802      	ldr	r2, [r0, #0]
 8004424:	490b      	ldr	r1, [pc, #44]	@ (8004454 <UART_AdvFeatureConfig+0xcc>)
 8004426:	6853      	ldr	r3, [r2, #4]
 8004428:	400b      	ands	r3, r1
 800442a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800442c:	430b      	orrs	r3, r1
 800442e:	6053      	str	r3, [r2, #4]
}
 8004430:	bd30      	pop	{r4, r5, pc}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	ffff7fff 	.word	0xffff7fff
 8004438:	fffdffff 	.word	0xfffdffff
 800443c:	fffeffff 	.word	0xfffeffff
 8004440:	fffbffff 	.word	0xfffbffff
 8004444:	ffffefff 	.word	0xffffefff
 8004448:	ffffdfff 	.word	0xffffdfff
 800444c:	ffefffff 	.word	0xffefffff
 8004450:	ff9fffff 	.word	0xff9fffff
 8004454:	fff7ffff 	.word	0xfff7ffff

08004458 <UART_WaitOnFlagUntilTimeout>:
{
 8004458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445a:	0004      	movs	r4, r0
 800445c:	000d      	movs	r5, r1
 800445e:	0017      	movs	r7, r2
 8004460:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	69d3      	ldr	r3, [r2, #28]
 8004466:	402b      	ands	r3, r5
 8004468:	1b5b      	subs	r3, r3, r5
 800446a:	4259      	negs	r1, r3
 800446c:	414b      	adcs	r3, r1
 800446e:	42bb      	cmp	r3, r7
 8004470:	d001      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004472:	2000      	movs	r0, #0
 8004474:	e021      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8004476:	9b08      	ldr	r3, [sp, #32]
 8004478:	3301      	adds	r3, #1
 800447a:	d0f3      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fe fc3a 	bl	8002cf4 <HAL_GetTick>
 8004480:	9b00      	ldr	r3, [sp, #0]
 8004482:	1ac0      	subs	r0, r0, r3
 8004484:	9b08      	ldr	r3, [sp, #32]
 8004486:	4298      	cmp	r0, r3
 8004488:	d828      	bhi.n	80044dc <UART_WaitOnFlagUntilTimeout+0x84>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d026      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	0752      	lsls	r2, r2, #29
 8004494:	d5e5      	bpl.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	2608      	movs	r6, #8
 800449a:	0011      	movs	r1, r2
 800449c:	4031      	ands	r1, r6
 800449e:	9101      	str	r1, [sp, #4]
 80044a0:	4232      	tst	r2, r6
 80044a2:	d00b      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x64>
          UART_EndRxTransfer(huart);
 80044a4:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a6:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80044a8:	f7ff f8ea 	bl	8003680 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ac:	0023      	movs	r3, r4
 80044ae:	3390      	adds	r3, #144	@ 0x90
 80044b0:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 80044b2:	2300      	movs	r3, #0
          return HAL_ERROR;
 80044b4:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80044b6:	3484      	adds	r4, #132	@ 0x84
 80044b8:	7023      	strb	r3, [r4, #0]
}
 80044ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044bc:	2280      	movs	r2, #128	@ 0x80
 80044be:	69d9      	ldr	r1, [r3, #28]
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	4211      	tst	r1, r2
 80044c4:	d0cd      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80044c8:	0020      	movs	r0, r4
 80044ca:	f7ff f8d9 	bl	8003680 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ce:	0023      	movs	r3, r4
 80044d0:	2220      	movs	r2, #32
 80044d2:	3390      	adds	r3, #144	@ 0x90
 80044d4:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 80044d6:	9b01      	ldr	r3, [sp, #4]
 80044d8:	3484      	adds	r4, #132	@ 0x84
 80044da:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80044dc:	2003      	movs	r0, #3
 80044de:	e7ec      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0x62>

080044e0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	0003      	movs	r3, r0
{
 80044e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	2600      	movs	r6, #0
{
 80044e6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	3390      	adds	r3, #144	@ 0x90
 80044ea:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80044ec:	f7fe fc02 	bl	8002cf4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80044f2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	d51f      	bpl.n	800453a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	2180      	movs	r1, #128	@ 0x80
 80044fc:	4b28      	ldr	r3, [pc, #160]	@ (80045a0 <UART_CheckIdleState+0xc0>)
 80044fe:	0032      	movs	r2, r6
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	0389      	lsls	r1, r1, #14
 8004504:	0003      	movs	r3, r0
 8004506:	0020      	movs	r0, r4
 8004508:	f7ff ffa6 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 800450c:	42b0      	cmp	r0, r6
 800450e:	d014      	beq.n	800453a <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004510:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004514:	2301      	movs	r3, #1
 8004516:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800451a:	2080      	movs	r0, #128	@ 0x80
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	4383      	bics	r3, r0
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004528:	0023      	movs	r3, r4
 800452a:	2220      	movs	r2, #32
 800452c:	3388      	adds	r3, #136	@ 0x88
 800452e:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8004530:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004532:	2300      	movs	r3, #0
 8004534:	3484      	adds	r4, #132	@ 0x84
 8004536:	7023      	strb	r3, [r4, #0]
}
 8004538:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453a:	0026      	movs	r6, r4
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	368c      	adds	r6, #140	@ 0x8c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	075b      	lsls	r3, r3, #29
 8004544:	d523      	bpl.n	800458e <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004546:	2180      	movs	r1, #128	@ 0x80
 8004548:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <UART_CheckIdleState+0xc0>)
 800454a:	2200      	movs	r2, #0
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	0020      	movs	r0, r4
 8004550:	002b      	movs	r3, r5
 8004552:	03c9      	lsls	r1, r1, #15
 8004554:	f7ff ff80 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8004558:	2800      	cmp	r0, #0
 800455a:	d018      	beq.n	800458e <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800455c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004560:	2201      	movs	r2, #1
 8004562:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	4d0e      	ldr	r5, [pc, #56]	@ (80045a4 <UART_CheckIdleState+0xc4>)
 800456a:	680b      	ldr	r3, [r1, #0]
 800456c:	402b      	ands	r3, r5
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004574:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	6821      	ldr	r1, [r4, #0]
 800457e:	688b      	ldr	r3, [r1, #8]
 8004580:	4393      	bics	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
 8004584:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004588:	2320      	movs	r3, #32
 800458a:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 800458c:	e7d0      	b.n	8004530 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800458e:	0023      	movs	r3, r4
 8004590:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004594:	3388      	adds	r3, #136	@ 0x88
 8004596:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800459e:	e7c8      	b.n	8004532 <UART_CheckIdleState+0x52>
 80045a0:	01ffffff 	.word	0x01ffffff
 80045a4:	fffffedf 	.word	0xfffffedf

080045a8 <HAL_UART_Init>:
{
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
}
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	0005      	movs	r5, r0
 80045b4:	3588      	adds	r5, #136	@ 0x88
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80045bc:	0002      	movs	r2, r0
 80045be:	3284      	adds	r2, #132	@ 0x84
 80045c0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80045c2:	f7fe fa43 	bl	8002a4c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80045c6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80045c8:	2101      	movs	r1, #1
 80045ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	438b      	bics	r3, r1
 80045d2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80045da:	0020      	movs	r0, r4
 80045dc:	f7ff fed4 	bl	8004388 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e0:	0020      	movs	r0, r4
 80045e2:	f7ff fe0f 	bl	8004204 <UART_SetConfig>
 80045e6:	2801      	cmp	r0, #1
 80045e8:	d0e1      	beq.n	80045ae <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	4907      	ldr	r1, [pc, #28]	@ (800460c <HAL_UART_Init+0x64>)
 80045ee:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80045f0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f4:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	438a      	bics	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80045fe:	2201      	movs	r2, #1
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004606:	f7ff ff6b 	bl	80044e0 <UART_CheckIdleState>
 800460a:	e7d1      	b.n	80045b0 <HAL_UART_Init+0x8>
 800460c:	ffffb7ff 	.word	0xffffb7ff

08004610 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8004610:	0003      	movs	r3, r0
 8004612:	335c      	adds	r3, #92	@ 0x5c
{
 8004614:	b570      	push	{r4, r5, r6, lr}
  huart->pRxBuffPtr  = pData;
 8004616:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8004618:	2480      	movs	r4, #128	@ 0x80
  huart->RxXferSize  = Size;
 800461a:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 800461c:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 800461e:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8004620:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8004622:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8004624:	0164      	lsls	r4, r4, #5
 8004626:	42a1      	cmp	r1, r4
 8004628:	d14e      	bne.n	80046c8 <UART_Start_Receive_IT+0xb8>
 800462a:	6903      	ldr	r3, [r0, #16]
 800462c:	1e59      	subs	r1, r3, #1
 800462e:	418b      	sbcs	r3, r1
 8004630:	21ff      	movs	r1, #255	@ 0xff
 8004632:	425b      	negs	r3, r3
 8004634:	438b      	bics	r3, r1
 8004636:	493c      	ldr	r1, [pc, #240]	@ (8004728 <UART_Start_Receive_IT+0x118>)
 8004638:	185b      	adds	r3, r3, r1
 800463a:	0001      	movs	r1, r0
 800463c:	3160      	adds	r1, #96	@ 0x60
 800463e:	800b      	strh	r3, [r1, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	0003      	movs	r3, r0
 8004642:	2100      	movs	r1, #0
 8004644:	3390      	adds	r3, #144	@ 0x90
 8004646:	6019      	str	r1, [r3, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004648:	3122      	adds	r1, #34	@ 0x22
 800464a:	3b04      	subs	r3, #4
 800464c:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800464e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	2301      	movs	r3, #1
 8004654:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	6801      	ldr	r1, [r0, #0]
 800465a:	688d      	ldr	r5, [r1, #8]
 800465c:	432b      	orrs	r3, r5
 800465e:	608b      	str	r3, [r1, #8]
 8004660:	f384 8810 	msr	PRIMASK, r4
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004664:	2580      	movs	r5, #128	@ 0x80
 8004666:	2180      	movs	r1, #128	@ 0x80
 8004668:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 800466a:	6884      	ldr	r4, [r0, #8]
 800466c:	6903      	ldr	r3, [r0, #16]
 800466e:	05ad      	lsls	r5, r5, #22
 8004670:	0149      	lsls	r1, r1, #5
 8004672:	42ae      	cmp	r6, r5
 8004674:	d13a      	bne.n	80046ec <UART_Start_Receive_IT+0xdc>
 8004676:	0005      	movs	r5, r0
 8004678:	3568      	adds	r5, #104	@ 0x68
 800467a:	882d      	ldrh	r5, [r5, #0]
 800467c:	4295      	cmp	r5, r2
 800467e:	d835      	bhi.n	80046ec <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004680:	4a2a      	ldr	r2, [pc, #168]	@ (800472c <UART_Start_Receive_IT+0x11c>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004682:	428c      	cmp	r4, r1
 8004684:	d102      	bne.n	800468c <UART_Start_Receive_IT+0x7c>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d100      	bne.n	800468c <UART_Start_Receive_IT+0x7c>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800468a:	4a29      	ldr	r2, [pc, #164]	@ (8004730 <UART_Start_Receive_IT+0x120>)
 800468c:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <UART_Start_Receive_IT+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004692:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	2301      	movs	r3, #1
 8004698:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469c:	6802      	ldr	r2, [r0, #0]
 800469e:	33ff      	adds	r3, #255	@ 0xff
 80046a0:	6814      	ldr	r4, [r2, #0]
 80046a2:	4323      	orrs	r3, r4
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	2301      	movs	r3, #1
 80046b0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	6802      	ldr	r2, [r0, #0]
 80046b8:	055b      	lsls	r3, r3, #21
 80046ba:	6890      	ldr	r0, [r2, #8]
 80046bc:	4303      	orrs	r3, r0
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	f381 8810 	msr	PRIMASK, r1
}
 80046c4:	2000      	movs	r0, #0
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
  UART_MASK_COMPUTATION(huart);
 80046c8:	2900      	cmp	r1, #0
 80046ca:	d105      	bne.n	80046d8 <UART_Start_Receive_IT+0xc8>
 80046cc:	6901      	ldr	r1, [r0, #16]
 80046ce:	237f      	movs	r3, #127	@ 0x7f
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d1b2      	bne.n	800463a <UART_Start_Receive_IT+0x2a>
 80046d4:	3380      	adds	r3, #128	@ 0x80
 80046d6:	e7b0      	b.n	800463a <UART_Start_Receive_IT+0x2a>
 80046d8:	2480      	movs	r4, #128	@ 0x80
 80046da:	0564      	lsls	r4, r4, #21
 80046dc:	42a1      	cmp	r1, r4
 80046de:	d1ac      	bne.n	800463a <UART_Start_Receive_IT+0x2a>
 80046e0:	6901      	ldr	r1, [r0, #16]
 80046e2:	233f      	movs	r3, #63	@ 0x3f
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1a8      	bne.n	800463a <UART_Start_Receive_IT+0x2a>
 80046e8:	3340      	adds	r3, #64	@ 0x40
 80046ea:	e7a6      	b.n	800463a <UART_Start_Receive_IT+0x2a>
      huart->RxISR = UART_RxISR_8BIT;
 80046ec:	4a11      	ldr	r2, [pc, #68]	@ (8004734 <UART_Start_Receive_IT+0x124>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	428c      	cmp	r4, r1
 80046f0:	d102      	bne.n	80046f8 <UART_Start_Receive_IT+0xe8>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <UART_Start_Receive_IT+0xe8>
      huart->RxISR = UART_RxISR_16BIT;
 80046f6:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <UART_Start_Receive_IT+0x128>)
 80046f8:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046fa:	2201      	movs	r2, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_Start_Receive_IT+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004700:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004708:	2390      	movs	r3, #144	@ 0x90
 800470a:	6802      	ldr	r2, [r0, #0]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	6810      	ldr	r0, [r2, #0]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004710:	4303      	orrs	r3, r0
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e7d4      	b.n	80046c0 <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004716:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	f382 8810 	msr	PRIMASK, r2
 800471e:	6802      	ldr	r2, [r0, #0]
 8004720:	2320      	movs	r3, #32
 8004722:	6810      	ldr	r0, [r2, #0]
 8004724:	e7f4      	b.n	8004710 <UART_Start_Receive_IT+0x100>
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	000001ff 	.word	0x000001ff
 800472c:	08003e71 	.word	0x08003e71
 8004730:	0800403d 	.word	0x0800403d
 8004734:	08003cc5 	.word	0x08003cc5
 8004738:	08003d9d 	.word	0x08003d9d

0800473c <HAL_UART_Receive_IT>:
{
 800473c:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800473e:	308c      	adds	r0, #140	@ 0x8c
{
 8004740:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004742:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8004744:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004746:	2c20      	cmp	r4, #32
 8004748:	d125      	bne.n	8004796 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 800474a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800474c:	2900      	cmp	r1, #0
 800474e:	d022      	beq.n	8004796 <HAL_UART_Receive_IT+0x5a>
 8004750:	2a00      	cmp	r2, #0
 8004752:	d020      	beq.n	8004796 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004754:	2080      	movs	r0, #128	@ 0x80
 8004756:	689c      	ldr	r4, [r3, #8]
 8004758:	0140      	lsls	r0, r0, #5
 800475a:	4284      	cmp	r4, r0
 800475c:	d105      	bne.n	800476a <HAL_UART_Receive_IT+0x2e>
 800475e:	6918      	ldr	r0, [r3, #16]
 8004760:	2800      	cmp	r0, #0
 8004762:	d102      	bne.n	800476a <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 8004764:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004766:	4201      	tst	r1, r0
 8004768:	d115      	bne.n	8004796 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	2000      	movs	r0, #0
 800476c:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	6840      	ldr	r0, [r0, #4]
 8004772:	0200      	lsls	r0, r0, #8
 8004774:	d50c      	bpl.n	8004790 <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004776:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	2001      	movs	r0, #1
 800477c:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004780:	2080      	movs	r0, #128	@ 0x80
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	04c0      	lsls	r0, r0, #19
 8004786:	6826      	ldr	r6, [r4, #0]
 8004788:	4330      	orrs	r0, r6
 800478a:	6020      	str	r0, [r4, #0]
 800478c:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004790:	0018      	movs	r0, r3
 8004792:	f7ff ff3d 	bl	8004610 <UART_Start_Receive_IT>
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}

08004798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800479a:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800479c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800479e:	0004      	movs	r4, r0
 80047a0:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 80047a6:	2001      	movs	r0, #1
 80047a8:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80047aa:	3468      	adds	r4, #104	@ 0x68
 80047ac:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047b0:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047b2:	4e0b      	ldr	r6, [pc, #44]	@ (80047e0 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047b4:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047b6:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80047b8:	4d0a      	ldr	r5, [pc, #40]	@ (80047e4 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047ba:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047bc:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80047be:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c0:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047c2:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c4:	f7fb fd46 	bl	8000254 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047c8:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ca:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047cc:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047ce:	0f5b      	lsrs	r3, r3, #29
 80047d0:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80047d2:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047d4:	00c0      	lsls	r0, r0, #3
 80047d6:	f7fb fd3d 	bl	8000254 <__divsi3>
 80047da:	b280      	uxth	r0, r0
}
 80047dc:	e7e5      	b.n	80047aa <UARTEx_SetNbDataToProcess+0x12>
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	08007988 	.word	0x08007988
 80047e4:	08007980 	.word	0x08007980

080047e8 <HAL_UARTEx_WakeupCallback>:
}
 80047e8:	4770      	bx	lr

080047ea <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80047ea:	4770      	bx	lr

080047ec <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_UARTEx_DisableFifoMode>:
{
 80047f0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80047f2:	0004      	movs	r4, r0
 80047f4:	3484      	adds	r4, #132	@ 0x84
 80047f6:	7822      	ldrb	r2, [r4, #0]
{
 80047f8:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80047fa:	2002      	movs	r0, #2
 80047fc:	2a01      	cmp	r2, #1
 80047fe:	d011      	beq.n	8004824 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8004800:	001d      	movs	r5, r3
 8004802:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004804:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004806:	3588      	adds	r5, #136	@ 0x88
 8004808:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800480e:	6810      	ldr	r0, [r2, #0]
 8004810:	43b0      	bics	r0, r6
 8004812:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004814:	4804      	ldr	r0, [pc, #16]	@ (8004828 <HAL_UARTEx_DisableFifoMode+0x38>)
 8004816:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004818:	2000      	movs	r0, #0
 800481a:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 800481c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004820:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8004822:	7020      	strb	r0, [r4, #0]
}
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	dfffffff 	.word	0xdfffffff

0800482c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800482e:	0005      	movs	r5, r0
 8004830:	3584      	adds	r5, #132	@ 0x84
{
 8004832:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8004834:	7829      	ldrb	r1, [r5, #0]
 8004836:	2202      	movs	r2, #2
 8004838:	2901      	cmp	r1, #1
 800483a:	d015      	beq.n	8004868 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 800483e:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004840:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004842:	3688      	adds	r6, #136	@ 0x88
 8004844:	3222      	adds	r2, #34	@ 0x22
 8004846:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004848:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	438a      	bics	r2, r1
 800484e:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004850:	68a1      	ldr	r1, [r4, #8]
 8004852:	00c9      	lsls	r1, r1, #3
 8004854:	08c9      	lsrs	r1, r1, #3
 8004856:	4319      	orrs	r1, r3
 8004858:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 800485a:	f7ff ff9d 	bl	8004798 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800485e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004860:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004862:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004864:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004866:	702a      	strb	r2, [r5, #0]
}
 8004868:	0010      	movs	r0, r2
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800486c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800486e:	0005      	movs	r5, r0
 8004870:	3584      	adds	r5, #132	@ 0x84
{
 8004872:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004874:	7829      	ldrb	r1, [r5, #0]
 8004876:	2302      	movs	r3, #2
 8004878:	2901      	cmp	r1, #1
 800487a:	d015      	beq.n	80048a8 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 800487e:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004880:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004882:	3688      	adds	r6, #136	@ 0x88
 8004884:	3322      	adds	r3, #34	@ 0x22
 8004886:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004888:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	438b      	bics	r3, r1
 800488e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004890:	68a1      	ldr	r1, [r4, #8]
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8004894:	4019      	ands	r1, r3
 8004896:	4311      	orrs	r1, r2
 8004898:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 800489a:	f7ff ff7d 	bl	8004798 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800489e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a0:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80048a2:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80048a4:	2300      	movs	r3, #0
 80048a6:	702b      	strb	r3, [r5, #0]
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ac:	f1ffffff 	.word	0xf1ffffff

080048b0 <B_SCK>:
{
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ibPinState);
}

static void B_SCK (GPIO_PinState ibPinState)
{
 80048b0:	0002      	movs	r2, r0
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ibPinState);
 80048b2:	20a0      	movs	r0, #160	@ 0xa0
{
 80048b4:	b510      	push	{r4, lr}
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ibPinState);
 80048b6:	2120      	movs	r1, #32
 80048b8:	05c0      	lsls	r0, r0, #23
 80048ba:	f7fe fc31 	bl	8003120 <HAL_GPIO_WritePin>
}
 80048be:	bd10      	pop	{r4, pc}

080048c0 <B_DOUT>:
{
 80048c0:	0002      	movs	r2, r0
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ibPinState);
 80048c2:	20a0      	movs	r0, #160	@ 0xa0
{
 80048c4:	b510      	push	{r4, lr}
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ibPinState);
 80048c6:	2180      	movs	r1, #128	@ 0x80
 80048c8:	05c0      	lsls	r0, r0, #23
 80048ca:	f7fe fc29 	bl	8003120 <HAL_GPIO_WritePin>
}
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <ads_stop>:

	return(iStat);
}

void ads_stop(void)
{
 80048d0:	b510      	push	{r4, lr}
#ifdef use_ads_bitbang
	B_SCK(0);	B_DOUT(0);
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7ff ffec 	bl	80048b0 <B_SCK>
 80048d8:	2000      	movs	r0, #0
 80048da:	f7ff fff1 	bl	80048c0 <B_DOUT>
	  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, !Enable);
 80048de:	20a0      	movs	r0, #160	@ 0xa0
 80048e0:	2201      	movs	r2, #1
 80048e2:	2110      	movs	r1, #16
 80048e4:	05c0      	lsls	r0, r0, #23
 80048e6:	f7fe fc1b 	bl	8003120 <HAL_GPIO_WritePin>
#elif use_ads_spi
	ads_enable(0);
#endif


}
 80048ea:	bd10      	pop	{r4, pc}

080048ec <ads_start>:

void ads_start(void)
{
 80048ec:	b510      	push	{r4, lr}
#ifdef use_ads_bitbang
	  B_SCK(0);	B_DOUT(0);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7ff ffde 	bl	80048b0 <B_SCK>
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7ff ffe3 	bl	80048c0 <B_DOUT>
	  HAL_GPIO_WritePin(ADS_CS_GPIO_Port, ADS_CS_Pin, !Enable);
 80048fa:	20a0      	movs	r0, #160	@ 0xa0
 80048fc:	2200      	movs	r2, #0
 80048fe:	2110      	movs	r1, #16
 8004900:	05c0      	lsls	r0, r0, #23
 8004902:	f7fe fc0d 	bl	8003120 <HAL_GPIO_WritePin>
	ads_enable(1);
#elif use_ads_spi
	ads_enable(1);

#endif
}
 8004906:	bd10      	pop	{r4, pc}

08004908 <ads_MeasDigit>:
{
 8004908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490a:	0004      	movs	r4, r0
    ads_WriteByte(ANALOG_CTRL | (uint8_t)(Idx << ANALOG_AOFS));	// Befehl senden
 800490c:	257d      	movs	r5, #125	@ 0x7d
 800490e:	0124      	lsls	r4, r4, #4
 8004910:	426d      	negs	r5, r5
 8004912:	4325      	orrs	r5, r4
{
 8004914:	9101      	str	r1, [sp, #4]
    ads_WriteByte(ANALOG_CTRL | (uint8_t)(Idx << ANALOG_AOFS));	// Befehl senden
 8004916:	2408      	movs	r4, #8
ads_start();
 8004918:	f7ff ffe8 	bl	80048ec <ads_start>
		for (iLoop = 0x80 ; iLoop != 0; iLoop /= 2)		//shift bit for masking
 800491c:	2680      	movs	r6, #128	@ 0x80
			if (iLoop & iValue)	B_DOUT(1);	//masking value with i, write to ADC
 800491e:	2701      	movs	r7, #1
    ads_WriteByte(ANALOG_CTRL | (uint8_t)(Idx << ANALOG_AOFS));	// Befehl senden
 8004920:	b2ed      	uxtb	r5, r5
			if (iLoop & iValue)	B_DOUT(1);	//masking value with i, write to ADC
 8004922:	0030      	movs	r0, r6
 8004924:	4028      	ands	r0, r5
 8004926:	422e      	tst	r6, r5
 8004928:	d000      	beq.n	800492c <ads_MeasDigit+0x24>
 800492a:	0038      	movs	r0, r7
			else				B_DOUT(0);
 800492c:	f7ff ffc8 	bl	80048c0 <B_DOUT>
	__asm__("nop");
 8004930:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 8004932:	46c0      	nop			@ (mov r8, r8)
			B_SCK(1);
 8004934:	0038      	movs	r0, r7
 8004936:	f7ff ffbb 	bl	80048b0 <B_SCK>
	__asm__("nop");
 800493a:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 800493c:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 800493e:	46c0      	nop			@ (mov r8, r8)
			B_SCK(0);
 8004940:	2000      	movs	r0, #0
		for (iLoop = 0x80 ; iLoop != 0; iLoop /= 2)		//shift bit for masking
 8004942:	3c01      	subs	r4, #1
			B_SCK(0);
 8004944:	f7ff ffb4 	bl	80048b0 <B_SCK>
		for (iLoop = 0x80 ; iLoop != 0; iLoop /= 2)		//shift bit for masking
 8004948:	0876      	lsrs	r6, r6, #1
 800494a:	2c00      	cmp	r4, #0
 800494c:	d1e9      	bne.n	8004922 <ads_MeasDigit+0x1a>
		B_DOUT(0);
 800494e:	0020      	movs	r0, r4
 8004950:	f7ff ffb6 	bl	80048c0 <B_DOUT>
	__asm__("nop");
 8004954:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 8004956:	46c0      	nop			@ (mov r8, r8)
  return(HAL_GPIO_ReadPin(ADS_BUSY1_GPIO_Port, ADS_BUSY1_Pin));
 8004958:	2180      	movs	r1, #128	@ 0x80
 800495a:	481c      	ldr	r0, [pc, #112]	@ (80049cc <ads_MeasDigit+0xc4>)
 800495c:	f7fe fbda 	bl	8003114 <HAL_GPIO_ReadPin>
		return(1);
 8004960:	2501      	movs	r5, #1
	if (ads_busy() != 1)
 8004962:	42a8      	cmp	r0, r5
 8004964:	d12e      	bne.n	80049c4 <ads_MeasDigit+0xbc>
	B_SCK(1);
 8004966:	0028      	movs	r0, r5
 8004968:	f7ff ffa2 	bl	80048b0 <B_SCK>
	__asm__("nop");
 800496c:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 800496e:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 8004970:	46c0      	nop			@ (mov r8, r8)
	B_SCK(0);
 8004972:	0020      	movs	r0, r4
 8004974:	f7ff ff9c 	bl	80048b0 <B_SCK>
	__asm__("nop");
 8004978:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 800497a:	46c0      	nop			@ (mov r8, r8)
  return(HAL_GPIO_ReadPin(ADS_BUSY1_GPIO_Port, ADS_BUSY1_Pin));
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	4813      	ldr	r0, [pc, #76]	@ (80049cc <ads_MeasDigit+0xc4>)
 8004980:	f7fe fbc8 	bl	8003114 <HAL_GPIO_ReadPin>
		return(2);
 8004984:	196d      	adds	r5, r5, r5
	if (ads_busy() != 0)
 8004986:	2800      	cmp	r0, #0
 8004988:	d11c      	bne.n	80049c4 <ads_MeasDigit+0xbc>
	  for (iLoop = 0x8000; iLoop != 0; iLoop /= 2)//shift bit for masking
 800498a:	2680      	movs	r6, #128	@ 0x80
 return(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
 800498c:	27a0      	movs	r7, #160	@ 0xa0
 800498e:	350e      	adds	r5, #14
	  for (iLoop = 0x8000; iLoop != 0; iLoop /= 2)//shift bit for masking
 8004990:	0236      	lsls	r6, r6, #8
 return(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
 8004992:	05ff      	lsls	r7, r7, #23
 8004994:	2140      	movs	r1, #64	@ 0x40
 8004996:	0038      	movs	r0, r7
 8004998:	f7fe fbbc 	bl	8003114 <HAL_GPIO_ReadPin>
		if (B_DIN()) iValue |= iLoop;	//read bit
 800499c:	2800      	cmp	r0, #0
 800499e:	d000      	beq.n	80049a2 <ads_MeasDigit+0x9a>
 80049a0:	4334      	orrs	r4, r6
		B_SCK(1);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7ff ff84 	bl	80048b0 <B_SCK>
	__asm__("nop");
 80049a8:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 80049aa:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 80049ac:	46c0      	nop			@ (mov r8, r8)
		B_SCK(0);
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7ff ff7e 	bl	80048b0 <B_SCK>
	__asm__("nop");
 80049b4:	46c0      	nop			@ (mov r8, r8)
	__asm__("nop");
 80049b6:	46c0      	nop			@ (mov r8, r8)
	  for (iLoop = 0x8000; iLoop != 0; iLoop /= 2)//shift bit for masking
 80049b8:	3d01      	subs	r5, #1
 80049ba:	0876      	lsrs	r6, r6, #1
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d1e9      	bne.n	8004994 <ads_MeasDigit+0x8c>
		*pErg = ads_Readdata();		// Ausgabe
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	801c      	strh	r4, [r3, #0]
	ads_stop();
 80049c4:	f7ff ff84 	bl	80048d0 <ads_stop>
}
 80049c8:	0028      	movs	r0, r5
 80049ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049cc:	50000400 	.word	0x50000400

080049d0 <ani_Mess>:
{
 80049d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	iStat = ads_MeasDigit(Idx, &iErg);	// 1.Discard the measurement
 80049d2:	466b      	mov	r3, sp
{
 80049d4:	000e      	movs	r6, r1
	iStat = ads_MeasDigit(Idx, &iErg);	// 1.Discard the measurement
 80049d6:	1d99      	adds	r1, r3, #6
{
 80049d8:	0005      	movs	r5, r0
	iStat = ads_MeasDigit(Idx, &iErg);	// 1.Discard the measurement
 80049da:	f7ff ff95 	bl	8004908 <ads_MeasDigit>
	iStat = ads_MeasDigit(Idx, &iErg);	// 2.Discard the measurement
 80049de:	466b      	mov	r3, sp
 80049e0:	0028      	movs	r0, r5
 80049e2:	1d99      	adds	r1, r3, #6
 80049e4:	f7ff ff90 	bl	8004908 <ads_MeasDigit>
 80049e8:	1e04      	subs	r4, r0, #0
	if (iStat)
 80049ea:	d11b      	bne.n	8004a24 <ani_Mess+0x54>
	iStat = ads_MeasDigit(Idx, &iErg);	// 3.Use measurement
 80049ec:	466b      	mov	r3, sp
 80049ee:	0028      	movs	r0, r5
 80049f0:	1d99      	adds	r1, r3, #6
 80049f2:	f7ff ff89 	bl	8004908 <ads_MeasDigit>
 80049f6:	1e04      	subs	r4, r0, #0
	if (iStat)
 80049f8:	d114      	bne.n	8004a24 <ani_Mess+0x54>
	iErgSum = (uint32_t) iErg;
 80049fa:	466b      	mov	r3, sp
	iStat = ads_MeasDigit(Idx, &iErg);	// 4.Use measurement
 80049fc:	0028      	movs	r0, r5
 80049fe:	1d99      	adds	r1, r3, #6
	iErgSum = (uint32_t) iErg;
 8004a00:	88df      	ldrh	r7, [r3, #6]
	iStat = ads_MeasDigit(Idx, &iErg);	// 4.Use measurement
 8004a02:	f7ff ff81 	bl	8004908 <ads_MeasDigit>
 8004a06:	1e04      	subs	r4, r0, #0
	if (iStat)
 8004a08:	d10c      	bne.n	8004a24 <ani_Mess+0x54>
	iErgSum += (uint32_t) iErg;
 8004a0a:	466b      	mov	r3, sp
 8004a0c:	88d8      	ldrh	r0, [r3, #6]
 8004a0e:	19c0      	adds	r0, r0, r7
	iU	= (float)ADCmeasured_values[Idx] * (2.50f / 65536.0f);	// For now, U-value
 8004a10:	0840      	lsrs	r0, r0, #1
 8004a12:	f7fb fe87 	bl	8000724 <__aeabi_ui2f>
 8004a16:	4904      	ldr	r1, [pc, #16]	@ (8004a28 <ani_Mess+0x58>)
 8004a18:	f7fb fd46 	bl	80004a8 <__aeabi_fmul>
	*pStrom = iU * (1000.0f / 100.0f);	// I = U / R,   R = 100 Ohm,  I * 1000 in mA/A
 8004a1c:	4903      	ldr	r1, [pc, #12]	@ (8004a2c <ani_Mess+0x5c>)
 8004a1e:	f7fb fd43 	bl	80004a8 <__aeabi_fmul>
 8004a22:	6030      	str	r0, [r6, #0]
}
 8004a24:	0020      	movs	r0, r4
 8004a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a28:	38200000 	.word	0x38200000
 8004a2c:	41200000 	.word	0x41200000

08004a30 <__cvt>:
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	001f      	movs	r7, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	0016      	movs	r6, r2
 8004a38:	b08b      	sub	sp, #44	@ 0x2c
 8004a3a:	429f      	cmp	r7, r3
 8004a3c:	da04      	bge.n	8004a48 <__cvt+0x18>
 8004a3e:	2180      	movs	r1, #128	@ 0x80
 8004a40:	0609      	lsls	r1, r1, #24
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	001f      	movs	r7, r3
 8004a46:	232d      	movs	r3, #45	@ 0x2d
 8004a48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a4a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8004a4c:	7013      	strb	r3, [r2, #0]
 8004a4e:	2320      	movs	r3, #32
 8004a50:	2203      	movs	r2, #3
 8004a52:	439d      	bics	r5, r3
 8004a54:	2d46      	cmp	r5, #70	@ 0x46
 8004a56:	d007      	beq.n	8004a68 <__cvt+0x38>
 8004a58:	002b      	movs	r3, r5
 8004a5a:	3b45      	subs	r3, #69	@ 0x45
 8004a5c:	4259      	negs	r1, r3
 8004a5e:	414b      	adcs	r3, r1
 8004a60:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004a62:	3a01      	subs	r2, #1
 8004a64:	18cb      	adds	r3, r1, r3
 8004a66:	9310      	str	r3, [sp, #64]	@ 0x40
 8004a68:	ab09      	add	r3, sp, #36	@ 0x24
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	ab08      	add	r3, sp, #32
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004a72:	9200      	str	r2, [sp, #0]
 8004a74:	9302      	str	r3, [sp, #8]
 8004a76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a78:	0032      	movs	r2, r6
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	003b      	movs	r3, r7
 8004a7e:	f000 fea7 	bl	80057d0 <_dtoa_r>
 8004a82:	0004      	movs	r4, r0
 8004a84:	2d47      	cmp	r5, #71	@ 0x47
 8004a86:	d11b      	bne.n	8004ac0 <__cvt+0x90>
 8004a88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a8a:	07db      	lsls	r3, r3, #31
 8004a8c:	d511      	bpl.n	8004ab2 <__cvt+0x82>
 8004a8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a90:	18c3      	adds	r3, r0, r3
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2300      	movs	r3, #0
 8004a98:	0030      	movs	r0, r6
 8004a9a:	0039      	movs	r1, r7
 8004a9c:	f7fb fcd6 	bl	800044c <__aeabi_dcmpeq>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <__cvt+0x78>
 8004aa4:	9b07      	ldr	r3, [sp, #28]
 8004aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa8:	2230      	movs	r2, #48	@ 0x30
 8004aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aac:	9907      	ldr	r1, [sp, #28]
 8004aae:	428b      	cmp	r3, r1
 8004ab0:	d320      	bcc.n	8004af4 <__cvt+0xc4>
 8004ab2:	0020      	movs	r0, r4
 8004ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004ab8:	1b1b      	subs	r3, r3, r4
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	b00b      	add	sp, #44	@ 0x2c
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ac2:	18c3      	adds	r3, r0, r3
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	2d46      	cmp	r5, #70	@ 0x46
 8004ac8:	d1e4      	bne.n	8004a94 <__cvt+0x64>
 8004aca:	7803      	ldrb	r3, [r0, #0]
 8004acc:	2b30      	cmp	r3, #48	@ 0x30
 8004ace:	d10c      	bne.n	8004aea <__cvt+0xba>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	0039      	movs	r1, r7
 8004ad8:	f7fb fcb8 	bl	800044c <__aeabi_dcmpeq>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d104      	bne.n	8004aea <__cvt+0xba>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004aec:	9a07      	ldr	r2, [sp, #28]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	18d3      	adds	r3, r2, r3
 8004af2:	e7ce      	b.n	8004a92 <__cvt+0x62>
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	9109      	str	r1, [sp, #36]	@ 0x24
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e7d6      	b.n	8004aaa <__cvt+0x7a>

08004afc <__exponent>:
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	232b      	movs	r3, #43	@ 0x2b
 8004b00:	0005      	movs	r5, r0
 8004b02:	000c      	movs	r4, r1
 8004b04:	b085      	sub	sp, #20
 8004b06:	7002      	strb	r2, [r0, #0]
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	da01      	bge.n	8004b10 <__exponent+0x14>
 8004b0c:	424c      	negs	r4, r1
 8004b0e:	3302      	adds	r3, #2
 8004b10:	706b      	strb	r3, [r5, #1]
 8004b12:	2c09      	cmp	r4, #9
 8004b14:	dd2c      	ble.n	8004b70 <__exponent+0x74>
 8004b16:	ab02      	add	r3, sp, #8
 8004b18:	1dde      	adds	r6, r3, #7
 8004b1a:	0020      	movs	r0, r4
 8004b1c:	210a      	movs	r1, #10
 8004b1e:	f7fb fc7f 	bl	8000420 <__aeabi_idivmod>
 8004b22:	0037      	movs	r7, r6
 8004b24:	3130      	adds	r1, #48	@ 0x30
 8004b26:	3e01      	subs	r6, #1
 8004b28:	0020      	movs	r0, r4
 8004b2a:	7031      	strb	r1, [r6, #0]
 8004b2c:	210a      	movs	r1, #10
 8004b2e:	9401      	str	r4, [sp, #4]
 8004b30:	f7fb fb90 	bl	8000254 <__divsi3>
 8004b34:	9b01      	ldr	r3, [sp, #4]
 8004b36:	0004      	movs	r4, r0
 8004b38:	2b63      	cmp	r3, #99	@ 0x63
 8004b3a:	dcee      	bgt.n	8004b1a <__exponent+0x1e>
 8004b3c:	1eba      	subs	r2, r7, #2
 8004b3e:	1ca8      	adds	r0, r5, #2
 8004b40:	0001      	movs	r1, r0
 8004b42:	0013      	movs	r3, r2
 8004b44:	3430      	adds	r4, #48	@ 0x30
 8004b46:	7014      	strb	r4, [r2, #0]
 8004b48:	ac02      	add	r4, sp, #8
 8004b4a:	3407      	adds	r4, #7
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d80a      	bhi.n	8004b66 <__exponent+0x6a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	42a2      	cmp	r2, r4
 8004b54:	d803      	bhi.n	8004b5e <__exponent+0x62>
 8004b56:	3309      	adds	r3, #9
 8004b58:	aa02      	add	r2, sp, #8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	1bdb      	subs	r3, r3, r7
 8004b5e:	18c0      	adds	r0, r0, r3
 8004b60:	1b40      	subs	r0, r0, r5
 8004b62:	b005      	add	sp, #20
 8004b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b66:	781c      	ldrb	r4, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	700c      	strb	r4, [r1, #0]
 8004b6c:	3101      	adds	r1, #1
 8004b6e:	e7eb      	b.n	8004b48 <__exponent+0x4c>
 8004b70:	2330      	movs	r3, #48	@ 0x30
 8004b72:	18e4      	adds	r4, r4, r3
 8004b74:	70ab      	strb	r3, [r5, #2]
 8004b76:	1d28      	adds	r0, r5, #4
 8004b78:	70ec      	strb	r4, [r5, #3]
 8004b7a:	e7f1      	b.n	8004b60 <__exponent+0x64>

08004b7c <_printf_float>:
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b097      	sub	sp, #92	@ 0x5c
 8004b80:	000d      	movs	r5, r1
 8004b82:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b84:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8004b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b88:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b8a:	f000 fd01 	bl	8005590 <_localeconv_r>
 8004b8e:	6803      	ldr	r3, [r0, #0]
 8004b90:	0018      	movs	r0, r3
 8004b92:	930d      	str	r3, [sp, #52]	@ 0x34
 8004b94:	f7fb fab8 	bl	8000108 <strlen>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b9e:	7e2b      	ldrb	r3, [r5, #24]
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ba8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	05c9      	lsls	r1, r1, #23
 8004bae:	d545      	bpl.n	8004c3c <_printf_float+0xc0>
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	3208      	adds	r2, #8
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	681e      	ldr	r6, [r3, #0]
 8004bbe:	685f      	ldr	r7, [r3, #4]
 8004bc0:	007b      	lsls	r3, r7, #1
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	9311      	str	r3, [sp, #68]	@ 0x44
 8004bc6:	9610      	str	r6, [sp, #64]	@ 0x40
 8004bc8:	64ae      	str	r6, [r5, #72]	@ 0x48
 8004bca:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8004bcc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004bce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004bd0:	4ba7      	ldr	r3, [pc, #668]	@ (8004e70 <_printf_float+0x2f4>)
 8004bd2:	4252      	negs	r2, r2
 8004bd4:	f7fd fbf4 	bl	80023c0 <__aeabi_dcmpun>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d131      	bne.n	8004c40 <_printf_float+0xc4>
 8004bdc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004bde:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004be0:	2201      	movs	r2, #1
 8004be2:	4ba3      	ldr	r3, [pc, #652]	@ (8004e70 <_printf_float+0x2f4>)
 8004be4:	4252      	negs	r2, r2
 8004be6:	f7fb fc41 	bl	800046c <__aeabi_dcmple>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d128      	bne.n	8004c40 <_printf_float+0xc4>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	0030      	movs	r0, r6
 8004bf4:	0039      	movs	r1, r7
 8004bf6:	f7fb fc2f 	bl	8000458 <__aeabi_dcmplt>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d003      	beq.n	8004c06 <_printf_float+0x8a>
 8004bfe:	002b      	movs	r3, r5
 8004c00:	222d      	movs	r2, #45	@ 0x2d
 8004c02:	3343      	adds	r3, #67	@ 0x43
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c08:	4f9a      	ldr	r7, [pc, #616]	@ (8004e74 <_printf_float+0x2f8>)
 8004c0a:	2b47      	cmp	r3, #71	@ 0x47
 8004c0c:	d900      	bls.n	8004c10 <_printf_float+0x94>
 8004c0e:	4f9a      	ldr	r7, [pc, #616]	@ (8004e78 <_printf_float+0x2fc>)
 8004c10:	2303      	movs	r3, #3
 8004c12:	2400      	movs	r4, #0
 8004c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c16:	612b      	str	r3, [r5, #16]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	439a      	bics	r2, r3
 8004c1c:	602a      	str	r2, [r5, #0]
 8004c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c20:	0029      	movs	r1, r5
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c28:	aa15      	add	r2, sp, #84	@ 0x54
 8004c2a:	f000 f9e5 	bl	8004ff8 <_printf_common>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d000      	beq.n	8004c34 <_printf_float+0xb8>
 8004c32:	e09f      	b.n	8004d74 <_printf_float+0x1f8>
 8004c34:	2001      	movs	r0, #1
 8004c36:	4240      	negs	r0, r0
 8004c38:	b017      	add	sp, #92	@ 0x5c
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3c:	3307      	adds	r3, #7
 8004c3e:	e7b8      	b.n	8004bb2 <_printf_float+0x36>
 8004c40:	0032      	movs	r2, r6
 8004c42:	003b      	movs	r3, r7
 8004c44:	0030      	movs	r0, r6
 8004c46:	0039      	movs	r1, r7
 8004c48:	f7fd fbba 	bl	80023c0 <__aeabi_dcmpun>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d00b      	beq.n	8004c68 <_printf_float+0xec>
 8004c50:	2f00      	cmp	r7, #0
 8004c52:	da03      	bge.n	8004c5c <_printf_float+0xe0>
 8004c54:	002b      	movs	r3, r5
 8004c56:	222d      	movs	r2, #45	@ 0x2d
 8004c58:	3343      	adds	r3, #67	@ 0x43
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c5e:	4f87      	ldr	r7, [pc, #540]	@ (8004e7c <_printf_float+0x300>)
 8004c60:	2b47      	cmp	r3, #71	@ 0x47
 8004c62:	d9d5      	bls.n	8004c10 <_printf_float+0x94>
 8004c64:	4f86      	ldr	r7, [pc, #536]	@ (8004e80 <_printf_float+0x304>)
 8004c66:	e7d3      	b.n	8004c10 <_printf_float+0x94>
 8004c68:	2220      	movs	r2, #32
 8004c6a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004c6c:	686b      	ldr	r3, [r5, #4]
 8004c6e:	4394      	bics	r4, r2
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	d146      	bne.n	8004d02 <_printf_float+0x186>
 8004c74:	3307      	adds	r3, #7
 8004c76:	606b      	str	r3, [r5, #4]
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	2200      	movs	r2, #0
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	9206      	str	r2, [sp, #24]
 8004c86:	aa14      	add	r2, sp, #80	@ 0x50
 8004c88:	9205      	str	r2, [sp, #20]
 8004c8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c8c:	a90a      	add	r1, sp, #40	@ 0x28
 8004c8e:	9204      	str	r2, [sp, #16]
 8004c90:	aa13      	add	r2, sp, #76	@ 0x4c
 8004c92:	9203      	str	r2, [sp, #12]
 8004c94:	2223      	movs	r2, #35	@ 0x23
 8004c96:	1852      	adds	r2, r2, r1
 8004c98:	9202      	str	r2, [sp, #8]
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	686b      	ldr	r3, [r5, #4]
 8004c9e:	0032      	movs	r2, r6
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ca4:	003b      	movs	r3, r7
 8004ca6:	f7ff fec3 	bl	8004a30 <__cvt>
 8004caa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004cac:	0007      	movs	r7, r0
 8004cae:	2c47      	cmp	r4, #71	@ 0x47
 8004cb0:	d12d      	bne.n	8004d0e <_printf_float+0x192>
 8004cb2:	1cd3      	adds	r3, r2, #3
 8004cb4:	db02      	blt.n	8004cbc <_printf_float+0x140>
 8004cb6:	686b      	ldr	r3, [r5, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dd48      	ble.n	8004d4e <_printf_float+0x1d2>
 8004cbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004cbe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004cca:	3901      	subs	r1, #1
 8004ccc:	3050      	adds	r0, #80	@ 0x50
 8004cce:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004cd0:	f7ff ff14 	bl	8004afc <__exponent>
 8004cd4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004cd6:	0004      	movs	r4, r0
 8004cd8:	1813      	adds	r3, r2, r0
 8004cda:	612b      	str	r3, [r5, #16]
 8004cdc:	2a01      	cmp	r2, #1
 8004cde:	dc02      	bgt.n	8004ce6 <_printf_float+0x16a>
 8004ce0:	682a      	ldr	r2, [r5, #0]
 8004ce2:	07d2      	lsls	r2, r2, #31
 8004ce4:	d501      	bpl.n	8004cea <_printf_float+0x16e>
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	612b      	str	r3, [r5, #16]
 8004cea:	2323      	movs	r3, #35	@ 0x23
 8004cec:	aa0a      	add	r2, sp, #40	@ 0x28
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d100      	bne.n	8004cf8 <_printf_float+0x17c>
 8004cf6:	e792      	b.n	8004c1e <_printf_float+0xa2>
 8004cf8:	002b      	movs	r3, r5
 8004cfa:	222d      	movs	r2, #45	@ 0x2d
 8004cfc:	3343      	adds	r3, #67	@ 0x43
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e78d      	b.n	8004c1e <_printf_float+0xa2>
 8004d02:	2c47      	cmp	r4, #71	@ 0x47
 8004d04:	d1b8      	bne.n	8004c78 <_printf_float+0xfc>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1b6      	bne.n	8004c78 <_printf_float+0xfc>
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	e7b3      	b.n	8004c76 <_printf_float+0xfa>
 8004d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d10:	0011      	movs	r1, r2
 8004d12:	2b65      	cmp	r3, #101	@ 0x65
 8004d14:	d9d7      	bls.n	8004cc6 <_printf_float+0x14a>
 8004d16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d18:	2b66      	cmp	r3, #102	@ 0x66
 8004d1a:	d11a      	bne.n	8004d52 <_printf_float+0x1d6>
 8004d1c:	686b      	ldr	r3, [r5, #4]
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	dd09      	ble.n	8004d36 <_printf_float+0x1ba>
 8004d22:	612a      	str	r2, [r5, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <_printf_float+0x1b2>
 8004d28:	6829      	ldr	r1, [r5, #0]
 8004d2a:	07c9      	lsls	r1, r1, #31
 8004d2c:	d50b      	bpl.n	8004d46 <_printf_float+0x1ca>
 8004d2e:	3301      	adds	r3, #1
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	612b      	str	r3, [r5, #16]
 8004d34:	e007      	b.n	8004d46 <_printf_float+0x1ca>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <_printf_float+0x1c6>
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	6829      	ldr	r1, [r5, #0]
 8004d3e:	4211      	tst	r1, r2
 8004d40:	d000      	beq.n	8004d44 <_printf_float+0x1c8>
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	612a      	str	r2, [r5, #16]
 8004d46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d48:	2400      	movs	r4, #0
 8004d4a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004d4c:	e7cd      	b.n	8004cea <_printf_float+0x16e>
 8004d4e:	2367      	movs	r3, #103	@ 0x67
 8004d50:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004d54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d56:	4299      	cmp	r1, r3
 8004d58:	db06      	blt.n	8004d68 <_printf_float+0x1ec>
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	6129      	str	r1, [r5, #16]
 8004d5e:	07db      	lsls	r3, r3, #31
 8004d60:	d5f1      	bpl.n	8004d46 <_printf_float+0x1ca>
 8004d62:	3101      	adds	r1, #1
 8004d64:	6129      	str	r1, [r5, #16]
 8004d66:	e7ee      	b.n	8004d46 <_printf_float+0x1ca>
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	dce0      	bgt.n	8004d30 <_printf_float+0x1b4>
 8004d6e:	1892      	adds	r2, r2, r2
 8004d70:	1a52      	subs	r2, r2, r1
 8004d72:	e7dd      	b.n	8004d30 <_printf_float+0x1b4>
 8004d74:	682a      	ldr	r2, [r5, #0]
 8004d76:	0553      	lsls	r3, r2, #21
 8004d78:	d408      	bmi.n	8004d8c <_printf_float+0x210>
 8004d7a:	692b      	ldr	r3, [r5, #16]
 8004d7c:	003a      	movs	r2, r7
 8004d7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d82:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004d84:	47a0      	blx	r4
 8004d86:	3001      	adds	r0, #1
 8004d88:	d129      	bne.n	8004dde <_printf_float+0x262>
 8004d8a:	e753      	b.n	8004c34 <_printf_float+0xb8>
 8004d8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d8e:	2b65      	cmp	r3, #101	@ 0x65
 8004d90:	d800      	bhi.n	8004d94 <_printf_float+0x218>
 8004d92:	e0da      	b.n	8004f4a <_printf_float+0x3ce>
 8004d94:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8004d96:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f7fb fb56 	bl	800044c <__aeabi_dcmpeq>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d033      	beq.n	8004e0c <_printf_float+0x290>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4a37      	ldr	r2, [pc, #220]	@ (8004e84 <_printf_float+0x308>)
 8004da8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004dae:	47a0      	blx	r4
 8004db0:	3001      	adds	r0, #1
 8004db2:	d100      	bne.n	8004db6 <_printf_float+0x23a>
 8004db4:	e73e      	b.n	8004c34 <_printf_float+0xb8>
 8004db6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8004db8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004dba:	42b3      	cmp	r3, r6
 8004dbc:	db02      	blt.n	8004dc4 <_printf_float+0x248>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	07db      	lsls	r3, r3, #31
 8004dc2:	d50c      	bpl.n	8004dde <_printf_float+0x262>
 8004dc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dce:	47a0      	blx	r4
 8004dd0:	2400      	movs	r4, #0
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d100      	bne.n	8004dd8 <_printf_float+0x25c>
 8004dd6:	e72d      	b.n	8004c34 <_printf_float+0xb8>
 8004dd8:	1e73      	subs	r3, r6, #1
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	dc0a      	bgt.n	8004df4 <_printf_float+0x278>
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	079b      	lsls	r3, r3, #30
 8004de2:	d500      	bpl.n	8004de6 <_printf_float+0x26a>
 8004de4:	e105      	b.n	8004ff2 <_printf_float+0x476>
 8004de6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004de8:	68e8      	ldr	r0, [r5, #12]
 8004dea:	4298      	cmp	r0, r3
 8004dec:	db00      	blt.n	8004df0 <_printf_float+0x274>
 8004dee:	e723      	b.n	8004c38 <_printf_float+0xbc>
 8004df0:	0018      	movs	r0, r3
 8004df2:	e721      	b.n	8004c38 <_printf_float+0xbc>
 8004df4:	002a      	movs	r2, r5
 8004df6:	2301      	movs	r3, #1
 8004df8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dfc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004dfe:	321a      	adds	r2, #26
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	d100      	bne.n	8004e08 <_printf_float+0x28c>
 8004e06:	e715      	b.n	8004c34 <_printf_float+0xb8>
 8004e08:	3401      	adds	r4, #1
 8004e0a:	e7e5      	b.n	8004dd8 <_printf_float+0x25c>
 8004e0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dc3a      	bgt.n	8004e88 <_printf_float+0x30c>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4a1b      	ldr	r2, [pc, #108]	@ (8004e84 <_printf_float+0x308>)
 8004e16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004e1c:	47a0      	blx	r4
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d100      	bne.n	8004e24 <_printf_float+0x2a8>
 8004e22:	e707      	b.n	8004c34 <_printf_float+0xb8>
 8004e24:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8004e26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e28:	4333      	orrs	r3, r6
 8004e2a:	d102      	bne.n	8004e32 <_printf_float+0x2b6>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	07db      	lsls	r3, r3, #31
 8004e30:	d5d5      	bpl.n	8004dde <_printf_float+0x262>
 8004e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004e3c:	47a0      	blx	r4
 8004e3e:	2300      	movs	r3, #0
 8004e40:	3001      	adds	r0, #1
 8004e42:	d100      	bne.n	8004e46 <_printf_float+0x2ca>
 8004e44:	e6f6      	b.n	8004c34 <_printf_float+0xb8>
 8004e46:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e4c:	425b      	negs	r3, r3
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	dc01      	bgt.n	8004e56 <_printf_float+0x2da>
 8004e52:	0033      	movs	r3, r6
 8004e54:	e792      	b.n	8004d7c <_printf_float+0x200>
 8004e56:	002a      	movs	r2, r5
 8004e58:	2301      	movs	r3, #1
 8004e5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004e60:	321a      	adds	r2, #26
 8004e62:	47a0      	blx	r4
 8004e64:	3001      	adds	r0, #1
 8004e66:	d100      	bne.n	8004e6a <_printf_float+0x2ee>
 8004e68:	e6e4      	b.n	8004c34 <_printf_float+0xb8>
 8004e6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	e7ea      	b.n	8004e46 <_printf_float+0x2ca>
 8004e70:	7fefffff 	.word	0x7fefffff
 8004e74:	08007990 	.word	0x08007990
 8004e78:	08007994 	.word	0x08007994
 8004e7c:	08007998 	.word	0x08007998
 8004e80:	0800799c 	.word	0x0800799c
 8004e84:	080079a0 	.word	0x080079a0
 8004e88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e8a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8004e8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e8e:	429e      	cmp	r6, r3
 8004e90:	dd00      	ble.n	8004e94 <_printf_float+0x318>
 8004e92:	001e      	movs	r6, r3
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	dc31      	bgt.n	8004efc <_printf_float+0x380>
 8004e98:	43f3      	mvns	r3, r6
 8004e9a:	2400      	movs	r4, #0
 8004e9c:	17db      	asrs	r3, r3, #31
 8004e9e:	4033      	ands	r3, r6
 8004ea0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ea2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8004ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ea6:	1af3      	subs	r3, r6, r3
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	dc30      	bgt.n	8004f0e <_printf_float+0x392>
 8004eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004eae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	dc38      	bgt.n	8004f26 <_printf_float+0x3aa>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	07db      	lsls	r3, r3, #31
 8004eb8:	d435      	bmi.n	8004f26 <_printf_float+0x3aa>
 8004eba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8004ebc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ebe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ec0:	1b9b      	subs	r3, r3, r6
 8004ec2:	1b14      	subs	r4, r2, r4
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	dd00      	ble.n	8004eca <_printf_float+0x34e>
 8004ec8:	001c      	movs	r4, r3
 8004eca:	2c00      	cmp	r4, #0
 8004ecc:	dc34      	bgt.n	8004f38 <_printf_float+0x3bc>
 8004ece:	43e3      	mvns	r3, r4
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	17db      	asrs	r3, r3, #31
 8004ed4:	401c      	ands	r4, r3
 8004ed6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	1b1b      	subs	r3, r3, r4
 8004ede:	42b3      	cmp	r3, r6
 8004ee0:	dc00      	bgt.n	8004ee4 <_printf_float+0x368>
 8004ee2:	e77c      	b.n	8004dde <_printf_float+0x262>
 8004ee4:	002a      	movs	r2, r5
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004eee:	321a      	adds	r2, #26
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d100      	bne.n	8004ef8 <_printf_float+0x37c>
 8004ef6:	e69d      	b.n	8004c34 <_printf_float+0xb8>
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7ec      	b.n	8004ed6 <_printf_float+0x35a>
 8004efc:	0033      	movs	r3, r6
 8004efe:	003a      	movs	r2, r7
 8004f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004f06:	47a0      	blx	r4
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d1c5      	bne.n	8004e98 <_printf_float+0x31c>
 8004f0c:	e692      	b.n	8004c34 <_printf_float+0xb8>
 8004f0e:	002a      	movs	r2, r5
 8004f10:	2301      	movs	r3, #1
 8004f12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f18:	321a      	adds	r2, #26
 8004f1a:	47b0      	blx	r6
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d100      	bne.n	8004f22 <_printf_float+0x3a6>
 8004f20:	e688      	b.n	8004c34 <_printf_float+0xb8>
 8004f22:	3401      	adds	r4, #1
 8004f24:	e7bd      	b.n	8004ea2 <_printf_float+0x326>
 8004f26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004f30:	47a0      	blx	r4
 8004f32:	3001      	adds	r0, #1
 8004f34:	d1c1      	bne.n	8004eba <_printf_float+0x33e>
 8004f36:	e67d      	b.n	8004c34 <_printf_float+0xb8>
 8004f38:	19ba      	adds	r2, r7, r6
 8004f3a:	0023      	movs	r3, r4
 8004f3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f40:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f42:	47b0      	blx	r6
 8004f44:	3001      	adds	r0, #1
 8004f46:	d1c2      	bne.n	8004ece <_printf_float+0x352>
 8004f48:	e674      	b.n	8004c34 <_printf_float+0xb8>
 8004f4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	dc02      	bgt.n	8004f58 <_printf_float+0x3dc>
 8004f52:	2301      	movs	r3, #1
 8004f54:	421a      	tst	r2, r3
 8004f56:	d039      	beq.n	8004fcc <_printf_float+0x450>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	003a      	movs	r2, r7
 8004f5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f62:	47b0      	blx	r6
 8004f64:	3001      	adds	r0, #1
 8004f66:	d100      	bne.n	8004f6a <_printf_float+0x3ee>
 8004f68:	e664      	b.n	8004c34 <_printf_float+0xb8>
 8004f6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f72:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f74:	47b0      	blx	r6
 8004f76:	3001      	adds	r0, #1
 8004f78:	d100      	bne.n	8004f7c <_printf_float+0x400>
 8004f7a:	e65b      	b.n	8004c34 <_printf_float+0xb8>
 8004f7c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8004f7e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	3b01      	subs	r3, #1
 8004f86:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f7fb fa5f 	bl	800044c <__aeabi_dcmpeq>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d11a      	bne.n	8004fc8 <_printf_float+0x44c>
 8004f92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f94:	1c7a      	adds	r2, r7, #1
 8004f96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004f9c:	47b0      	blx	r6
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d10e      	bne.n	8004fc0 <_printf_float+0x444>
 8004fa2:	e647      	b.n	8004c34 <_printf_float+0xb8>
 8004fa4:	002a      	movs	r2, r5
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004fae:	321a      	adds	r2, #26
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d100      	bne.n	8004fb8 <_printf_float+0x43c>
 8004fb6:	e63d      	b.n	8004c34 <_printf_float+0xb8>
 8004fb8:	3601      	adds	r6, #1
 8004fba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fbc:	429e      	cmp	r6, r3
 8004fbe:	dbf1      	blt.n	8004fa4 <_printf_float+0x428>
 8004fc0:	002a      	movs	r2, r5
 8004fc2:	0023      	movs	r3, r4
 8004fc4:	3250      	adds	r2, #80	@ 0x50
 8004fc6:	e6da      	b.n	8004d7e <_printf_float+0x202>
 8004fc8:	2600      	movs	r6, #0
 8004fca:	e7f6      	b.n	8004fba <_printf_float+0x43e>
 8004fcc:	003a      	movs	r2, r7
 8004fce:	e7e2      	b.n	8004f96 <_printf_float+0x41a>
 8004fd0:	002a      	movs	r2, r5
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fd8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004fda:	3219      	adds	r2, #25
 8004fdc:	47b0      	blx	r6
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d100      	bne.n	8004fe4 <_printf_float+0x468>
 8004fe2:	e627      	b.n	8004c34 <_printf_float+0xb8>
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	68eb      	ldr	r3, [r5, #12]
 8004fe8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	dcef      	bgt.n	8004fd0 <_printf_float+0x454>
 8004ff0:	e6f9      	b.n	8004de6 <_printf_float+0x26a>
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	e7f7      	b.n	8004fe6 <_printf_float+0x46a>
 8004ff6:	46c0      	nop			@ (mov r8, r8)

08004ff8 <_printf_common>:
 8004ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ffa:	0016      	movs	r6, r2
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	688a      	ldr	r2, [r1, #8]
 8005000:	690b      	ldr	r3, [r1, #16]
 8005002:	000c      	movs	r4, r1
 8005004:	9000      	str	r0, [sp, #0]
 8005006:	4293      	cmp	r3, r2
 8005008:	da00      	bge.n	800500c <_printf_common+0x14>
 800500a:	0013      	movs	r3, r2
 800500c:	0022      	movs	r2, r4
 800500e:	6033      	str	r3, [r6, #0]
 8005010:	3243      	adds	r2, #67	@ 0x43
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	2a00      	cmp	r2, #0
 8005016:	d001      	beq.n	800501c <_printf_common+0x24>
 8005018:	3301      	adds	r3, #1
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	069b      	lsls	r3, r3, #26
 8005020:	d502      	bpl.n	8005028 <_printf_common+0x30>
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	3302      	adds	r3, #2
 8005026:	6033      	str	r3, [r6, #0]
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	2306      	movs	r3, #6
 800502c:	0015      	movs	r5, r2
 800502e:	401d      	ands	r5, r3
 8005030:	421a      	tst	r2, r3
 8005032:	d027      	beq.n	8005084 <_printf_common+0x8c>
 8005034:	0023      	movs	r3, r4
 8005036:	3343      	adds	r3, #67	@ 0x43
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	4193      	sbcs	r3, r2
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d430      	bmi.n	80050a6 <_printf_common+0xae>
 8005044:	0022      	movs	r2, r4
 8005046:	9901      	ldr	r1, [sp, #4]
 8005048:	9800      	ldr	r0, [sp, #0]
 800504a:	9d08      	ldr	r5, [sp, #32]
 800504c:	3243      	adds	r2, #67	@ 0x43
 800504e:	47a8      	blx	r5
 8005050:	3001      	adds	r0, #1
 8005052:	d025      	beq.n	80050a0 <_printf_common+0xa8>
 8005054:	2206      	movs	r2, #6
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	2500      	movs	r5, #0
 800505a:	4013      	ands	r3, r2
 800505c:	2b04      	cmp	r3, #4
 800505e:	d105      	bne.n	800506c <_printf_common+0x74>
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	68e5      	ldr	r5, [r4, #12]
 8005064:	1aed      	subs	r5, r5, r3
 8005066:	43eb      	mvns	r3, r5
 8005068:	17db      	asrs	r3, r3, #31
 800506a:	401d      	ands	r5, r3
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	6922      	ldr	r2, [r4, #16]
 8005070:	4293      	cmp	r3, r2
 8005072:	dd01      	ble.n	8005078 <_printf_common+0x80>
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	18ed      	adds	r5, r5, r3
 8005078:	2600      	movs	r6, #0
 800507a:	42b5      	cmp	r5, r6
 800507c:	d120      	bne.n	80050c0 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e010      	b.n	80050a4 <_printf_common+0xac>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	6832      	ldr	r2, [r6, #0]
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	42ab      	cmp	r3, r5
 800508c:	ddd2      	ble.n	8005034 <_printf_common+0x3c>
 800508e:	0022      	movs	r2, r4
 8005090:	2301      	movs	r3, #1
 8005092:	9901      	ldr	r1, [sp, #4]
 8005094:	9800      	ldr	r0, [sp, #0]
 8005096:	9f08      	ldr	r7, [sp, #32]
 8005098:	3219      	adds	r2, #25
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	d1f0      	bne.n	8005082 <_printf_common+0x8a>
 80050a0:	2001      	movs	r0, #1
 80050a2:	4240      	negs	r0, r0
 80050a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050a6:	2030      	movs	r0, #48	@ 0x30
 80050a8:	18e1      	adds	r1, r4, r3
 80050aa:	3143      	adds	r1, #67	@ 0x43
 80050ac:	7008      	strb	r0, [r1, #0]
 80050ae:	0021      	movs	r1, r4
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	3145      	adds	r1, #69	@ 0x45
 80050b4:	7809      	ldrb	r1, [r1, #0]
 80050b6:	18a2      	adds	r2, r4, r2
 80050b8:	3243      	adds	r2, #67	@ 0x43
 80050ba:	3302      	adds	r3, #2
 80050bc:	7011      	strb	r1, [r2, #0]
 80050be:	e7c1      	b.n	8005044 <_printf_common+0x4c>
 80050c0:	0022      	movs	r2, r4
 80050c2:	2301      	movs	r3, #1
 80050c4:	9901      	ldr	r1, [sp, #4]
 80050c6:	9800      	ldr	r0, [sp, #0]
 80050c8:	9f08      	ldr	r7, [sp, #32]
 80050ca:	321a      	adds	r2, #26
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	d0e6      	beq.n	80050a0 <_printf_common+0xa8>
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7d1      	b.n	800507a <_printf_common+0x82>
	...

080050d8 <_printf_i>:
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b08b      	sub	sp, #44	@ 0x2c
 80050dc:	9206      	str	r2, [sp, #24]
 80050de:	000a      	movs	r2, r1
 80050e0:	3243      	adds	r2, #67	@ 0x43
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9005      	str	r0, [sp, #20]
 80050e6:	9203      	str	r2, [sp, #12]
 80050e8:	7e0a      	ldrb	r2, [r1, #24]
 80050ea:	000c      	movs	r4, r1
 80050ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80050ee:	2a78      	cmp	r2, #120	@ 0x78
 80050f0:	d809      	bhi.n	8005106 <_printf_i+0x2e>
 80050f2:	2a62      	cmp	r2, #98	@ 0x62
 80050f4:	d80b      	bhi.n	800510e <_printf_i+0x36>
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	d100      	bne.n	80050fc <_printf_i+0x24>
 80050fa:	e0bc      	b.n	8005276 <_printf_i+0x19e>
 80050fc:	497b      	ldr	r1, [pc, #492]	@ (80052ec <_printf_i+0x214>)
 80050fe:	9104      	str	r1, [sp, #16]
 8005100:	2a58      	cmp	r2, #88	@ 0x58
 8005102:	d100      	bne.n	8005106 <_printf_i+0x2e>
 8005104:	e090      	b.n	8005228 <_printf_i+0x150>
 8005106:	0025      	movs	r5, r4
 8005108:	3542      	adds	r5, #66	@ 0x42
 800510a:	702a      	strb	r2, [r5, #0]
 800510c:	e022      	b.n	8005154 <_printf_i+0x7c>
 800510e:	0010      	movs	r0, r2
 8005110:	3863      	subs	r0, #99	@ 0x63
 8005112:	2815      	cmp	r0, #21
 8005114:	d8f7      	bhi.n	8005106 <_printf_i+0x2e>
 8005116:	f7fb f809 	bl	800012c <__gnu_thumb1_case_shi>
 800511a:	0016      	.short	0x0016
 800511c:	fff6001f 	.word	0xfff6001f
 8005120:	fff6fff6 	.word	0xfff6fff6
 8005124:	001ffff6 	.word	0x001ffff6
 8005128:	fff6fff6 	.word	0xfff6fff6
 800512c:	fff6fff6 	.word	0xfff6fff6
 8005130:	003600a1 	.word	0x003600a1
 8005134:	fff60080 	.word	0xfff60080
 8005138:	00b2fff6 	.word	0x00b2fff6
 800513c:	0036fff6 	.word	0x0036fff6
 8005140:	fff6fff6 	.word	0xfff6fff6
 8005144:	0084      	.short	0x0084
 8005146:	0025      	movs	r5, r4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	3542      	adds	r5, #66	@ 0x42
 800514c:	1d11      	adds	r1, r2, #4
 800514e:	6019      	str	r1, [r3, #0]
 8005150:	6813      	ldr	r3, [r2, #0]
 8005152:	702b      	strb	r3, [r5, #0]
 8005154:	2301      	movs	r3, #1
 8005156:	e0a0      	b.n	800529a <_printf_i+0x1c2>
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	6809      	ldr	r1, [r1, #0]
 800515c:	1d02      	adds	r2, r0, #4
 800515e:	060d      	lsls	r5, r1, #24
 8005160:	d50b      	bpl.n	800517a <_printf_i+0xa2>
 8005162:	6806      	ldr	r6, [r0, #0]
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	2e00      	cmp	r6, #0
 8005168:	da03      	bge.n	8005172 <_printf_i+0x9a>
 800516a:	232d      	movs	r3, #45	@ 0x2d
 800516c:	9a03      	ldr	r2, [sp, #12]
 800516e:	4276      	negs	r6, r6
 8005170:	7013      	strb	r3, [r2, #0]
 8005172:	4b5e      	ldr	r3, [pc, #376]	@ (80052ec <_printf_i+0x214>)
 8005174:	270a      	movs	r7, #10
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	e018      	b.n	80051ac <_printf_i+0xd4>
 800517a:	6806      	ldr	r6, [r0, #0]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	0649      	lsls	r1, r1, #25
 8005180:	d5f1      	bpl.n	8005166 <_printf_i+0x8e>
 8005182:	b236      	sxth	r6, r6
 8005184:	e7ef      	b.n	8005166 <_printf_i+0x8e>
 8005186:	6808      	ldr	r0, [r1, #0]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	c940      	ldmia	r1!, {r6}
 800518c:	0605      	lsls	r5, r0, #24
 800518e:	d402      	bmi.n	8005196 <_printf_i+0xbe>
 8005190:	0640      	lsls	r0, r0, #25
 8005192:	d500      	bpl.n	8005196 <_printf_i+0xbe>
 8005194:	b2b6      	uxth	r6, r6
 8005196:	6019      	str	r1, [r3, #0]
 8005198:	4b54      	ldr	r3, [pc, #336]	@ (80052ec <_printf_i+0x214>)
 800519a:	270a      	movs	r7, #10
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	2a6f      	cmp	r2, #111	@ 0x6f
 80051a0:	d100      	bne.n	80051a4 <_printf_i+0xcc>
 80051a2:	3f02      	subs	r7, #2
 80051a4:	0023      	movs	r3, r4
 80051a6:	2200      	movs	r2, #0
 80051a8:	3343      	adds	r3, #67	@ 0x43
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	60a3      	str	r3, [r4, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db03      	blt.n	80051bc <_printf_i+0xe4>
 80051b4:	2104      	movs	r1, #4
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	438a      	bics	r2, r1
 80051ba:	6022      	str	r2, [r4, #0]
 80051bc:	2e00      	cmp	r6, #0
 80051be:	d102      	bne.n	80051c6 <_printf_i+0xee>
 80051c0:	9d03      	ldr	r5, [sp, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <_printf_i+0x108>
 80051c6:	9d03      	ldr	r5, [sp, #12]
 80051c8:	0030      	movs	r0, r6
 80051ca:	0039      	movs	r1, r7
 80051cc:	f7fb f83e 	bl	800024c <__aeabi_uidivmod>
 80051d0:	9b04      	ldr	r3, [sp, #16]
 80051d2:	3d01      	subs	r5, #1
 80051d4:	5c5b      	ldrb	r3, [r3, r1]
 80051d6:	702b      	strb	r3, [r5, #0]
 80051d8:	0033      	movs	r3, r6
 80051da:	0006      	movs	r6, r0
 80051dc:	429f      	cmp	r7, r3
 80051de:	d9f3      	bls.n	80051c8 <_printf_i+0xf0>
 80051e0:	2f08      	cmp	r7, #8
 80051e2:	d109      	bne.n	80051f8 <_printf_i+0x120>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	07db      	lsls	r3, r3, #31
 80051e8:	d506      	bpl.n	80051f8 <_printf_i+0x120>
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dc02      	bgt.n	80051f8 <_printf_i+0x120>
 80051f2:	2330      	movs	r3, #48	@ 0x30
 80051f4:	3d01      	subs	r5, #1
 80051f6:	702b      	strb	r3, [r5, #0]
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	1b5b      	subs	r3, r3, r5
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	9b07      	ldr	r3, [sp, #28]
 8005200:	0021      	movs	r1, r4
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	9805      	ldr	r0, [sp, #20]
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	aa09      	add	r2, sp, #36	@ 0x24
 800520a:	f7ff fef5 	bl	8004ff8 <_printf_common>
 800520e:	3001      	adds	r0, #1
 8005210:	d148      	bne.n	80052a4 <_printf_i+0x1cc>
 8005212:	2001      	movs	r0, #1
 8005214:	4240      	negs	r0, r0
 8005216:	b00b      	add	sp, #44	@ 0x2c
 8005218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521a:	2220      	movs	r2, #32
 800521c:	6809      	ldr	r1, [r1, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	6022      	str	r2, [r4, #0]
 8005222:	2278      	movs	r2, #120	@ 0x78
 8005224:	4932      	ldr	r1, [pc, #200]	@ (80052f0 <_printf_i+0x218>)
 8005226:	9104      	str	r1, [sp, #16]
 8005228:	0021      	movs	r1, r4
 800522a:	3145      	adds	r1, #69	@ 0x45
 800522c:	700a      	strb	r2, [r1, #0]
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	c940      	ldmia	r1!, {r6}
 8005234:	0610      	lsls	r0, r2, #24
 8005236:	d402      	bmi.n	800523e <_printf_i+0x166>
 8005238:	0650      	lsls	r0, r2, #25
 800523a:	d500      	bpl.n	800523e <_printf_i+0x166>
 800523c:	b2b6      	uxth	r6, r6
 800523e:	6019      	str	r1, [r3, #0]
 8005240:	07d3      	lsls	r3, r2, #31
 8005242:	d502      	bpl.n	800524a <_printf_i+0x172>
 8005244:	2320      	movs	r3, #32
 8005246:	4313      	orrs	r3, r2
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	2e00      	cmp	r6, #0
 800524c:	d001      	beq.n	8005252 <_printf_i+0x17a>
 800524e:	2710      	movs	r7, #16
 8005250:	e7a8      	b.n	80051a4 <_printf_i+0xcc>
 8005252:	2220      	movs	r2, #32
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	4393      	bics	r3, r2
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	e7f8      	b.n	800524e <_printf_i+0x176>
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	680d      	ldr	r5, [r1, #0]
 8005260:	1d10      	adds	r0, r2, #4
 8005262:	6949      	ldr	r1, [r1, #20]
 8005264:	6018      	str	r0, [r3, #0]
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	062e      	lsls	r6, r5, #24
 800526a:	d501      	bpl.n	8005270 <_printf_i+0x198>
 800526c:	6019      	str	r1, [r3, #0]
 800526e:	e002      	b.n	8005276 <_printf_i+0x19e>
 8005270:	066d      	lsls	r5, r5, #25
 8005272:	d5fb      	bpl.n	800526c <_printf_i+0x194>
 8005274:	8019      	strh	r1, [r3, #0]
 8005276:	2300      	movs	r3, #0
 8005278:	9d03      	ldr	r5, [sp, #12]
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	e7bf      	b.n	80051fe <_printf_i+0x126>
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	1d11      	adds	r1, r2, #4
 8005282:	6019      	str	r1, [r3, #0]
 8005284:	6815      	ldr	r5, [r2, #0]
 8005286:	2100      	movs	r1, #0
 8005288:	0028      	movs	r0, r5
 800528a:	6862      	ldr	r2, [r4, #4]
 800528c:	f000 fa07 	bl	800569e <memchr>
 8005290:	2800      	cmp	r0, #0
 8005292:	d001      	beq.n	8005298 <_printf_i+0x1c0>
 8005294:	1b40      	subs	r0, r0, r5
 8005296:	6060      	str	r0, [r4, #4]
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	2300      	movs	r3, #0
 800529e:	9a03      	ldr	r2, [sp, #12]
 80052a0:	7013      	strb	r3, [r2, #0]
 80052a2:	e7ac      	b.n	80051fe <_printf_i+0x126>
 80052a4:	002a      	movs	r2, r5
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	9906      	ldr	r1, [sp, #24]
 80052aa:	9805      	ldr	r0, [sp, #20]
 80052ac:	9d07      	ldr	r5, [sp, #28]
 80052ae:	47a8      	blx	r5
 80052b0:	3001      	adds	r0, #1
 80052b2:	d0ae      	beq.n	8005212 <_printf_i+0x13a>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	079b      	lsls	r3, r3, #30
 80052b8:	d415      	bmi.n	80052e6 <_printf_i+0x20e>
 80052ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052bc:	68e0      	ldr	r0, [r4, #12]
 80052be:	4298      	cmp	r0, r3
 80052c0:	daa9      	bge.n	8005216 <_printf_i+0x13e>
 80052c2:	0018      	movs	r0, r3
 80052c4:	e7a7      	b.n	8005216 <_printf_i+0x13e>
 80052c6:	0022      	movs	r2, r4
 80052c8:	2301      	movs	r3, #1
 80052ca:	9906      	ldr	r1, [sp, #24]
 80052cc:	9805      	ldr	r0, [sp, #20]
 80052ce:	9e07      	ldr	r6, [sp, #28]
 80052d0:	3219      	adds	r2, #25
 80052d2:	47b0      	blx	r6
 80052d4:	3001      	adds	r0, #1
 80052d6:	d09c      	beq.n	8005212 <_printf_i+0x13a>
 80052d8:	3501      	adds	r5, #1
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	42ab      	cmp	r3, r5
 80052e2:	dcf0      	bgt.n	80052c6 <_printf_i+0x1ee>
 80052e4:	e7e9      	b.n	80052ba <_printf_i+0x1e2>
 80052e6:	2500      	movs	r5, #0
 80052e8:	e7f7      	b.n	80052da <_printf_i+0x202>
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	080079a2 	.word	0x080079a2
 80052f0:	080079b3 	.word	0x080079b3

080052f4 <std>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b510      	push	{r4, lr}
 80052f8:	0004      	movs	r4, r0
 80052fa:	6003      	str	r3, [r0, #0]
 80052fc:	6043      	str	r3, [r0, #4]
 80052fe:	6083      	str	r3, [r0, #8]
 8005300:	8181      	strh	r1, [r0, #12]
 8005302:	6643      	str	r3, [r0, #100]	@ 0x64
 8005304:	81c2      	strh	r2, [r0, #14]
 8005306:	6103      	str	r3, [r0, #16]
 8005308:	6143      	str	r3, [r0, #20]
 800530a:	6183      	str	r3, [r0, #24]
 800530c:	0019      	movs	r1, r3
 800530e:	2208      	movs	r2, #8
 8005310:	305c      	adds	r0, #92	@ 0x5c
 8005312:	f000 f91f 	bl	8005554 <memset>
 8005316:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <std+0x50>)
 8005318:	6224      	str	r4, [r4, #32]
 800531a:	6263      	str	r3, [r4, #36]	@ 0x24
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <std+0x54>)
 800531e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <std+0x58>)
 8005322:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005324:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <std+0x5c>)
 8005326:	6323      	str	r3, [r4, #48]	@ 0x30
 8005328:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <std+0x60>)
 800532a:	429c      	cmp	r4, r3
 800532c:	d005      	beq.n	800533a <std+0x46>
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <std+0x64>)
 8005330:	429c      	cmp	r4, r3
 8005332:	d002      	beq.n	800533a <std+0x46>
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <std+0x68>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d103      	bne.n	8005342 <std+0x4e>
 800533a:	0020      	movs	r0, r4
 800533c:	3058      	adds	r0, #88	@ 0x58
 800533e:	f000 f9a3 	bl	8005688 <__retarget_lock_init_recursive>
 8005342:	bd10      	pop	{r4, pc}
 8005344:	080054bd 	.word	0x080054bd
 8005348:	080054e5 	.word	0x080054e5
 800534c:	0800551d 	.word	0x0800551d
 8005350:	08005549 	.word	0x08005549
 8005354:	20000440 	.word	0x20000440
 8005358:	200004a8 	.word	0x200004a8
 800535c:	20000510 	.word	0x20000510

08005360 <stdio_exit_handler>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4a03      	ldr	r2, [pc, #12]	@ (8005370 <stdio_exit_handler+0x10>)
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <stdio_exit_handler+0x14>)
 8005366:	4804      	ldr	r0, [pc, #16]	@ (8005378 <stdio_exit_handler+0x18>)
 8005368:	f000 f86c 	bl	8005444 <_fwalk_sglue>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	2000000c 	.word	0x2000000c
 8005374:	080070d5 	.word	0x080070d5
 8005378:	2000001c 	.word	0x2000001c

0800537c <cleanup_stdio>:
 800537c:	6841      	ldr	r1, [r0, #4]
 800537e:	4b0b      	ldr	r3, [pc, #44]	@ (80053ac <cleanup_stdio+0x30>)
 8005380:	b510      	push	{r4, lr}
 8005382:	0004      	movs	r4, r0
 8005384:	4299      	cmp	r1, r3
 8005386:	d001      	beq.n	800538c <cleanup_stdio+0x10>
 8005388:	f001 fea4 	bl	80070d4 <_fflush_r>
 800538c:	68a1      	ldr	r1, [r4, #8]
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <cleanup_stdio+0x34>)
 8005390:	4299      	cmp	r1, r3
 8005392:	d002      	beq.n	800539a <cleanup_stdio+0x1e>
 8005394:	0020      	movs	r0, r4
 8005396:	f001 fe9d 	bl	80070d4 <_fflush_r>
 800539a:	68e1      	ldr	r1, [r4, #12]
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <cleanup_stdio+0x38>)
 800539e:	4299      	cmp	r1, r3
 80053a0:	d002      	beq.n	80053a8 <cleanup_stdio+0x2c>
 80053a2:	0020      	movs	r0, r4
 80053a4:	f001 fe96 	bl	80070d4 <_fflush_r>
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	20000440 	.word	0x20000440
 80053b0:	200004a8 	.word	0x200004a8
 80053b4:	20000510 	.word	0x20000510

080053b8 <global_stdio_init.part.0>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <global_stdio_init.part.0+0x28>)
 80053bc:	4a09      	ldr	r2, [pc, #36]	@ (80053e4 <global_stdio_init.part.0+0x2c>)
 80053be:	2104      	movs	r1, #4
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	4809      	ldr	r0, [pc, #36]	@ (80053e8 <global_stdio_init.part.0+0x30>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	f7ff ff95 	bl	80052f4 <std>
 80053ca:	2201      	movs	r2, #1
 80053cc:	2109      	movs	r1, #9
 80053ce:	4807      	ldr	r0, [pc, #28]	@ (80053ec <global_stdio_init.part.0+0x34>)
 80053d0:	f7ff ff90 	bl	80052f4 <std>
 80053d4:	2202      	movs	r2, #2
 80053d6:	2112      	movs	r1, #18
 80053d8:	4805      	ldr	r0, [pc, #20]	@ (80053f0 <global_stdio_init.part.0+0x38>)
 80053da:	f7ff ff8b 	bl	80052f4 <std>
 80053de:	bd10      	pop	{r4, pc}
 80053e0:	20000578 	.word	0x20000578
 80053e4:	08005361 	.word	0x08005361
 80053e8:	20000440 	.word	0x20000440
 80053ec:	200004a8 	.word	0x200004a8
 80053f0:	20000510 	.word	0x20000510

080053f4 <__sfp_lock_acquire>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4802      	ldr	r0, [pc, #8]	@ (8005400 <__sfp_lock_acquire+0xc>)
 80053f8:	f000 f947 	bl	800568a <__retarget_lock_acquire_recursive>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	20000581 	.word	0x20000581

08005404 <__sfp_lock_release>:
 8005404:	b510      	push	{r4, lr}
 8005406:	4802      	ldr	r0, [pc, #8]	@ (8005410 <__sfp_lock_release+0xc>)
 8005408:	f000 f940 	bl	800568c <__retarget_lock_release_recursive>
 800540c:	bd10      	pop	{r4, pc}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	20000581 	.word	0x20000581

08005414 <__sinit>:
 8005414:	b510      	push	{r4, lr}
 8005416:	0004      	movs	r4, r0
 8005418:	f7ff ffec 	bl	80053f4 <__sfp_lock_acquire>
 800541c:	6a23      	ldr	r3, [r4, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <__sinit+0x14>
 8005422:	f7ff ffef 	bl	8005404 <__sfp_lock_release>
 8005426:	bd10      	pop	{r4, pc}
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <__sinit+0x28>)
 800542a:	6223      	str	r3, [r4, #32]
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <__sinit+0x2c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f6      	bne.n	8005422 <__sinit+0xe>
 8005434:	f7ff ffc0 	bl	80053b8 <global_stdio_init.part.0>
 8005438:	e7f3      	b.n	8005422 <__sinit+0xe>
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	0800537d 	.word	0x0800537d
 8005440:	20000578 	.word	0x20000578

08005444 <_fwalk_sglue>:
 8005444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005446:	0014      	movs	r4, r2
 8005448:	2600      	movs	r6, #0
 800544a:	9000      	str	r0, [sp, #0]
 800544c:	9101      	str	r1, [sp, #4]
 800544e:	68a5      	ldr	r5, [r4, #8]
 8005450:	6867      	ldr	r7, [r4, #4]
 8005452:	3f01      	subs	r7, #1
 8005454:	d504      	bpl.n	8005460 <_fwalk_sglue+0x1c>
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	2c00      	cmp	r4, #0
 800545a:	d1f8      	bne.n	800544e <_fwalk_sglue+0xa>
 800545c:	0030      	movs	r0, r6
 800545e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005460:	89ab      	ldrh	r3, [r5, #12]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d908      	bls.n	8005478 <_fwalk_sglue+0x34>
 8005466:	220e      	movs	r2, #14
 8005468:	5eab      	ldrsh	r3, [r5, r2]
 800546a:	3301      	adds	r3, #1
 800546c:	d004      	beq.n	8005478 <_fwalk_sglue+0x34>
 800546e:	0029      	movs	r1, r5
 8005470:	9800      	ldr	r0, [sp, #0]
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	4798      	blx	r3
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	@ 0x68
 800547a:	e7ea      	b.n	8005452 <_fwalk_sglue+0xe>

0800547c <siprintf>:
 800547c:	b40e      	push	{r1, r2, r3}
 800547e:	b500      	push	{lr}
 8005480:	490b      	ldr	r1, [pc, #44]	@ (80054b0 <siprintf+0x34>)
 8005482:	b09c      	sub	sp, #112	@ 0x70
 8005484:	ab1d      	add	r3, sp, #116	@ 0x74
 8005486:	9002      	str	r0, [sp, #8]
 8005488:	9006      	str	r0, [sp, #24]
 800548a:	9107      	str	r1, [sp, #28]
 800548c:	9104      	str	r1, [sp, #16]
 800548e:	4809      	ldr	r0, [pc, #36]	@ (80054b4 <siprintf+0x38>)
 8005490:	4909      	ldr	r1, [pc, #36]	@ (80054b8 <siprintf+0x3c>)
 8005492:	cb04      	ldmia	r3!, {r2}
 8005494:	9105      	str	r1, [sp, #20]
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	a902      	add	r1, sp, #8
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	f001 fc96 	bl	8006dcc <_svfiprintf_r>
 80054a0:	2200      	movs	r2, #0
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	b01c      	add	sp, #112	@ 0x70
 80054a8:	bc08      	pop	{r3}
 80054aa:	b003      	add	sp, #12
 80054ac:	4718      	bx	r3
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	7fffffff 	.word	0x7fffffff
 80054b4:	20000018 	.word	0x20000018
 80054b8:	ffff0208 	.word	0xffff0208

080054bc <__sread>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	000c      	movs	r4, r1
 80054c0:	250e      	movs	r5, #14
 80054c2:	5f49      	ldrsh	r1, [r1, r5]
 80054c4:	f000 f88e 	bl	80055e4 <_read_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	db03      	blt.n	80054d4 <__sread+0x18>
 80054cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054ce:	181b      	adds	r3, r3, r0
 80054d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	4a02      	ldr	r2, [pc, #8]	@ (80054e0 <__sread+0x24>)
 80054d8:	4013      	ands	r3, r2
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	e7f9      	b.n	80054d2 <__sread+0x16>
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	ffffefff 	.word	0xffffefff

080054e4 <__swrite>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	001f      	movs	r7, r3
 80054e8:	898b      	ldrh	r3, [r1, #12]
 80054ea:	0005      	movs	r5, r0
 80054ec:	000c      	movs	r4, r1
 80054ee:	0016      	movs	r6, r2
 80054f0:	05db      	lsls	r3, r3, #23
 80054f2:	d505      	bpl.n	8005500 <__swrite+0x1c>
 80054f4:	230e      	movs	r3, #14
 80054f6:	5ec9      	ldrsh	r1, [r1, r3]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2302      	movs	r3, #2
 80054fc:	f000 f85e 	bl	80055bc <_lseek_r>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	4a05      	ldr	r2, [pc, #20]	@ (8005518 <__swrite+0x34>)
 8005504:	0028      	movs	r0, r5
 8005506:	4013      	ands	r3, r2
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	0032      	movs	r2, r6
 800550c:	230e      	movs	r3, #14
 800550e:	5ee1      	ldrsh	r1, [r4, r3]
 8005510:	003b      	movs	r3, r7
 8005512:	f000 f87b 	bl	800560c <_write_r>
 8005516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005518:	ffffefff 	.word	0xffffefff

0800551c <__sseek>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	000c      	movs	r4, r1
 8005520:	250e      	movs	r5, #14
 8005522:	5f49      	ldrsh	r1, [r1, r5]
 8005524:	f000 f84a 	bl	80055bc <_lseek_r>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	1c42      	adds	r2, r0, #1
 800552c:	d103      	bne.n	8005536 <__sseek+0x1a>
 800552e:	4a05      	ldr	r2, [pc, #20]	@ (8005544 <__sseek+0x28>)
 8005530:	4013      	ands	r3, r2
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	2280      	movs	r2, #128	@ 0x80
 8005538:	0152      	lsls	r2, r2, #5
 800553a:	4313      	orrs	r3, r2
 800553c:	81a3      	strh	r3, [r4, #12]
 800553e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005540:	e7f8      	b.n	8005534 <__sseek+0x18>
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	ffffefff 	.word	0xffffefff

08005548 <__sclose>:
 8005548:	b510      	push	{r4, lr}
 800554a:	230e      	movs	r3, #14
 800554c:	5ec9      	ldrsh	r1, [r1, r3]
 800554e:	f000 f823 	bl	8005598 <_close_r>
 8005552:	bd10      	pop	{r4, pc}

08005554 <memset>:
 8005554:	0003      	movs	r3, r0
 8005556:	1882      	adds	r2, r0, r2
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	7019      	strb	r1, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <strstr>:
 8005564:	780a      	ldrb	r2, [r1, #0]
 8005566:	b530      	push	{r4, r5, lr}
 8005568:	2a00      	cmp	r2, #0
 800556a:	d10c      	bne.n	8005586 <strstr+0x22>
 800556c:	bd30      	pop	{r4, r5, pc}
 800556e:	429a      	cmp	r2, r3
 8005570:	d108      	bne.n	8005584 <strstr+0x20>
 8005572:	2301      	movs	r3, #1
 8005574:	5ccc      	ldrb	r4, [r1, r3]
 8005576:	2c00      	cmp	r4, #0
 8005578:	d0f8      	beq.n	800556c <strstr+0x8>
 800557a:	5cc5      	ldrb	r5, [r0, r3]
 800557c:	42a5      	cmp	r5, r4
 800557e:	d101      	bne.n	8005584 <strstr+0x20>
 8005580:	3301      	adds	r3, #1
 8005582:	e7f7      	b.n	8005574 <strstr+0x10>
 8005584:	3001      	adds	r0, #1
 8005586:	7803      	ldrb	r3, [r0, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f0      	bne.n	800556e <strstr+0xa>
 800558c:	0018      	movs	r0, r3
 800558e:	e7ed      	b.n	800556c <strstr+0x8>

08005590 <_localeconv_r>:
 8005590:	4800      	ldr	r0, [pc, #0]	@ (8005594 <_localeconv_r+0x4>)
 8005592:	4770      	bx	lr
 8005594:	20000158 	.word	0x20000158

08005598 <_close_r>:
 8005598:	2300      	movs	r3, #0
 800559a:	b570      	push	{r4, r5, r6, lr}
 800559c:	4d06      	ldr	r5, [pc, #24]	@ (80055b8 <_close_r+0x20>)
 800559e:	0004      	movs	r4, r0
 80055a0:	0008      	movs	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fd faee 	bl	8002b84 <_close>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d103      	bne.n	80055b4 <_close_r+0x1c>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d000      	beq.n	80055b4 <_close_r+0x1c>
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	2000057c 	.word	0x2000057c

080055bc <_lseek_r>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	0004      	movs	r4, r0
 80055c0:	0008      	movs	r0, r1
 80055c2:	0011      	movs	r1, r2
 80055c4:	001a      	movs	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	4d05      	ldr	r5, [pc, #20]	@ (80055e0 <_lseek_r+0x24>)
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fd fae4 	bl	8002b98 <_lseek>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d103      	bne.n	80055dc <_lseek_r+0x20>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d000      	beq.n	80055dc <_lseek_r+0x20>
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	2000057c 	.word	0x2000057c

080055e4 <_read_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	0004      	movs	r4, r0
 80055e8:	0008      	movs	r0, r1
 80055ea:	0011      	movs	r1, r2
 80055ec:	001a      	movs	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	4d05      	ldr	r5, [pc, #20]	@ (8005608 <_read_r+0x24>)
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	f7fd faac 	bl	8002b50 <_read>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d103      	bne.n	8005604 <_read_r+0x20>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d000      	beq.n	8005604 <_read_r+0x20>
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	2000057c 	.word	0x2000057c

0800560c <_write_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0004      	movs	r4, r0
 8005610:	0008      	movs	r0, r1
 8005612:	0011      	movs	r1, r2
 8005614:	001a      	movs	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	@ (8005630 <_write_r+0x24>)
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fd faa5 	bl	8002b6a <_write>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d103      	bne.n	800562c <_write_r+0x20>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <_write_r+0x20>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	2000057c 	.word	0x2000057c

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	@ (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	20000018 	.word	0x20000018

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	2600      	movs	r6, #0
 8005644:	4c0c      	ldr	r4, [pc, #48]	@ (8005678 <__libc_init_array+0x38>)
 8005646:	4d0d      	ldr	r5, [pc, #52]	@ (800567c <__libc_init_array+0x3c>)
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	2600      	movs	r6, #0
 8005652:	f002 f90f 	bl	8007874 <_init>
 8005656:	4c0a      	ldr	r4, [pc, #40]	@ (8005680 <__libc_init_array+0x40>)
 8005658:	4d0a      	ldr	r5, [pc, #40]	@ (8005684 <__libc_init_array+0x44>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	00b3      	lsls	r3, r6, #2
 8005666:	58eb      	ldr	r3, [r5, r3]
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	00b3      	lsls	r3, r6, #2
 8005670:	58eb      	ldr	r3, [r5, r3]
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	08007d00 	.word	0x08007d00
 800567c:	08007d00 	.word	0x08007d00
 8005680:	08007d04 	.word	0x08007d04
 8005684:	08007d00 	.word	0x08007d00

08005688 <__retarget_lock_init_recursive>:
 8005688:	4770      	bx	lr

0800568a <__retarget_lock_acquire_recursive>:
 800568a:	4770      	bx	lr

0800568c <__retarget_lock_release_recursive>:
 800568c:	4770      	bx	lr

0800568e <strcpy>:
 800568e:	0003      	movs	r3, r0
 8005690:	780a      	ldrb	r2, [r1, #0]
 8005692:	3101      	adds	r1, #1
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	2a00      	cmp	r2, #0
 800569a:	d1f9      	bne.n	8005690 <strcpy+0x2>
 800569c:	4770      	bx	lr

0800569e <memchr>:
 800569e:	b2c9      	uxtb	r1, r1
 80056a0:	1882      	adds	r2, r0, r2
 80056a2:	4290      	cmp	r0, r2
 80056a4:	d101      	bne.n	80056aa <memchr+0xc>
 80056a6:	2000      	movs	r0, #0
 80056a8:	4770      	bx	lr
 80056aa:	7803      	ldrb	r3, [r0, #0]
 80056ac:	428b      	cmp	r3, r1
 80056ae:	d0fb      	beq.n	80056a8 <memchr+0xa>
 80056b0:	3001      	adds	r0, #1
 80056b2:	e7f6      	b.n	80056a2 <memchr+0x4>

080056b4 <quorem>:
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b6:	6902      	ldr	r2, [r0, #16]
 80056b8:	690f      	ldr	r7, [r1, #16]
 80056ba:	b087      	sub	sp, #28
 80056bc:	0006      	movs	r6, r0
 80056be:	000b      	movs	r3, r1
 80056c0:	2000      	movs	r0, #0
 80056c2:	9102      	str	r1, [sp, #8]
 80056c4:	42ba      	cmp	r2, r7
 80056c6:	db6d      	blt.n	80057a4 <quorem+0xf0>
 80056c8:	3f01      	subs	r7, #1
 80056ca:	00bc      	lsls	r4, r7, #2
 80056cc:	3314      	adds	r3, #20
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	191b      	adds	r3, r3, r4
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	0033      	movs	r3, r6
 80056d6:	3314      	adds	r3, #20
 80056d8:	191c      	adds	r4, r3, r4
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	9804      	ldr	r0, [sp, #16]
 80056e4:	681d      	ldr	r5, [r3, #0]
 80056e6:	3501      	adds	r5, #1
 80056e8:	0029      	movs	r1, r5
 80056ea:	f7fa fd29 	bl	8000140 <__udivsi3>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	9000      	str	r0, [sp, #0]
 80056f2:	42ab      	cmp	r3, r5
 80056f4:	d32b      	bcc.n	800574e <quorem+0x9a>
 80056f6:	9b05      	ldr	r3, [sp, #20]
 80056f8:	9d01      	ldr	r5, [sp, #4]
 80056fa:	469c      	mov	ip, r3
 80056fc:	2300      	movs	r3, #0
 80056fe:	9305      	str	r3, [sp, #20]
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	4662      	mov	r2, ip
 8005704:	ca08      	ldmia	r2!, {r3}
 8005706:	6828      	ldr	r0, [r5, #0]
 8005708:	4694      	mov	ip, r2
 800570a:	9a00      	ldr	r2, [sp, #0]
 800570c:	b299      	uxth	r1, r3
 800570e:	4351      	muls	r1, r2
 8005710:	9a05      	ldr	r2, [sp, #20]
 8005712:	0c1b      	lsrs	r3, r3, #16
 8005714:	1889      	adds	r1, r1, r2
 8005716:	9a00      	ldr	r2, [sp, #0]
 8005718:	4353      	muls	r3, r2
 800571a:	0c0a      	lsrs	r2, r1, #16
 800571c:	189b      	adds	r3, r3, r2
 800571e:	0c1a      	lsrs	r2, r3, #16
 8005720:	b289      	uxth	r1, r1
 8005722:	9205      	str	r2, [sp, #20]
 8005724:	b282      	uxth	r2, r0
 8005726:	1a52      	subs	r2, r2, r1
 8005728:	9904      	ldr	r1, [sp, #16]
 800572a:	0c00      	lsrs	r0, r0, #16
 800572c:	1852      	adds	r2, r2, r1
 800572e:	b29b      	uxth	r3, r3
 8005730:	1411      	asrs	r1, r2, #16
 8005732:	1ac3      	subs	r3, r0, r3
 8005734:	185b      	adds	r3, r3, r1
 8005736:	1419      	asrs	r1, r3, #16
 8005738:	b292      	uxth	r2, r2
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	431a      	orrs	r2, r3
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	9104      	str	r1, [sp, #16]
 8005742:	c504      	stmia	r5!, {r2}
 8005744:	4563      	cmp	r3, ip
 8005746:	d2dc      	bcs.n	8005702 <quorem+0x4e>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d030      	beq.n	80057b0 <quorem+0xfc>
 800574e:	0030      	movs	r0, r6
 8005750:	9902      	ldr	r1, [sp, #8]
 8005752:	f001 f9c5 	bl	8006ae0 <__mcmp>
 8005756:	2800      	cmp	r0, #0
 8005758:	db23      	blt.n	80057a2 <quorem+0xee>
 800575a:	0034      	movs	r4, r6
 800575c:	2500      	movs	r5, #0
 800575e:	9902      	ldr	r1, [sp, #8]
 8005760:	3414      	adds	r4, #20
 8005762:	3114      	adds	r1, #20
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	c901      	ldmia	r1!, {r0}
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	466b      	mov	r3, sp
 800576c:	891b      	ldrh	r3, [r3, #8]
 800576e:	b282      	uxth	r2, r0
 8005770:	1a9a      	subs	r2, r3, r2
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	1952      	adds	r2, r2, r5
 8005776:	0c00      	lsrs	r0, r0, #16
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	1a1b      	subs	r3, r3, r0
 800577c:	1410      	asrs	r0, r2, #16
 800577e:	181b      	adds	r3, r3, r0
 8005780:	141d      	asrs	r5, r3, #16
 8005782:	b292      	uxth	r2, r2
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	c404      	stmia	r4!, {r2}
 800578c:	428b      	cmp	r3, r1
 800578e:	d2e9      	bcs.n	8005764 <quorem+0xb0>
 8005790:	9a01      	ldr	r2, [sp, #4]
 8005792:	00bb      	lsls	r3, r7, #2
 8005794:	18d3      	adds	r3, r2, r3
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2a00      	cmp	r2, #0
 800579a:	d013      	beq.n	80057c4 <quorem+0x110>
 800579c:	9b00      	ldr	r3, [sp, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	9800      	ldr	r0, [sp, #0]
 80057a4:	b007      	add	sp, #28
 80057a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <quorem+0x104>
 80057ae:	3f01      	subs	r7, #1
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	3c04      	subs	r4, #4
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d3f7      	bcc.n	80057a8 <quorem+0xf4>
 80057b8:	6137      	str	r7, [r6, #16]
 80057ba:	e7c8      	b.n	800574e <quorem+0x9a>
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	2a00      	cmp	r2, #0
 80057c0:	d104      	bne.n	80057cc <quorem+0x118>
 80057c2:	3f01      	subs	r7, #1
 80057c4:	9a01      	ldr	r2, [sp, #4]
 80057c6:	3b04      	subs	r3, #4
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3f7      	bcc.n	80057bc <quorem+0x108>
 80057cc:	6137      	str	r7, [r6, #16]
 80057ce:	e7e5      	b.n	800579c <quorem+0xe8>

080057d0 <_dtoa_r>:
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	0014      	movs	r4, r2
 80057d4:	001d      	movs	r5, r3
 80057d6:	69c6      	ldr	r6, [r0, #28]
 80057d8:	b09d      	sub	sp, #116	@ 0x74
 80057da:	940a      	str	r4, [sp, #40]	@ 0x28
 80057dc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80057de:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80057e0:	9003      	str	r0, [sp, #12]
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	d10f      	bne.n	8005806 <_dtoa_r+0x36>
 80057e6:	2010      	movs	r0, #16
 80057e8:	f000 fe30 	bl	800644c <malloc>
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	1e02      	subs	r2, r0, #0
 80057f0:	61d8      	str	r0, [r3, #28]
 80057f2:	d104      	bne.n	80057fe <_dtoa_r+0x2e>
 80057f4:	21ef      	movs	r1, #239	@ 0xef
 80057f6:	4bc7      	ldr	r3, [pc, #796]	@ (8005b14 <_dtoa_r+0x344>)
 80057f8:	48c7      	ldr	r0, [pc, #796]	@ (8005b18 <_dtoa_r+0x348>)
 80057fa:	f001 fcc5 	bl	8007188 <__assert_func>
 80057fe:	6046      	str	r6, [r0, #4]
 8005800:	6086      	str	r6, [r0, #8]
 8005802:	6006      	str	r6, [r0, #0]
 8005804:	60c6      	str	r6, [r0, #12]
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	2900      	cmp	r1, #0
 800580e:	d00b      	beq.n	8005828 <_dtoa_r+0x58>
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	2301      	movs	r3, #1
 8005814:	4093      	lsls	r3, r2
 8005816:	604a      	str	r2, [r1, #4]
 8005818:	608b      	str	r3, [r1, #8]
 800581a:	9803      	ldr	r0, [sp, #12]
 800581c:	f000 ff16 	bl	800664c <_Bfree>
 8005820:	2200      	movs	r2, #0
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	2d00      	cmp	r5, #0
 800582a:	da1e      	bge.n	800586a <_dtoa_r+0x9a>
 800582c:	2301      	movs	r3, #1
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	006b      	lsls	r3, r5, #1
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005836:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005838:	4bb8      	ldr	r3, [pc, #736]	@ (8005b1c <_dtoa_r+0x34c>)
 800583a:	4ab8      	ldr	r2, [pc, #736]	@ (8005b1c <_dtoa_r+0x34c>)
 800583c:	403b      	ands	r3, r7
 800583e:	4293      	cmp	r3, r2
 8005840:	d116      	bne.n	8005870 <_dtoa_r+0xa0>
 8005842:	4bb7      	ldr	r3, [pc, #732]	@ (8005b20 <_dtoa_r+0x350>)
 8005844:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	033b      	lsls	r3, r7, #12
 800584a:	0b1b      	lsrs	r3, r3, #12
 800584c:	4323      	orrs	r3, r4
 800584e:	d101      	bne.n	8005854 <_dtoa_r+0x84>
 8005850:	f000 fd83 	bl	800635a <_dtoa_r+0xb8a>
 8005854:	4bb3      	ldr	r3, [pc, #716]	@ (8005b24 <_dtoa_r+0x354>)
 8005856:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005858:	9308      	str	r3, [sp, #32]
 800585a:	2a00      	cmp	r2, #0
 800585c:	d002      	beq.n	8005864 <_dtoa_r+0x94>
 800585e:	4bb2      	ldr	r3, [pc, #712]	@ (8005b28 <_dtoa_r+0x358>)
 8005860:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	9808      	ldr	r0, [sp, #32]
 8005866:	b01d      	add	sp, #116	@ 0x74
 8005868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586a:	2300      	movs	r3, #0
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	e7e2      	b.n	8005836 <_dtoa_r+0x66>
 8005870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005874:	9212      	str	r2, [sp, #72]	@ 0x48
 8005876:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005878:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800587a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	f7fa fde4 	bl	800044c <__aeabi_dcmpeq>
 8005884:	1e06      	subs	r6, r0, #0
 8005886:	d00b      	beq.n	80058a0 <_dtoa_r+0xd0>
 8005888:	2301      	movs	r3, #1
 800588a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <_dtoa_r+0xca>
 8005894:	4ba5      	ldr	r3, [pc, #660]	@ (8005b2c <_dtoa_r+0x35c>)
 8005896:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4ba5      	ldr	r3, [pc, #660]	@ (8005b30 <_dtoa_r+0x360>)
 800589c:	9308      	str	r3, [sp, #32]
 800589e:	e7e1      	b.n	8005864 <_dtoa_r+0x94>
 80058a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	9803      	ldr	r0, [sp, #12]
 80058aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80058ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058ae:	f001 f9cd 	bl	8006c4c <__d2b>
 80058b2:	007a      	lsls	r2, r7, #1
 80058b4:	9005      	str	r0, [sp, #20]
 80058b6:	0d52      	lsrs	r2, r2, #21
 80058b8:	d100      	bne.n	80058bc <_dtoa_r+0xec>
 80058ba:	e07b      	b.n	80059b4 <_dtoa_r+0x1e4>
 80058bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058be:	9618      	str	r6, [sp, #96]	@ 0x60
 80058c0:	0319      	lsls	r1, r3, #12
 80058c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b34 <_dtoa_r+0x364>)
 80058c4:	0b09      	lsrs	r1, r1, #12
 80058c6:	430b      	orrs	r3, r1
 80058c8:	499b      	ldr	r1, [pc, #620]	@ (8005b38 <_dtoa_r+0x368>)
 80058ca:	1857      	adds	r7, r2, r1
 80058cc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80058ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80058d0:	0019      	movs	r1, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b99      	ldr	r3, [pc, #612]	@ (8005b3c <_dtoa_r+0x36c>)
 80058d6:	f7fc f9d7 	bl	8001c88 <__aeabi_dsub>
 80058da:	4a99      	ldr	r2, [pc, #612]	@ (8005b40 <_dtoa_r+0x370>)
 80058dc:	4b99      	ldr	r3, [pc, #612]	@ (8005b44 <_dtoa_r+0x374>)
 80058de:	f7fb ff0b 	bl	80016f8 <__aeabi_dmul>
 80058e2:	4a99      	ldr	r2, [pc, #612]	@ (8005b48 <_dtoa_r+0x378>)
 80058e4:	4b99      	ldr	r3, [pc, #612]	@ (8005b4c <_dtoa_r+0x37c>)
 80058e6:	f7fa ff5f 	bl	80007a8 <__aeabi_dadd>
 80058ea:	0004      	movs	r4, r0
 80058ec:	0038      	movs	r0, r7
 80058ee:	000d      	movs	r5, r1
 80058f0:	f7fc fdc4 	bl	800247c <__aeabi_i2d>
 80058f4:	4a96      	ldr	r2, [pc, #600]	@ (8005b50 <_dtoa_r+0x380>)
 80058f6:	4b97      	ldr	r3, [pc, #604]	@ (8005b54 <_dtoa_r+0x384>)
 80058f8:	f7fb fefe 	bl	80016f8 <__aeabi_dmul>
 80058fc:	0002      	movs	r2, r0
 80058fe:	000b      	movs	r3, r1
 8005900:	0020      	movs	r0, r4
 8005902:	0029      	movs	r1, r5
 8005904:	f7fa ff50 	bl	80007a8 <__aeabi_dadd>
 8005908:	0004      	movs	r4, r0
 800590a:	000d      	movs	r5, r1
 800590c:	f7fc fd7a 	bl	8002404 <__aeabi_d2iz>
 8005910:	2200      	movs	r2, #0
 8005912:	9004      	str	r0, [sp, #16]
 8005914:	2300      	movs	r3, #0
 8005916:	0020      	movs	r0, r4
 8005918:	0029      	movs	r1, r5
 800591a:	f7fa fd9d 	bl	8000458 <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d00b      	beq.n	800593a <_dtoa_r+0x16a>
 8005922:	9804      	ldr	r0, [sp, #16]
 8005924:	f7fc fdaa 	bl	800247c <__aeabi_i2d>
 8005928:	002b      	movs	r3, r5
 800592a:	0022      	movs	r2, r4
 800592c:	f7fa fd8e 	bl	800044c <__aeabi_dcmpeq>
 8005930:	4243      	negs	r3, r0
 8005932:	4158      	adcs	r0, r3
 8005934:	9b04      	ldr	r3, [sp, #16]
 8005936:	1a1b      	subs	r3, r3, r0
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	2301      	movs	r3, #1
 800593c:	9315      	str	r3, [sp, #84]	@ 0x54
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	2b16      	cmp	r3, #22
 8005942:	d810      	bhi.n	8005966 <_dtoa_r+0x196>
 8005944:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005946:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005948:	9a04      	ldr	r2, [sp, #16]
 800594a:	4b83      	ldr	r3, [pc, #524]	@ (8005b58 <_dtoa_r+0x388>)
 800594c:	00d2      	lsls	r2, r2, #3
 800594e:	189b      	adds	r3, r3, r2
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f7fa fd80 	bl	8000458 <__aeabi_dcmplt>
 8005958:	2800      	cmp	r0, #0
 800595a:	d047      	beq.n	80059ec <_dtoa_r+0x21c>
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	3b01      	subs	r3, #1
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	9315      	str	r3, [sp, #84]	@ 0x54
 8005966:	2200      	movs	r2, #0
 8005968:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800596a:	9206      	str	r2, [sp, #24]
 800596c:	1bdb      	subs	r3, r3, r7
 800596e:	1e5a      	subs	r2, r3, #1
 8005970:	d53e      	bpl.n	80059f0 <_dtoa_r+0x220>
 8005972:	2201      	movs	r2, #1
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	9306      	str	r3, [sp, #24]
 8005978:	2300      	movs	r3, #0
 800597a:	930d      	str	r3, [sp, #52]	@ 0x34
 800597c:	9b04      	ldr	r3, [sp, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	db38      	blt.n	80059f4 <_dtoa_r+0x224>
 8005982:	9a04      	ldr	r2, [sp, #16]
 8005984:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005986:	4694      	mov	ip, r2
 8005988:	4463      	add	r3, ip
 800598a:	930d      	str	r3, [sp, #52]	@ 0x34
 800598c:	2300      	movs	r3, #0
 800598e:	9214      	str	r2, [sp, #80]	@ 0x50
 8005990:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005992:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005994:	2401      	movs	r4, #1
 8005996:	2b09      	cmp	r3, #9
 8005998:	d867      	bhi.n	8005a6a <_dtoa_r+0x29a>
 800599a:	2b05      	cmp	r3, #5
 800599c:	dd02      	ble.n	80059a4 <_dtoa_r+0x1d4>
 800599e:	2400      	movs	r4, #0
 80059a0:	3b04      	subs	r3, #4
 80059a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80059a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80059a6:	1e98      	subs	r0, r3, #2
 80059a8:	2803      	cmp	r0, #3
 80059aa:	d867      	bhi.n	8005a7c <_dtoa_r+0x2ac>
 80059ac:	f7fa fbb4 	bl	8000118 <__gnu_thumb1_case_uqi>
 80059b0:	5b383a2b 	.word	0x5b383a2b
 80059b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80059b6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80059b8:	18f6      	adds	r6, r6, r3
 80059ba:	4b68      	ldr	r3, [pc, #416]	@ (8005b5c <_dtoa_r+0x38c>)
 80059bc:	18f2      	adds	r2, r6, r3
 80059be:	2a20      	cmp	r2, #32
 80059c0:	dd0f      	ble.n	80059e2 <_dtoa_r+0x212>
 80059c2:	2340      	movs	r3, #64	@ 0x40
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	409f      	lsls	r7, r3
 80059c8:	4b65      	ldr	r3, [pc, #404]	@ (8005b60 <_dtoa_r+0x390>)
 80059ca:	0038      	movs	r0, r7
 80059cc:	18f3      	adds	r3, r6, r3
 80059ce:	40dc      	lsrs	r4, r3
 80059d0:	4320      	orrs	r0, r4
 80059d2:	f7fc fd81 	bl	80024d8 <__aeabi_ui2d>
 80059d6:	2201      	movs	r2, #1
 80059d8:	4b62      	ldr	r3, [pc, #392]	@ (8005b64 <_dtoa_r+0x394>)
 80059da:	1e77      	subs	r7, r6, #1
 80059dc:	18cb      	adds	r3, r1, r3
 80059de:	9218      	str	r2, [sp, #96]	@ 0x60
 80059e0:	e776      	b.n	80058d0 <_dtoa_r+0x100>
 80059e2:	2320      	movs	r3, #32
 80059e4:	0020      	movs	r0, r4
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	4098      	lsls	r0, r3
 80059ea:	e7f2      	b.n	80059d2 <_dtoa_r+0x202>
 80059ec:	9015      	str	r0, [sp, #84]	@ 0x54
 80059ee:	e7ba      	b.n	8005966 <_dtoa_r+0x196>
 80059f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80059f2:	e7c3      	b.n	800597c <_dtoa_r+0x1ac>
 80059f4:	9b06      	ldr	r3, [sp, #24]
 80059f6:	9a04      	ldr	r2, [sp, #16]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	9306      	str	r3, [sp, #24]
 80059fc:	4253      	negs	r3, r2
 80059fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a00:	2300      	movs	r3, #0
 8005a02:	9314      	str	r3, [sp, #80]	@ 0x50
 8005a04:	e7c5      	b.n	8005992 <_dtoa_r+0x1c2>
 8005a06:	2300      	movs	r3, #0
 8005a08:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005a0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc13      	bgt.n	8005a3c <_dtoa_r+0x26c>
 8005a14:	2301      	movs	r3, #1
 8005a16:	001a      	movs	r2, r3
 8005a18:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005a1e:	e00d      	b.n	8005a3c <_dtoa_r+0x26c>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e7f1      	b.n	8005a08 <_dtoa_r+0x238>
 8005a24:	2300      	movs	r3, #0
 8005a26:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005a28:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a2a:	4694      	mov	ip, r2
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	4463      	add	r3, ip
 8005a30:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a32:	3301      	adds	r3, #1
 8005a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	dc00      	bgt.n	8005a3c <_dtoa_r+0x26c>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	9a03      	ldr	r2, [sp, #12]
 8005a3e:	2100      	movs	r1, #0
 8005a40:	69d0      	ldr	r0, [r2, #28]
 8005a42:	2204      	movs	r2, #4
 8005a44:	0015      	movs	r5, r2
 8005a46:	3514      	adds	r5, #20
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	d91b      	bls.n	8005a84 <_dtoa_r+0x2b4>
 8005a4c:	6041      	str	r1, [r0, #4]
 8005a4e:	9803      	ldr	r0, [sp, #12]
 8005a50:	f000 fdb8 	bl	80065c4 <_Balloc>
 8005a54:	9008      	str	r0, [sp, #32]
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d117      	bne.n	8005a8a <_dtoa_r+0x2ba>
 8005a5a:	21b0      	movs	r1, #176	@ 0xb0
 8005a5c:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <_dtoa_r+0x398>)
 8005a5e:	482e      	ldr	r0, [pc, #184]	@ (8005b18 <_dtoa_r+0x348>)
 8005a60:	9a08      	ldr	r2, [sp, #32]
 8005a62:	31ff      	adds	r1, #255	@ 0xff
 8005a64:	e6c9      	b.n	80057fa <_dtoa_r+0x2a>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7dd      	b.n	8005a26 <_dtoa_r+0x256>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9410      	str	r4, [sp, #64]	@ 0x40
 8005a6e:	9322      	str	r3, [sp, #136]	@ 0x88
 8005a70:	3b01      	subs	r3, #1
 8005a72:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a76:	2200      	movs	r2, #0
 8005a78:	3313      	adds	r3, #19
 8005a7a:	e7cf      	b.n	8005a1c <_dtoa_r+0x24c>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a80:	3b02      	subs	r3, #2
 8005a82:	e7f6      	b.n	8005a72 <_dtoa_r+0x2a2>
 8005a84:	3101      	adds	r1, #1
 8005a86:	0052      	lsls	r2, r2, #1
 8005a88:	e7dc      	b.n	8005a44 <_dtoa_r+0x274>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	9a08      	ldr	r2, [sp, #32]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a94:	2b0e      	cmp	r3, #14
 8005a96:	d900      	bls.n	8005a9a <_dtoa_r+0x2ca>
 8005a98:	e0d9      	b.n	8005c4e <_dtoa_r+0x47e>
 8005a9a:	2c00      	cmp	r4, #0
 8005a9c:	d100      	bne.n	8005aa0 <_dtoa_r+0x2d0>
 8005a9e:	e0d6      	b.n	8005c4e <_dtoa_r+0x47e>
 8005aa0:	9b04      	ldr	r3, [sp, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd64      	ble.n	8005b70 <_dtoa_r+0x3a0>
 8005aa6:	210f      	movs	r1, #15
 8005aa8:	9a04      	ldr	r2, [sp, #16]
 8005aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <_dtoa_r+0x388>)
 8005aac:	400a      	ands	r2, r1
 8005aae:	00d2      	lsls	r2, r2, #3
 8005ab0:	189b      	adds	r3, r3, r2
 8005ab2:	681e      	ldr	r6, [r3, #0]
 8005ab4:	685f      	ldr	r7, [r3, #4]
 8005ab6:	9b04      	ldr	r3, [sp, #16]
 8005ab8:	2402      	movs	r4, #2
 8005aba:	111d      	asrs	r5, r3, #4
 8005abc:	05db      	lsls	r3, r3, #23
 8005abe:	d50a      	bpl.n	8005ad6 <_dtoa_r+0x306>
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b6c <_dtoa_r+0x39c>)
 8005ac2:	400d      	ands	r5, r1
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005aca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005acc:	f7fb f9d0 	bl	8000e70 <__aeabi_ddiv>
 8005ad0:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ad2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ad4:	3401      	adds	r4, #1
 8005ad6:	4b25      	ldr	r3, [pc, #148]	@ (8005b6c <_dtoa_r+0x39c>)
 8005ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	d108      	bne.n	8005af0 <_dtoa_r+0x320>
 8005ade:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ae2:	0032      	movs	r2, r6
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	f7fb f9c3 	bl	8000e70 <__aeabi_ddiv>
 8005aea:	900a      	str	r0, [sp, #40]	@ 0x28
 8005aec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005aee:	e05a      	b.n	8005ba6 <_dtoa_r+0x3d6>
 8005af0:	2301      	movs	r3, #1
 8005af2:	421d      	tst	r5, r3
 8005af4:	d009      	beq.n	8005b0a <_dtoa_r+0x33a>
 8005af6:	18e4      	adds	r4, r4, r3
 8005af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005afa:	0030      	movs	r0, r6
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0039      	movs	r1, r7
 8005b02:	f7fb fdf9 	bl	80016f8 <__aeabi_dmul>
 8005b06:	0006      	movs	r6, r0
 8005b08:	000f      	movs	r7, r1
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b0c:	106d      	asrs	r5, r5, #1
 8005b0e:	3308      	adds	r3, #8
 8005b10:	e7e2      	b.n	8005ad8 <_dtoa_r+0x308>
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	080079d1 	.word	0x080079d1
 8005b18:	080079e8 	.word	0x080079e8
 8005b1c:	7ff00000 	.word	0x7ff00000
 8005b20:	0000270f 	.word	0x0000270f
 8005b24:	080079cd 	.word	0x080079cd
 8005b28:	080079d0 	.word	0x080079d0
 8005b2c:	080079a1 	.word	0x080079a1
 8005b30:	080079a0 	.word	0x080079a0
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	fffffc01 	.word	0xfffffc01
 8005b3c:	3ff80000 	.word	0x3ff80000
 8005b40:	636f4361 	.word	0x636f4361
 8005b44:	3fd287a7 	.word	0x3fd287a7
 8005b48:	8b60c8b3 	.word	0x8b60c8b3
 8005b4c:	3fc68a28 	.word	0x3fc68a28
 8005b50:	509f79fb 	.word	0x509f79fb
 8005b54:	3fd34413 	.word	0x3fd34413
 8005b58:	08007ae0 	.word	0x08007ae0
 8005b5c:	00000432 	.word	0x00000432
 8005b60:	00000412 	.word	0x00000412
 8005b64:	fe100000 	.word	0xfe100000
 8005b68:	08007a40 	.word	0x08007a40
 8005b6c:	08007ab8 	.word	0x08007ab8
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	2402      	movs	r4, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d016      	beq.n	8005ba6 <_dtoa_r+0x3d6>
 8005b78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005b7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	425d      	negs	r5, r3
 8005b80:	402a      	ands	r2, r5
 8005b82:	4bd7      	ldr	r3, [pc, #860]	@ (8005ee0 <_dtoa_r+0x710>)
 8005b84:	00d2      	lsls	r2, r2, #3
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f7fb fdb4 	bl	80016f8 <__aeabi_dmul>
 8005b90:	2701      	movs	r7, #1
 8005b92:	2300      	movs	r3, #0
 8005b94:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b98:	4ed2      	ldr	r6, [pc, #840]	@ (8005ee4 <_dtoa_r+0x714>)
 8005b9a:	112d      	asrs	r5, r5, #4
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d000      	beq.n	8005ba2 <_dtoa_r+0x3d2>
 8005ba0:	e0ba      	b.n	8005d18 <_dtoa_r+0x548>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1a1      	bne.n	8005aea <_dtoa_r+0x31a>
 8005ba6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ba8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005baa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d100      	bne.n	8005bb2 <_dtoa_r+0x3e2>
 8005bb0:	e0bd      	b.n	8005d2e <_dtoa_r+0x55e>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	0039      	movs	r1, r7
 8005bb8:	4bcb      	ldr	r3, [pc, #812]	@ (8005ee8 <_dtoa_r+0x718>)
 8005bba:	f7fa fc4d 	bl	8000458 <__aeabi_dcmplt>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d100      	bne.n	8005bc4 <_dtoa_r+0x3f4>
 8005bc2:	e0b4      	b.n	8005d2e <_dtoa_r+0x55e>
 8005bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d100      	bne.n	8005bcc <_dtoa_r+0x3fc>
 8005bca:	e0b0      	b.n	8005d2e <_dtoa_r+0x55e>
 8005bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dd39      	ble.n	8005c46 <_dtoa_r+0x476>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bda:	0030      	movs	r0, r6
 8005bdc:	4bc3      	ldr	r3, [pc, #780]	@ (8005eec <_dtoa_r+0x71c>)
 8005bde:	0039      	movs	r1, r7
 8005be0:	f7fb fd8a 	bl	80016f8 <__aeabi_dmul>
 8005be4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005be6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bea:	3401      	adds	r4, #1
 8005bec:	0020      	movs	r0, r4
 8005bee:	9311      	str	r3, [sp, #68]	@ 0x44
 8005bf0:	f7fc fc44 	bl	800247c <__aeabi_i2d>
 8005bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bf8:	f7fb fd7e 	bl	80016f8 <__aeabi_dmul>
 8005bfc:	4bbc      	ldr	r3, [pc, #752]	@ (8005ef0 <_dtoa_r+0x720>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f7fa fdd2 	bl	80007a8 <__aeabi_dadd>
 8005c04:	4bbb      	ldr	r3, [pc, #748]	@ (8005ef4 <_dtoa_r+0x724>)
 8005c06:	0006      	movs	r6, r0
 8005c08:	18cf      	adds	r7, r1, r3
 8005c0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d000      	beq.n	8005c12 <_dtoa_r+0x442>
 8005c10:	e091      	b.n	8005d36 <_dtoa_r+0x566>
 8005c12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c16:	2200      	movs	r2, #0
 8005c18:	4bb7      	ldr	r3, [pc, #732]	@ (8005ef8 <_dtoa_r+0x728>)
 8005c1a:	f7fc f835 	bl	8001c88 <__aeabi_dsub>
 8005c1e:	0032      	movs	r2, r6
 8005c20:	003b      	movs	r3, r7
 8005c22:	0004      	movs	r4, r0
 8005c24:	000d      	movs	r5, r1
 8005c26:	f7fa fc2b 	bl	8000480 <__aeabi_dcmpgt>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d000      	beq.n	8005c30 <_dtoa_r+0x460>
 8005c2e:	e29d      	b.n	800616c <_dtoa_r+0x99c>
 8005c30:	2180      	movs	r1, #128	@ 0x80
 8005c32:	0609      	lsls	r1, r1, #24
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	0032      	movs	r2, r6
 8005c38:	0020      	movs	r0, r4
 8005c3a:	0029      	movs	r1, r5
 8005c3c:	f7fa fc0c 	bl	8000458 <__aeabi_dcmplt>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d000      	beq.n	8005c46 <_dtoa_r+0x476>
 8005c44:	e130      	b.n	8005ea8 <_dtoa_r+0x6d8>
 8005c46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c48:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c4c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da00      	bge.n	8005c56 <_dtoa_r+0x486>
 8005c54:	e177      	b.n	8005f46 <_dtoa_r+0x776>
 8005c56:	9a04      	ldr	r2, [sp, #16]
 8005c58:	2a0e      	cmp	r2, #14
 8005c5a:	dd00      	ble.n	8005c5e <_dtoa_r+0x48e>
 8005c5c:	e173      	b.n	8005f46 <_dtoa_r+0x776>
 8005c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ee0 <_dtoa_r+0x710>)
 8005c60:	00d2      	lsls	r2, r2, #3
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	685c      	ldr	r4, [r3, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9306      	str	r3, [sp, #24]
 8005c6a:	9407      	str	r4, [sp, #28]
 8005c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da03      	bge.n	8005c7a <_dtoa_r+0x4aa>
 8005c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dc00      	bgt.n	8005c7a <_dtoa_r+0x4aa>
 8005c78:	e106      	b.n	8005e88 <_dtoa_r+0x6b8>
 8005c7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c80:	9d08      	ldr	r5, [sp, #32]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	195b      	adds	r3, r3, r5
 8005c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c88:	9a06      	ldr	r2, [sp, #24]
 8005c8a:	9b07      	ldr	r3, [sp, #28]
 8005c8c:	0030      	movs	r0, r6
 8005c8e:	0039      	movs	r1, r7
 8005c90:	f7fb f8ee 	bl	8000e70 <__aeabi_ddiv>
 8005c94:	f7fc fbb6 	bl	8002404 <__aeabi_d2iz>
 8005c98:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c9a:	f7fc fbef 	bl	800247c <__aeabi_i2d>
 8005c9e:	9a06      	ldr	r2, [sp, #24]
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	f7fb fd29 	bl	80016f8 <__aeabi_dmul>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	000b      	movs	r3, r1
 8005caa:	0030      	movs	r0, r6
 8005cac:	0039      	movs	r1, r7
 8005cae:	f7fb ffeb 	bl	8001c88 <__aeabi_dsub>
 8005cb2:	002b      	movs	r3, r5
 8005cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cb6:	3501      	adds	r5, #1
 8005cb8:	3230      	adds	r2, #48	@ 0x30
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cbe:	002c      	movs	r4, r5
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d000      	beq.n	8005cc6 <_dtoa_r+0x4f6>
 8005cc4:	e131      	b.n	8005f2a <_dtoa_r+0x75a>
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	000b      	movs	r3, r1
 8005cca:	f7fa fd6d 	bl	80007a8 <__aeabi_dadd>
 8005cce:	9a06      	ldr	r2, [sp, #24]
 8005cd0:	9b07      	ldr	r3, [sp, #28]
 8005cd2:	0006      	movs	r6, r0
 8005cd4:	000f      	movs	r7, r1
 8005cd6:	f7fa fbd3 	bl	8000480 <__aeabi_dcmpgt>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d000      	beq.n	8005ce0 <_dtoa_r+0x510>
 8005cde:	e10f      	b.n	8005f00 <_dtoa_r+0x730>
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	9b07      	ldr	r3, [sp, #28]
 8005ce4:	0030      	movs	r0, r6
 8005ce6:	0039      	movs	r1, r7
 8005ce8:	f7fa fbb0 	bl	800044c <__aeabi_dcmpeq>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d003      	beq.n	8005cf8 <_dtoa_r+0x528>
 8005cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf2:	07dd      	lsls	r5, r3, #31
 8005cf4:	d500      	bpl.n	8005cf8 <_dtoa_r+0x528>
 8005cf6:	e103      	b.n	8005f00 <_dtoa_r+0x730>
 8005cf8:	9905      	ldr	r1, [sp, #20]
 8005cfa:	9803      	ldr	r0, [sp, #12]
 8005cfc:	f000 fca6 	bl	800664c <_Bfree>
 8005d00:	2300      	movs	r3, #0
 8005d02:	7023      	strb	r3, [r4, #0]
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d08:	3301      	adds	r3, #1
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d100      	bne.n	8005d14 <_dtoa_r+0x544>
 8005d12:	e5a7      	b.n	8005864 <_dtoa_r+0x94>
 8005d14:	601c      	str	r4, [r3, #0]
 8005d16:	e5a5      	b.n	8005864 <_dtoa_r+0x94>
 8005d18:	423d      	tst	r5, r7
 8005d1a:	d005      	beq.n	8005d28 <_dtoa_r+0x558>
 8005d1c:	6832      	ldr	r2, [r6, #0]
 8005d1e:	6873      	ldr	r3, [r6, #4]
 8005d20:	f7fb fcea 	bl	80016f8 <__aeabi_dmul>
 8005d24:	003b      	movs	r3, r7
 8005d26:	3401      	adds	r4, #1
 8005d28:	106d      	asrs	r5, r5, #1
 8005d2a:	3608      	adds	r6, #8
 8005d2c:	e736      	b.n	8005b9c <_dtoa_r+0x3cc>
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d34:	e75a      	b.n	8005bec <_dtoa_r+0x41c>
 8005d36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d38:	4b69      	ldr	r3, [pc, #420]	@ (8005ee0 <_dtoa_r+0x710>)
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	00d2      	lsls	r2, r2, #3
 8005d3e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2900      	cmp	r1, #0
 8005d48:	d04c      	beq.n	8005de4 <_dtoa_r+0x614>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	496b      	ldr	r1, [pc, #428]	@ (8005efc <_dtoa_r+0x72c>)
 8005d4e:	f7fb f88f 	bl	8000e70 <__aeabi_ddiv>
 8005d52:	0032      	movs	r2, r6
 8005d54:	003b      	movs	r3, r7
 8005d56:	f7fb ff97 	bl	8001c88 <__aeabi_dsub>
 8005d5a:	9a08      	ldr	r2, [sp, #32]
 8005d5c:	0006      	movs	r6, r0
 8005d5e:	4694      	mov	ip, r2
 8005d60:	000f      	movs	r7, r1
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	9316      	str	r3, [sp, #88]	@ 0x58
 8005d66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d68:	4463      	add	r3, ip
 8005d6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d70:	f7fc fb48 	bl	8002404 <__aeabi_d2iz>
 8005d74:	0005      	movs	r5, r0
 8005d76:	f7fc fb81 	bl	800247c <__aeabi_i2d>
 8005d7a:	0002      	movs	r2, r0
 8005d7c:	000b      	movs	r3, r1
 8005d7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d82:	f7fb ff81 	bl	8001c88 <__aeabi_dsub>
 8005d86:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d88:	3530      	adds	r5, #48	@ 0x30
 8005d8a:	1c5c      	adds	r4, r3, #1
 8005d8c:	701d      	strb	r5, [r3, #0]
 8005d8e:	0032      	movs	r2, r6
 8005d90:	003b      	movs	r3, r7
 8005d92:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005d96:	f7fa fb5f 	bl	8000458 <__aeabi_dcmplt>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d16a      	bne.n	8005e74 <_dtoa_r+0x6a4>
 8005d9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005da0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005da2:	2000      	movs	r0, #0
 8005da4:	4950      	ldr	r1, [pc, #320]	@ (8005ee8 <_dtoa_r+0x718>)
 8005da6:	f7fb ff6f 	bl	8001c88 <__aeabi_dsub>
 8005daa:	0032      	movs	r2, r6
 8005dac:	003b      	movs	r3, r7
 8005dae:	f7fa fb53 	bl	8000458 <__aeabi_dcmplt>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d000      	beq.n	8005db8 <_dtoa_r+0x5e8>
 8005db6:	e0a5      	b.n	8005f04 <_dtoa_r+0x734>
 8005db8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	d100      	bne.n	8005dc0 <_dtoa_r+0x5f0>
 8005dbe:	e742      	b.n	8005c46 <_dtoa_r+0x476>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	0030      	movs	r0, r6
 8005dc4:	0039      	movs	r1, r7
 8005dc6:	4b49      	ldr	r3, [pc, #292]	@ (8005eec <_dtoa_r+0x71c>)
 8005dc8:	f7fb fc96 	bl	80016f8 <__aeabi_dmul>
 8005dcc:	2200      	movs	r2, #0
 8005dce:	0006      	movs	r6, r0
 8005dd0:	000f      	movs	r7, r1
 8005dd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005dd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dd6:	4b45      	ldr	r3, [pc, #276]	@ (8005eec <_dtoa_r+0x71c>)
 8005dd8:	f7fb fc8e 	bl	80016f8 <__aeabi_dmul>
 8005ddc:	9416      	str	r4, [sp, #88]	@ 0x58
 8005dde:	900a      	str	r0, [sp, #40]	@ 0x28
 8005de0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005de2:	e7c3      	b.n	8005d6c <_dtoa_r+0x59c>
 8005de4:	0030      	movs	r0, r6
 8005de6:	0039      	movs	r1, r7
 8005de8:	f7fb fc86 	bl	80016f8 <__aeabi_dmul>
 8005dec:	9d08      	ldr	r5, [sp, #32]
 8005dee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005df0:	002b      	movs	r3, r5
 8005df2:	4694      	mov	ip, r2
 8005df4:	9016      	str	r0, [sp, #88]	@ 0x58
 8005df6:	9117      	str	r1, [sp, #92]	@ 0x5c
 8005df8:	4463      	add	r3, ip
 8005dfa:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005dfe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e00:	f7fc fb00 	bl	8002404 <__aeabi_d2iz>
 8005e04:	0004      	movs	r4, r0
 8005e06:	f7fc fb39 	bl	800247c <__aeabi_i2d>
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e12:	f7fb ff39 	bl	8001c88 <__aeabi_dsub>
 8005e16:	3430      	adds	r4, #48	@ 0x30
 8005e18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e1a:	702c      	strb	r4, [r5, #0]
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	0006      	movs	r6, r0
 8005e20:	000f      	movs	r7, r1
 8005e22:	42ab      	cmp	r3, r5
 8005e24:	d129      	bne.n	8005e7a <_dtoa_r+0x6aa>
 8005e26:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005e28:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005e2a:	9b08      	ldr	r3, [sp, #32]
 8005e2c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8005e2e:	469c      	mov	ip, r3
 8005e30:	2200      	movs	r2, #0
 8005e32:	4b32      	ldr	r3, [pc, #200]	@ (8005efc <_dtoa_r+0x72c>)
 8005e34:	4464      	add	r4, ip
 8005e36:	f7fa fcb7 	bl	80007a8 <__aeabi_dadd>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	000b      	movs	r3, r1
 8005e3e:	0030      	movs	r0, r6
 8005e40:	0039      	movs	r1, r7
 8005e42:	f7fa fb1d 	bl	8000480 <__aeabi_dcmpgt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d15c      	bne.n	8005f04 <_dtoa_r+0x734>
 8005e4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005e4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e4e:	2000      	movs	r0, #0
 8005e50:	492a      	ldr	r1, [pc, #168]	@ (8005efc <_dtoa_r+0x72c>)
 8005e52:	f7fb ff19 	bl	8001c88 <__aeabi_dsub>
 8005e56:	0002      	movs	r2, r0
 8005e58:	000b      	movs	r3, r1
 8005e5a:	0030      	movs	r0, r6
 8005e5c:	0039      	movs	r1, r7
 8005e5e:	f7fa fafb 	bl	8000458 <__aeabi_dcmplt>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d100      	bne.n	8005e68 <_dtoa_r+0x698>
 8005e66:	e6ee      	b.n	8005c46 <_dtoa_r+0x476>
 8005e68:	0023      	movs	r3, r4
 8005e6a:	3c01      	subs	r4, #1
 8005e6c:	7822      	ldrb	r2, [r4, #0]
 8005e6e:	2a30      	cmp	r2, #48	@ 0x30
 8005e70:	d0fa      	beq.n	8005e68 <_dtoa_r+0x698>
 8005e72:	001c      	movs	r4, r3
 8005e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	e73e      	b.n	8005cf8 <_dtoa_r+0x528>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <_dtoa_r+0x71c>)
 8005e7e:	f7fb fc3b 	bl	80016f8 <__aeabi_dmul>
 8005e82:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e86:	e7b9      	b.n	8005dfc <_dtoa_r+0x62c>
 8005e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10c      	bne.n	8005ea8 <_dtoa_r+0x6d8>
 8005e8e:	9806      	ldr	r0, [sp, #24]
 8005e90:	9907      	ldr	r1, [sp, #28]
 8005e92:	2200      	movs	r2, #0
 8005e94:	4b18      	ldr	r3, [pc, #96]	@ (8005ef8 <_dtoa_r+0x728>)
 8005e96:	f7fb fc2f 	bl	80016f8 <__aeabi_dmul>
 8005e9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e9e:	f7fa faf9 	bl	8000494 <__aeabi_dcmpge>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d100      	bne.n	8005ea8 <_dtoa_r+0x6d8>
 8005ea6:	e164      	b.n	8006172 <_dtoa_r+0x9a2>
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	0037      	movs	r7, r6
 8005eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005eae:	9c08      	ldr	r4, [sp, #32]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	0031      	movs	r1, r6
 8005eba:	9803      	ldr	r0, [sp, #12]
 8005ebc:	f000 fbc6 	bl	800664c <_Bfree>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	d0d7      	beq.n	8005e74 <_dtoa_r+0x6a4>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <_dtoa_r+0x706>
 8005eca:	42bb      	cmp	r3, r7
 8005ecc:	d003      	beq.n	8005ed6 <_dtoa_r+0x706>
 8005ece:	0019      	movs	r1, r3
 8005ed0:	9803      	ldr	r0, [sp, #12]
 8005ed2:	f000 fbbb 	bl	800664c <_Bfree>
 8005ed6:	0039      	movs	r1, r7
 8005ed8:	9803      	ldr	r0, [sp, #12]
 8005eda:	f000 fbb7 	bl	800664c <_Bfree>
 8005ede:	e7c9      	b.n	8005e74 <_dtoa_r+0x6a4>
 8005ee0:	08007ae0 	.word	0x08007ae0
 8005ee4:	08007ab8 	.word	0x08007ab8
 8005ee8:	3ff00000 	.word	0x3ff00000
 8005eec:	40240000 	.word	0x40240000
 8005ef0:	401c0000 	.word	0x401c0000
 8005ef4:	fcc00000 	.word	0xfcc00000
 8005ef8:	40140000 	.word	0x40140000
 8005efc:	3fe00000 	.word	0x3fe00000
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f04:	0023      	movs	r3, r4
 8005f06:	001c      	movs	r4, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	2a39      	cmp	r2, #57	@ 0x39
 8005f0e:	d108      	bne.n	8005f22 <_dtoa_r+0x752>
 8005f10:	9a08      	ldr	r2, [sp, #32]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d1f7      	bne.n	8005f06 <_dtoa_r+0x736>
 8005f16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f18:	9908      	ldr	r1, [sp, #32]
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f1e:	2230      	movs	r2, #48	@ 0x30
 8005f20:	700a      	strb	r2, [r1, #0]
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	3201      	adds	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e7a4      	b.n	8005e74 <_dtoa_r+0x6a4>
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4bc6      	ldr	r3, [pc, #792]	@ (8006248 <_dtoa_r+0xa78>)
 8005f2e:	f7fb fbe3 	bl	80016f8 <__aeabi_dmul>
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	0006      	movs	r6, r0
 8005f38:	000f      	movs	r7, r1
 8005f3a:	f7fa fa87 	bl	800044c <__aeabi_dcmpeq>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d100      	bne.n	8005f44 <_dtoa_r+0x774>
 8005f42:	e6a1      	b.n	8005c88 <_dtoa_r+0x4b8>
 8005f44:	e6d8      	b.n	8005cf8 <_dtoa_r+0x528>
 8005f46:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005f48:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8005f4a:	9c06      	ldr	r4, [sp, #24]
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	d014      	beq.n	8005f7a <_dtoa_r+0x7aa>
 8005f50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	dd00      	ble.n	8005f58 <_dtoa_r+0x788>
 8005f56:	e0c8      	b.n	80060ea <_dtoa_r+0x91a>
 8005f58:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d100      	bne.n	8005f60 <_dtoa_r+0x790>
 8005f5e:	e0be      	b.n	80060de <_dtoa_r+0x90e>
 8005f60:	4aba      	ldr	r2, [pc, #744]	@ (800624c <_dtoa_r+0xa7c>)
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	9a06      	ldr	r2, [sp, #24]
 8005f66:	2101      	movs	r1, #1
 8005f68:	18d2      	adds	r2, r2, r3
 8005f6a:	9206      	str	r2, [sp, #24]
 8005f6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f6e:	9803      	ldr	r0, [sp, #12]
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f74:	f000 fc22 	bl	80067bc <__i2b>
 8005f78:	0007      	movs	r7, r0
 8005f7a:	2c00      	cmp	r4, #0
 8005f7c:	d00e      	beq.n	8005f9c <_dtoa_r+0x7cc>
 8005f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd0b      	ble.n	8005f9c <_dtoa_r+0x7cc>
 8005f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f86:	0023      	movs	r3, r4
 8005f88:	4294      	cmp	r4, r2
 8005f8a:	dd00      	ble.n	8005f8e <_dtoa_r+0x7be>
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	9a06      	ldr	r2, [sp, #24]
 8005f90:	1ae4      	subs	r4, r4, r3
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	9206      	str	r2, [sp, #24]
 8005f96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01f      	beq.n	8005fe2 <_dtoa_r+0x812>
 8005fa2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d100      	bne.n	8005faa <_dtoa_r+0x7da>
 8005fa8:	e0b5      	b.n	8006116 <_dtoa_r+0x946>
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	d010      	beq.n	8005fd0 <_dtoa_r+0x800>
 8005fae:	0039      	movs	r1, r7
 8005fb0:	002a      	movs	r2, r5
 8005fb2:	9803      	ldr	r0, [sp, #12]
 8005fb4:	f000 fccc 	bl	8006950 <__pow5mult>
 8005fb8:	9a05      	ldr	r2, [sp, #20]
 8005fba:	0001      	movs	r1, r0
 8005fbc:	0007      	movs	r7, r0
 8005fbe:	9803      	ldr	r0, [sp, #12]
 8005fc0:	f000 fc14 	bl	80067ec <__multiply>
 8005fc4:	0006      	movs	r6, r0
 8005fc6:	9905      	ldr	r1, [sp, #20]
 8005fc8:	9803      	ldr	r0, [sp, #12]
 8005fca:	f000 fb3f 	bl	800664c <_Bfree>
 8005fce:	9605      	str	r6, [sp, #20]
 8005fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fd2:	1b5a      	subs	r2, r3, r5
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	d004      	beq.n	8005fe2 <_dtoa_r+0x812>
 8005fd8:	9905      	ldr	r1, [sp, #20]
 8005fda:	9803      	ldr	r0, [sp, #12]
 8005fdc:	f000 fcb8 	bl	8006950 <__pow5mult>
 8005fe0:	9005      	str	r0, [sp, #20]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	9803      	ldr	r0, [sp, #12]
 8005fe6:	f000 fbe9 	bl	80067bc <__i2b>
 8005fea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fec:	0006      	movs	r6, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d100      	bne.n	8005ff4 <_dtoa_r+0x824>
 8005ff2:	e1bc      	b.n	800636e <_dtoa_r+0xb9e>
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	0001      	movs	r1, r0
 8005ff8:	9803      	ldr	r0, [sp, #12]
 8005ffa:	f000 fca9 	bl	8006950 <__pow5mult>
 8005ffe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006000:	0006      	movs	r6, r0
 8006002:	2500      	movs	r5, #0
 8006004:	2b01      	cmp	r3, #1
 8006006:	dc16      	bgt.n	8006036 <_dtoa_r+0x866>
 8006008:	2500      	movs	r5, #0
 800600a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600c:	42ab      	cmp	r3, r5
 800600e:	d10e      	bne.n	800602e <_dtoa_r+0x85e>
 8006010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006012:	031b      	lsls	r3, r3, #12
 8006014:	42ab      	cmp	r3, r5
 8006016:	d10a      	bne.n	800602e <_dtoa_r+0x85e>
 8006018:	4b8d      	ldr	r3, [pc, #564]	@ (8006250 <_dtoa_r+0xa80>)
 800601a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800601c:	4213      	tst	r3, r2
 800601e:	d006      	beq.n	800602e <_dtoa_r+0x85e>
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	3501      	adds	r5, #1
 8006024:	3301      	adds	r3, #1
 8006026:	9306      	str	r3, [sp, #24]
 8006028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800602a:	3301      	adds	r3, #1
 800602c:	930d      	str	r3, [sp, #52]	@ 0x34
 800602e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006030:	2001      	movs	r0, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <_dtoa_r+0x878>
 8006036:	6933      	ldr	r3, [r6, #16]
 8006038:	3303      	adds	r3, #3
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	18f3      	adds	r3, r6, r3
 800603e:	6858      	ldr	r0, [r3, #4]
 8006040:	f000 fb6c 	bl	800671c <__hi0bits>
 8006044:	2320      	movs	r3, #32
 8006046:	1a18      	subs	r0, r3, r0
 8006048:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800604a:	1818      	adds	r0, r3, r0
 800604c:	0002      	movs	r2, r0
 800604e:	231f      	movs	r3, #31
 8006050:	401a      	ands	r2, r3
 8006052:	4218      	tst	r0, r3
 8006054:	d065      	beq.n	8006122 <_dtoa_r+0x952>
 8006056:	3301      	adds	r3, #1
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	2b04      	cmp	r3, #4
 800605c:	dd5d      	ble.n	800611a <_dtoa_r+0x94a>
 800605e:	231c      	movs	r3, #28
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	9a06      	ldr	r2, [sp, #24]
 8006064:	18e4      	adds	r4, r4, r3
 8006066:	18d2      	adds	r2, r2, r3
 8006068:	9206      	str	r2, [sp, #24]
 800606a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800606c:	18d3      	adds	r3, r2, r3
 800606e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006070:	9b06      	ldr	r3, [sp, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	dd05      	ble.n	8006082 <_dtoa_r+0x8b2>
 8006076:	001a      	movs	r2, r3
 8006078:	9905      	ldr	r1, [sp, #20]
 800607a:	9803      	ldr	r0, [sp, #12]
 800607c:	f000 fcc4 	bl	8006a08 <__lshift>
 8006080:	9005      	str	r0, [sp, #20]
 8006082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006084:	2b00      	cmp	r3, #0
 8006086:	dd05      	ble.n	8006094 <_dtoa_r+0x8c4>
 8006088:	0031      	movs	r1, r6
 800608a:	001a      	movs	r2, r3
 800608c:	9803      	ldr	r0, [sp, #12]
 800608e:	f000 fcbb 	bl	8006a08 <__lshift>
 8006092:	0006      	movs	r6, r0
 8006094:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006096:	2b00      	cmp	r3, #0
 8006098:	d045      	beq.n	8006126 <_dtoa_r+0x956>
 800609a:	0031      	movs	r1, r6
 800609c:	9805      	ldr	r0, [sp, #20]
 800609e:	f000 fd1f 	bl	8006ae0 <__mcmp>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	da3f      	bge.n	8006126 <_dtoa_r+0x956>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	220a      	movs	r2, #10
 80060aa:	3b01      	subs	r3, #1
 80060ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80060ae:	9905      	ldr	r1, [sp, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9803      	ldr	r0, [sp, #12]
 80060b4:	f000 faee 	bl	8006694 <__multadd>
 80060b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060ba:	9005      	str	r0, [sp, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d100      	bne.n	80060c2 <_dtoa_r+0x8f2>
 80060c0:	e15c      	b.n	800637c <_dtoa_r+0xbac>
 80060c2:	2300      	movs	r3, #0
 80060c4:	0039      	movs	r1, r7
 80060c6:	220a      	movs	r2, #10
 80060c8:	9803      	ldr	r0, [sp, #12]
 80060ca:	f000 fae3 	bl	8006694 <__multadd>
 80060ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060d0:	0007      	movs	r7, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dc55      	bgt.n	8006182 <_dtoa_r+0x9b2>
 80060d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060d8:	2b02      	cmp	r3, #2
 80060da:	dc2d      	bgt.n	8006138 <_dtoa_r+0x968>
 80060dc:	e051      	b.n	8006182 <_dtoa_r+0x9b2>
 80060de:	2336      	movs	r3, #54	@ 0x36
 80060e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80060e2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80060e4:	9c06      	ldr	r4, [sp, #24]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	e73c      	b.n	8005f64 <_dtoa_r+0x794>
 80060ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ec:	1e5d      	subs	r5, r3, #1
 80060ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	db08      	blt.n	8006106 <_dtoa_r+0x936>
 80060f4:	1b5d      	subs	r5, r3, r5
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	9c06      	ldr	r4, [sp, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db00      	blt.n	8006100 <_dtoa_r+0x930>
 80060fe:	e731      	b.n	8005f64 <_dtoa_r+0x794>
 8006100:	1ae4      	subs	r4, r4, r3
 8006102:	2300      	movs	r3, #0
 8006104:	e72e      	b.n	8005f64 <_dtoa_r+0x794>
 8006106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006108:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800610a:	1aeb      	subs	r3, r5, r3
 800610c:	18d3      	adds	r3, r2, r3
 800610e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006110:	9314      	str	r3, [sp, #80]	@ 0x50
 8006112:	2500      	movs	r5, #0
 8006114:	e7ef      	b.n	80060f6 <_dtoa_r+0x926>
 8006116:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006118:	e75e      	b.n	8005fd8 <_dtoa_r+0x808>
 800611a:	2b04      	cmp	r3, #4
 800611c:	d0a8      	beq.n	8006070 <_dtoa_r+0x8a0>
 800611e:	331c      	adds	r3, #28
 8006120:	e79f      	b.n	8006062 <_dtoa_r+0x892>
 8006122:	0013      	movs	r3, r2
 8006124:	e7fb      	b.n	800611e <_dtoa_r+0x94e>
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	930c      	str	r3, [sp, #48]	@ 0x30
 800612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800612c:	930e      	str	r3, [sp, #56]	@ 0x38
 800612e:	2b00      	cmp	r3, #0
 8006130:	dc23      	bgt.n	800617a <_dtoa_r+0x9aa>
 8006132:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006134:	2b02      	cmp	r3, #2
 8006136:	dd20      	ble.n	800617a <_dtoa_r+0x9aa>
 8006138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d000      	beq.n	8006140 <_dtoa_r+0x970>
 800613e:	e6b5      	b.n	8005eac <_dtoa_r+0x6dc>
 8006140:	0031      	movs	r1, r6
 8006142:	2205      	movs	r2, #5
 8006144:	9803      	ldr	r0, [sp, #12]
 8006146:	f000 faa5 	bl	8006694 <__multadd>
 800614a:	0006      	movs	r6, r0
 800614c:	0001      	movs	r1, r0
 800614e:	9805      	ldr	r0, [sp, #20]
 8006150:	f000 fcc6 	bl	8006ae0 <__mcmp>
 8006154:	2800      	cmp	r0, #0
 8006156:	dc00      	bgt.n	800615a <_dtoa_r+0x98a>
 8006158:	e6a8      	b.n	8005eac <_dtoa_r+0x6dc>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	9a08      	ldr	r2, [sp, #32]
 800615e:	1c5c      	adds	r4, r3, #1
 8006160:	2331      	movs	r3, #49	@ 0x31
 8006162:	7013      	strb	r3, [r2, #0]
 8006164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006166:	3301      	adds	r3, #1
 8006168:	930c      	str	r3, [sp, #48]	@ 0x30
 800616a:	e6a3      	b.n	8005eb4 <_dtoa_r+0x6e4>
 800616c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800616e:	0037      	movs	r7, r6
 8006170:	e7f3      	b.n	800615a <_dtoa_r+0x98a>
 8006172:	9b04      	ldr	r3, [sp, #16]
 8006174:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006176:	930c      	str	r3, [sp, #48]	@ 0x30
 8006178:	e7f9      	b.n	800616e <_dtoa_r+0x99e>
 800617a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d100      	bne.n	8006182 <_dtoa_r+0x9b2>
 8006180:	e100      	b.n	8006384 <_dtoa_r+0xbb4>
 8006182:	2c00      	cmp	r4, #0
 8006184:	dd05      	ble.n	8006192 <_dtoa_r+0x9c2>
 8006186:	0039      	movs	r1, r7
 8006188:	0022      	movs	r2, r4
 800618a:	9803      	ldr	r0, [sp, #12]
 800618c:	f000 fc3c 	bl	8006a08 <__lshift>
 8006190:	0007      	movs	r7, r0
 8006192:	0038      	movs	r0, r7
 8006194:	2d00      	cmp	r5, #0
 8006196:	d018      	beq.n	80061ca <_dtoa_r+0x9fa>
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	9803      	ldr	r0, [sp, #12]
 800619c:	f000 fa12 	bl	80065c4 <_Balloc>
 80061a0:	1e04      	subs	r4, r0, #0
 80061a2:	d105      	bne.n	80061b0 <_dtoa_r+0x9e0>
 80061a4:	0022      	movs	r2, r4
 80061a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <_dtoa_r+0xa84>)
 80061a8:	482b      	ldr	r0, [pc, #172]	@ (8006258 <_dtoa_r+0xa88>)
 80061aa:	492c      	ldr	r1, [pc, #176]	@ (800625c <_dtoa_r+0xa8c>)
 80061ac:	f7ff fb25 	bl	80057fa <_dtoa_r+0x2a>
 80061b0:	0039      	movs	r1, r7
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	310c      	adds	r1, #12
 80061b6:	3202      	adds	r2, #2
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	300c      	adds	r0, #12
 80061bc:	f000 ffda 	bl	8007174 <memcpy>
 80061c0:	2201      	movs	r2, #1
 80061c2:	0021      	movs	r1, r4
 80061c4:	9803      	ldr	r0, [sp, #12]
 80061c6:	f000 fc1f 	bl	8006a08 <__lshift>
 80061ca:	9b08      	ldr	r3, [sp, #32]
 80061cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061ce:	9306      	str	r3, [sp, #24]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	189b      	adds	r3, r3, r2
 80061d4:	2201      	movs	r2, #1
 80061d6:	9704      	str	r7, [sp, #16]
 80061d8:	0007      	movs	r7, r0
 80061da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061de:	4013      	ands	r3, r2
 80061e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80061e2:	0031      	movs	r1, r6
 80061e4:	9805      	ldr	r0, [sp, #20]
 80061e6:	f7ff fa65 	bl	80056b4 <quorem>
 80061ea:	9904      	ldr	r1, [sp, #16]
 80061ec:	0005      	movs	r5, r0
 80061ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80061f0:	9805      	ldr	r0, [sp, #20]
 80061f2:	f000 fc75 	bl	8006ae0 <__mcmp>
 80061f6:	003a      	movs	r2, r7
 80061f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80061fa:	0031      	movs	r1, r6
 80061fc:	9803      	ldr	r0, [sp, #12]
 80061fe:	f000 fc8b 	bl	8006b18 <__mdiff>
 8006202:	2201      	movs	r2, #1
 8006204:	68c3      	ldr	r3, [r0, #12]
 8006206:	0004      	movs	r4, r0
 8006208:	3530      	adds	r5, #48	@ 0x30
 800620a:	9209      	str	r2, [sp, #36]	@ 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <_dtoa_r+0xa4a>
 8006210:	0001      	movs	r1, r0
 8006212:	9805      	ldr	r0, [sp, #20]
 8006214:	f000 fc64 	bl	8006ae0 <__mcmp>
 8006218:	9009      	str	r0, [sp, #36]	@ 0x24
 800621a:	0021      	movs	r1, r4
 800621c:	9803      	ldr	r0, [sp, #12]
 800621e:	f000 fa15 	bl	800664c <_Bfree>
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006226:	1c5c      	adds	r4, r3, #1
 8006228:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800622a:	4313      	orrs	r3, r2
 800622c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800622e:	4313      	orrs	r3, r2
 8006230:	d116      	bne.n	8006260 <_dtoa_r+0xa90>
 8006232:	2d39      	cmp	r5, #57	@ 0x39
 8006234:	d02f      	beq.n	8006296 <_dtoa_r+0xac6>
 8006236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	dd01      	ble.n	8006240 <_dtoa_r+0xa70>
 800623c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800623e:	3531      	adds	r5, #49	@ 0x31
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	701d      	strb	r5, [r3, #0]
 8006244:	e638      	b.n	8005eb8 <_dtoa_r+0x6e8>
 8006246:	46c0      	nop			@ (mov r8, r8)
 8006248:	40240000 	.word	0x40240000
 800624c:	00000433 	.word	0x00000433
 8006250:	7ff00000 	.word	0x7ff00000
 8006254:	08007a40 	.word	0x08007a40
 8006258:	080079e8 	.word	0x080079e8
 800625c:	000002ef 	.word	0x000002ef
 8006260:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006262:	2b00      	cmp	r3, #0
 8006264:	db04      	blt.n	8006270 <_dtoa_r+0xaa0>
 8006266:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006268:	4313      	orrs	r3, r2
 800626a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800626c:	4313      	orrs	r3, r2
 800626e:	d11e      	bne.n	80062ae <_dtoa_r+0xade>
 8006270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	dde4      	ble.n	8006240 <_dtoa_r+0xa70>
 8006276:	9905      	ldr	r1, [sp, #20]
 8006278:	2201      	movs	r2, #1
 800627a:	9803      	ldr	r0, [sp, #12]
 800627c:	f000 fbc4 	bl	8006a08 <__lshift>
 8006280:	0031      	movs	r1, r6
 8006282:	9005      	str	r0, [sp, #20]
 8006284:	f000 fc2c 	bl	8006ae0 <__mcmp>
 8006288:	2800      	cmp	r0, #0
 800628a:	dc02      	bgt.n	8006292 <_dtoa_r+0xac2>
 800628c:	d1d8      	bne.n	8006240 <_dtoa_r+0xa70>
 800628e:	07eb      	lsls	r3, r5, #31
 8006290:	d5d6      	bpl.n	8006240 <_dtoa_r+0xa70>
 8006292:	2d39      	cmp	r5, #57	@ 0x39
 8006294:	d1d2      	bne.n	800623c <_dtoa_r+0xa6c>
 8006296:	2339      	movs	r3, #57	@ 0x39
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	7013      	strb	r3, [r2, #0]
 800629c:	0023      	movs	r3, r4
 800629e:	001c      	movs	r4, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	2a39      	cmp	r2, #57	@ 0x39
 80062a6:	d04f      	beq.n	8006348 <_dtoa_r+0xb78>
 80062a8:	3201      	adds	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e604      	b.n	8005eb8 <_dtoa_r+0x6e8>
 80062ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dd03      	ble.n	80062bc <_dtoa_r+0xaec>
 80062b4:	2d39      	cmp	r5, #57	@ 0x39
 80062b6:	d0ee      	beq.n	8006296 <_dtoa_r+0xac6>
 80062b8:	3501      	adds	r5, #1
 80062ba:	e7c1      	b.n	8006240 <_dtoa_r+0xa70>
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	9a06      	ldr	r2, [sp, #24]
 80062c0:	701d      	strb	r5, [r3, #0]
 80062c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02a      	beq.n	800631e <_dtoa_r+0xb4e>
 80062c8:	2300      	movs	r3, #0
 80062ca:	220a      	movs	r2, #10
 80062cc:	9905      	ldr	r1, [sp, #20]
 80062ce:	9803      	ldr	r0, [sp, #12]
 80062d0:	f000 f9e0 	bl	8006694 <__multadd>
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	9005      	str	r0, [sp, #20]
 80062d8:	42bb      	cmp	r3, r7
 80062da:	d109      	bne.n	80062f0 <_dtoa_r+0xb20>
 80062dc:	2300      	movs	r3, #0
 80062de:	220a      	movs	r2, #10
 80062e0:	9904      	ldr	r1, [sp, #16]
 80062e2:	9803      	ldr	r0, [sp, #12]
 80062e4:	f000 f9d6 	bl	8006694 <__multadd>
 80062e8:	9004      	str	r0, [sp, #16]
 80062ea:	0007      	movs	r7, r0
 80062ec:	9406      	str	r4, [sp, #24]
 80062ee:	e778      	b.n	80061e2 <_dtoa_r+0xa12>
 80062f0:	9904      	ldr	r1, [sp, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	220a      	movs	r2, #10
 80062f6:	9803      	ldr	r0, [sp, #12]
 80062f8:	f000 f9cc 	bl	8006694 <__multadd>
 80062fc:	2300      	movs	r3, #0
 80062fe:	9004      	str	r0, [sp, #16]
 8006300:	220a      	movs	r2, #10
 8006302:	0039      	movs	r1, r7
 8006304:	9803      	ldr	r0, [sp, #12]
 8006306:	f000 f9c5 	bl	8006694 <__multadd>
 800630a:	e7ee      	b.n	80062ea <_dtoa_r+0xb1a>
 800630c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630e:	2401      	movs	r4, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	dd00      	ble.n	8006316 <_dtoa_r+0xb46>
 8006314:	001c      	movs	r4, r3
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	191c      	adds	r4, r3, r4
 800631a:	2300      	movs	r3, #0
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	9905      	ldr	r1, [sp, #20]
 8006320:	2201      	movs	r2, #1
 8006322:	9803      	ldr	r0, [sp, #12]
 8006324:	f000 fb70 	bl	8006a08 <__lshift>
 8006328:	0031      	movs	r1, r6
 800632a:	9005      	str	r0, [sp, #20]
 800632c:	f000 fbd8 	bl	8006ae0 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	dcb3      	bgt.n	800629c <_dtoa_r+0xacc>
 8006334:	d101      	bne.n	800633a <_dtoa_r+0xb6a>
 8006336:	07ed      	lsls	r5, r5, #31
 8006338:	d4b0      	bmi.n	800629c <_dtoa_r+0xacc>
 800633a:	0023      	movs	r3, r4
 800633c:	001c      	movs	r4, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	2a30      	cmp	r2, #48	@ 0x30
 8006344:	d0fa      	beq.n	800633c <_dtoa_r+0xb6c>
 8006346:	e5b7      	b.n	8005eb8 <_dtoa_r+0x6e8>
 8006348:	9a08      	ldr	r2, [sp, #32]
 800634a:	429a      	cmp	r2, r3
 800634c:	d1a7      	bne.n	800629e <_dtoa_r+0xace>
 800634e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006350:	3301      	adds	r3, #1
 8006352:	930c      	str	r3, [sp, #48]	@ 0x30
 8006354:	2331      	movs	r3, #49	@ 0x31
 8006356:	7013      	strb	r3, [r2, #0]
 8006358:	e5ae      	b.n	8005eb8 <_dtoa_r+0x6e8>
 800635a:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <_dtoa_r+0xbe0>)
 800635c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800635e:	9308      	str	r3, [sp, #32]
 8006360:	4b14      	ldr	r3, [pc, #80]	@ (80063b4 <_dtoa_r+0xbe4>)
 8006362:	2a00      	cmp	r2, #0
 8006364:	d001      	beq.n	800636a <_dtoa_r+0xb9a>
 8006366:	f7ff fa7b 	bl	8005860 <_dtoa_r+0x90>
 800636a:	f7ff fa7b 	bl	8005864 <_dtoa_r+0x94>
 800636e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006370:	2b01      	cmp	r3, #1
 8006372:	dc00      	bgt.n	8006376 <_dtoa_r+0xba6>
 8006374:	e648      	b.n	8006008 <_dtoa_r+0x838>
 8006376:	2001      	movs	r0, #1
 8006378:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800637a:	e665      	b.n	8006048 <_dtoa_r+0x878>
 800637c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800637e:	2b00      	cmp	r3, #0
 8006380:	dc00      	bgt.n	8006384 <_dtoa_r+0xbb4>
 8006382:	e6d6      	b.n	8006132 <_dtoa_r+0x962>
 8006384:	2400      	movs	r4, #0
 8006386:	0031      	movs	r1, r6
 8006388:	9805      	ldr	r0, [sp, #20]
 800638a:	f7ff f993 	bl	80056b4 <quorem>
 800638e:	9b08      	ldr	r3, [sp, #32]
 8006390:	3030      	adds	r0, #48	@ 0x30
 8006392:	5518      	strb	r0, [r3, r4]
 8006394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006396:	3401      	adds	r4, #1
 8006398:	0005      	movs	r5, r0
 800639a:	429c      	cmp	r4, r3
 800639c:	dab6      	bge.n	800630c <_dtoa_r+0xb3c>
 800639e:	2300      	movs	r3, #0
 80063a0:	220a      	movs	r2, #10
 80063a2:	9905      	ldr	r1, [sp, #20]
 80063a4:	9803      	ldr	r0, [sp, #12]
 80063a6:	f000 f975 	bl	8006694 <__multadd>
 80063aa:	9005      	str	r0, [sp, #20]
 80063ac:	e7eb      	b.n	8006386 <_dtoa_r+0xbb6>
 80063ae:	46c0      	nop			@ (mov r8, r8)
 80063b0:	080079c4 	.word	0x080079c4
 80063b4:	080079cc 	.word	0x080079cc

080063b8 <_free_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	0005      	movs	r5, r0
 80063bc:	1e0c      	subs	r4, r1, #0
 80063be:	d010      	beq.n	80063e2 <_free_r+0x2a>
 80063c0:	3c04      	subs	r4, #4
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da00      	bge.n	80063ca <_free_r+0x12>
 80063c8:	18e4      	adds	r4, r4, r3
 80063ca:	0028      	movs	r0, r5
 80063cc:	f000 f8ea 	bl	80065a4 <__malloc_lock>
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <_free_r+0x90>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <_free_r+0x2c>
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6014      	str	r4, [r2, #0]
 80063dc:	0028      	movs	r0, r5
 80063de:	f000 f8e9 	bl	80065b4 <__malloc_unlock>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d908      	bls.n	80063fa <_free_r+0x42>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	1821      	adds	r1, r4, r0
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d1f3      	bne.n	80063d8 <_free_r+0x20>
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	1809      	adds	r1, r1, r0
 80063f6:	6021      	str	r1, [r4, #0]
 80063f8:	e7ee      	b.n	80063d8 <_free_r+0x20>
 80063fa:	001a      	movs	r2, r3
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <_free_r+0x4e>
 8006402:	42a3      	cmp	r3, r4
 8006404:	d9f9      	bls.n	80063fa <_free_r+0x42>
 8006406:	6811      	ldr	r1, [r2, #0]
 8006408:	1850      	adds	r0, r2, r1
 800640a:	42a0      	cmp	r0, r4
 800640c:	d10b      	bne.n	8006426 <_free_r+0x6e>
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	1809      	adds	r1, r1, r0
 8006412:	1850      	adds	r0, r2, r1
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	4283      	cmp	r3, r0
 8006418:	d1e0      	bne.n	80063dc <_free_r+0x24>
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	1841      	adds	r1, r0, r1
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e7da      	b.n	80063dc <_free_r+0x24>
 8006426:	42a0      	cmp	r0, r4
 8006428:	d902      	bls.n	8006430 <_free_r+0x78>
 800642a:	230c      	movs	r3, #12
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	e7d5      	b.n	80063dc <_free_r+0x24>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428b      	cmp	r3, r1
 8006436:	d103      	bne.n	8006440 <_free_r+0x88>
 8006438:	6819      	ldr	r1, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	1809      	adds	r1, r1, r0
 800643e:	6021      	str	r1, [r4, #0]
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	6054      	str	r4, [r2, #4]
 8006444:	e7ca      	b.n	80063dc <_free_r+0x24>
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	20000588 	.word	0x20000588

0800644c <malloc>:
 800644c:	b510      	push	{r4, lr}
 800644e:	4b03      	ldr	r3, [pc, #12]	@ (800645c <malloc+0x10>)
 8006450:	0001      	movs	r1, r0
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	f000 f826 	bl	80064a4 <_malloc_r>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	20000018 	.word	0x20000018

08006460 <sbrk_aligned>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4e0f      	ldr	r6, [pc, #60]	@ (80064a0 <sbrk_aligned+0x40>)
 8006464:	000d      	movs	r5, r1
 8006466:	6831      	ldr	r1, [r6, #0]
 8006468:	0004      	movs	r4, r0
 800646a:	2900      	cmp	r1, #0
 800646c:	d102      	bne.n	8006474 <sbrk_aligned+0x14>
 800646e:	f000 fe6f 	bl	8007150 <_sbrk_r>
 8006472:	6030      	str	r0, [r6, #0]
 8006474:	0029      	movs	r1, r5
 8006476:	0020      	movs	r0, r4
 8006478:	f000 fe6a 	bl	8007150 <_sbrk_r>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d103      	bne.n	8006488 <sbrk_aligned+0x28>
 8006480:	2501      	movs	r5, #1
 8006482:	426d      	negs	r5, r5
 8006484:	0028      	movs	r0, r5
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	2303      	movs	r3, #3
 800648a:	1cc5      	adds	r5, r0, #3
 800648c:	439d      	bics	r5, r3
 800648e:	42a8      	cmp	r0, r5
 8006490:	d0f8      	beq.n	8006484 <sbrk_aligned+0x24>
 8006492:	1a29      	subs	r1, r5, r0
 8006494:	0020      	movs	r0, r4
 8006496:	f000 fe5b 	bl	8007150 <_sbrk_r>
 800649a:	3001      	adds	r0, #1
 800649c:	d1f2      	bne.n	8006484 <sbrk_aligned+0x24>
 800649e:	e7ef      	b.n	8006480 <sbrk_aligned+0x20>
 80064a0:	20000584 	.word	0x20000584

080064a4 <_malloc_r>:
 80064a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a6:	2203      	movs	r2, #3
 80064a8:	1ccb      	adds	r3, r1, #3
 80064aa:	4393      	bics	r3, r2
 80064ac:	3308      	adds	r3, #8
 80064ae:	0005      	movs	r5, r0
 80064b0:	001f      	movs	r7, r3
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d234      	bcs.n	8006520 <_malloc_r+0x7c>
 80064b6:	270c      	movs	r7, #12
 80064b8:	42b9      	cmp	r1, r7
 80064ba:	d833      	bhi.n	8006524 <_malloc_r+0x80>
 80064bc:	0028      	movs	r0, r5
 80064be:	f000 f871 	bl	80065a4 <__malloc_lock>
 80064c2:	4e37      	ldr	r6, [pc, #220]	@ (80065a0 <_malloc_r+0xfc>)
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	001c      	movs	r4, r3
 80064c8:	2c00      	cmp	r4, #0
 80064ca:	d12f      	bne.n	800652c <_malloc_r+0x88>
 80064cc:	0039      	movs	r1, r7
 80064ce:	0028      	movs	r0, r5
 80064d0:	f7ff ffc6 	bl	8006460 <sbrk_aligned>
 80064d4:	0004      	movs	r4, r0
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d15f      	bne.n	800659a <_malloc_r+0xf6>
 80064da:	6834      	ldr	r4, [r6, #0]
 80064dc:	9400      	str	r4, [sp, #0]
 80064de:	9b00      	ldr	r3, [sp, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d14a      	bne.n	800657a <_malloc_r+0xd6>
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	d052      	beq.n	800658e <_malloc_r+0xea>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	0028      	movs	r0, r5
 80064ec:	18e3      	adds	r3, r4, r3
 80064ee:	9900      	ldr	r1, [sp, #0]
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	f000 fe2d 	bl	8007150 <_sbrk_r>
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	4283      	cmp	r3, r0
 80064fa:	d148      	bne.n	800658e <_malloc_r+0xea>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	0028      	movs	r0, r5
 8006500:	1aff      	subs	r7, r7, r3
 8006502:	0039      	movs	r1, r7
 8006504:	f7ff ffac 	bl	8006460 <sbrk_aligned>
 8006508:	3001      	adds	r0, #1
 800650a:	d040      	beq.n	800658e <_malloc_r+0xea>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	19db      	adds	r3, r3, r7
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	6833      	ldr	r3, [r6, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	2a00      	cmp	r2, #0
 8006518:	d133      	bne.n	8006582 <_malloc_r+0xde>
 800651a:	9b00      	ldr	r3, [sp, #0]
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	e019      	b.n	8006554 <_malloc_r+0xb0>
 8006520:	2b00      	cmp	r3, #0
 8006522:	dac9      	bge.n	80064b8 <_malloc_r+0x14>
 8006524:	230c      	movs	r3, #12
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	2000      	movs	r0, #0
 800652a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800652c:	6821      	ldr	r1, [r4, #0]
 800652e:	1bc9      	subs	r1, r1, r7
 8006530:	d420      	bmi.n	8006574 <_malloc_r+0xd0>
 8006532:	290b      	cmp	r1, #11
 8006534:	d90a      	bls.n	800654c <_malloc_r+0xa8>
 8006536:	19e2      	adds	r2, r4, r7
 8006538:	6027      	str	r7, [r4, #0]
 800653a:	42a3      	cmp	r3, r4
 800653c:	d104      	bne.n	8006548 <_malloc_r+0xa4>
 800653e:	6032      	str	r2, [r6, #0]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	6011      	str	r1, [r2, #0]
 8006544:	6053      	str	r3, [r2, #4]
 8006546:	e005      	b.n	8006554 <_malloc_r+0xb0>
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	e7f9      	b.n	8006540 <_malloc_r+0x9c>
 800654c:	6862      	ldr	r2, [r4, #4]
 800654e:	42a3      	cmp	r3, r4
 8006550:	d10e      	bne.n	8006570 <_malloc_r+0xcc>
 8006552:	6032      	str	r2, [r6, #0]
 8006554:	0028      	movs	r0, r5
 8006556:	f000 f82d 	bl	80065b4 <__malloc_unlock>
 800655a:	0020      	movs	r0, r4
 800655c:	2207      	movs	r2, #7
 800655e:	300b      	adds	r0, #11
 8006560:	1d23      	adds	r3, r4, #4
 8006562:	4390      	bics	r0, r2
 8006564:	1ac2      	subs	r2, r0, r3
 8006566:	4298      	cmp	r0, r3
 8006568:	d0df      	beq.n	800652a <_malloc_r+0x86>
 800656a:	1a1b      	subs	r3, r3, r0
 800656c:	50a3      	str	r3, [r4, r2]
 800656e:	e7dc      	b.n	800652a <_malloc_r+0x86>
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	e7ef      	b.n	8006554 <_malloc_r+0xb0>
 8006574:	0023      	movs	r3, r4
 8006576:	6864      	ldr	r4, [r4, #4]
 8006578:	e7a6      	b.n	80064c8 <_malloc_r+0x24>
 800657a:	9c00      	ldr	r4, [sp, #0]
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	e7ad      	b.n	80064de <_malloc_r+0x3a>
 8006582:	001a      	movs	r2, r3
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	42a3      	cmp	r3, r4
 8006588:	d1fb      	bne.n	8006582 <_malloc_r+0xde>
 800658a:	2300      	movs	r3, #0
 800658c:	e7da      	b.n	8006544 <_malloc_r+0xa0>
 800658e:	230c      	movs	r3, #12
 8006590:	0028      	movs	r0, r5
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f000 f80e 	bl	80065b4 <__malloc_unlock>
 8006598:	e7c6      	b.n	8006528 <_malloc_r+0x84>
 800659a:	6007      	str	r7, [r0, #0]
 800659c:	e7da      	b.n	8006554 <_malloc_r+0xb0>
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	20000588 	.word	0x20000588

080065a4 <__malloc_lock>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	4802      	ldr	r0, [pc, #8]	@ (80065b0 <__malloc_lock+0xc>)
 80065a8:	f7ff f86f 	bl	800568a <__retarget_lock_acquire_recursive>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	20000580 	.word	0x20000580

080065b4 <__malloc_unlock>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4802      	ldr	r0, [pc, #8]	@ (80065c0 <__malloc_unlock+0xc>)
 80065b8:	f7ff f868 	bl	800568c <__retarget_lock_release_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	46c0      	nop			@ (mov r8, r8)
 80065c0:	20000580 	.word	0x20000580

080065c4 <_Balloc>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	69c5      	ldr	r5, [r0, #28]
 80065c8:	0006      	movs	r6, r0
 80065ca:	000c      	movs	r4, r1
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	d10e      	bne.n	80065ee <_Balloc+0x2a>
 80065d0:	2010      	movs	r0, #16
 80065d2:	f7ff ff3b 	bl	800644c <malloc>
 80065d6:	1e02      	subs	r2, r0, #0
 80065d8:	61f0      	str	r0, [r6, #28]
 80065da:	d104      	bne.n	80065e6 <_Balloc+0x22>
 80065dc:	216b      	movs	r1, #107	@ 0x6b
 80065de:	4b19      	ldr	r3, [pc, #100]	@ (8006644 <_Balloc+0x80>)
 80065e0:	4819      	ldr	r0, [pc, #100]	@ (8006648 <_Balloc+0x84>)
 80065e2:	f000 fdd1 	bl	8007188 <__assert_func>
 80065e6:	6045      	str	r5, [r0, #4]
 80065e8:	6085      	str	r5, [r0, #8]
 80065ea:	6005      	str	r5, [r0, #0]
 80065ec:	60c5      	str	r5, [r0, #12]
 80065ee:	69f5      	ldr	r5, [r6, #28]
 80065f0:	68eb      	ldr	r3, [r5, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d013      	beq.n	800661e <_Balloc+0x5a>
 80065f6:	69f3      	ldr	r3, [r6, #28]
 80065f8:	00a2      	lsls	r2, r4, #2
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	2800      	cmp	r0, #0
 8006602:	d118      	bne.n	8006636 <_Balloc+0x72>
 8006604:	2101      	movs	r1, #1
 8006606:	000d      	movs	r5, r1
 8006608:	40a5      	lsls	r5, r4
 800660a:	1d6a      	adds	r2, r5, #5
 800660c:	0030      	movs	r0, r6
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	f000 fdd8 	bl	80071c4 <_calloc_r>
 8006614:	2800      	cmp	r0, #0
 8006616:	d00c      	beq.n	8006632 <_Balloc+0x6e>
 8006618:	6044      	str	r4, [r0, #4]
 800661a:	6085      	str	r5, [r0, #8]
 800661c:	e00d      	b.n	800663a <_Balloc+0x76>
 800661e:	2221      	movs	r2, #33	@ 0x21
 8006620:	2104      	movs	r1, #4
 8006622:	0030      	movs	r0, r6
 8006624:	f000 fdce 	bl	80071c4 <_calloc_r>
 8006628:	69f3      	ldr	r3, [r6, #28]
 800662a:	60e8      	str	r0, [r5, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e1      	bne.n	80065f6 <_Balloc+0x32>
 8006632:	2000      	movs	r0, #0
 8006634:	bd70      	pop	{r4, r5, r6, pc}
 8006636:	6802      	ldr	r2, [r0, #0]
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	2300      	movs	r3, #0
 800663c:	6103      	str	r3, [r0, #16]
 800663e:	60c3      	str	r3, [r0, #12]
 8006640:	e7f8      	b.n	8006634 <_Balloc+0x70>
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	080079d1 	.word	0x080079d1
 8006648:	08007a51 	.word	0x08007a51

0800664c <_Bfree>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	69c6      	ldr	r6, [r0, #28]
 8006650:	0005      	movs	r5, r0
 8006652:	000c      	movs	r4, r1
 8006654:	2e00      	cmp	r6, #0
 8006656:	d10e      	bne.n	8006676 <_Bfree+0x2a>
 8006658:	2010      	movs	r0, #16
 800665a:	f7ff fef7 	bl	800644c <malloc>
 800665e:	1e02      	subs	r2, r0, #0
 8006660:	61e8      	str	r0, [r5, #28]
 8006662:	d104      	bne.n	800666e <_Bfree+0x22>
 8006664:	218f      	movs	r1, #143	@ 0x8f
 8006666:	4b09      	ldr	r3, [pc, #36]	@ (800668c <_Bfree+0x40>)
 8006668:	4809      	ldr	r0, [pc, #36]	@ (8006690 <_Bfree+0x44>)
 800666a:	f000 fd8d 	bl	8007188 <__assert_func>
 800666e:	6046      	str	r6, [r0, #4]
 8006670:	6086      	str	r6, [r0, #8]
 8006672:	6006      	str	r6, [r0, #0]
 8006674:	60c6      	str	r6, [r0, #12]
 8006676:	2c00      	cmp	r4, #0
 8006678:	d007      	beq.n	800668a <_Bfree+0x3e>
 800667a:	69eb      	ldr	r3, [r5, #28]
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	0092      	lsls	r2, r2, #2
 8006682:	189b      	adds	r3, r3, r2
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	6022      	str	r2, [r4, #0]
 8006688:	601c      	str	r4, [r3, #0]
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	080079d1 	.word	0x080079d1
 8006690:	08007a51 	.word	0x08007a51

08006694 <__multadd>:
 8006694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006696:	000f      	movs	r7, r1
 8006698:	9001      	str	r0, [sp, #4]
 800669a:	000c      	movs	r4, r1
 800669c:	001e      	movs	r6, r3
 800669e:	2000      	movs	r0, #0
 80066a0:	690d      	ldr	r5, [r1, #16]
 80066a2:	3714      	adds	r7, #20
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	3001      	adds	r0, #1
 80066a8:	b299      	uxth	r1, r3
 80066aa:	4351      	muls	r1, r2
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	4353      	muls	r3, r2
 80066b0:	1989      	adds	r1, r1, r6
 80066b2:	0c0e      	lsrs	r6, r1, #16
 80066b4:	199b      	adds	r3, r3, r6
 80066b6:	0c1e      	lsrs	r6, r3, #16
 80066b8:	b289      	uxth	r1, r1
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	185b      	adds	r3, r3, r1
 80066be:	c708      	stmia	r7!, {r3}
 80066c0:	4285      	cmp	r5, r0
 80066c2:	dcef      	bgt.n	80066a4 <__multadd+0x10>
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	d022      	beq.n	800670e <__multadd+0x7a>
 80066c8:	68a3      	ldr	r3, [r4, #8]
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dc19      	bgt.n	8006702 <__multadd+0x6e>
 80066ce:	6861      	ldr	r1, [r4, #4]
 80066d0:	9801      	ldr	r0, [sp, #4]
 80066d2:	3101      	adds	r1, #1
 80066d4:	f7ff ff76 	bl	80065c4 <_Balloc>
 80066d8:	1e07      	subs	r7, r0, #0
 80066da:	d105      	bne.n	80066e8 <__multadd+0x54>
 80066dc:	003a      	movs	r2, r7
 80066de:	21ba      	movs	r1, #186	@ 0xba
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <__multadd+0x80>)
 80066e2:	480d      	ldr	r0, [pc, #52]	@ (8006718 <__multadd+0x84>)
 80066e4:	f000 fd50 	bl	8007188 <__assert_func>
 80066e8:	0021      	movs	r1, r4
 80066ea:	6922      	ldr	r2, [r4, #16]
 80066ec:	310c      	adds	r1, #12
 80066ee:	3202      	adds	r2, #2
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	300c      	adds	r0, #12
 80066f4:	f000 fd3e 	bl	8007174 <memcpy>
 80066f8:	0021      	movs	r1, r4
 80066fa:	9801      	ldr	r0, [sp, #4]
 80066fc:	f7ff ffa6 	bl	800664c <_Bfree>
 8006700:	003c      	movs	r4, r7
 8006702:	1d2b      	adds	r3, r5, #4
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	18e3      	adds	r3, r4, r3
 8006708:	3501      	adds	r5, #1
 800670a:	605e      	str	r6, [r3, #4]
 800670c:	6125      	str	r5, [r4, #16]
 800670e:	0020      	movs	r0, r4
 8006710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	08007a40 	.word	0x08007a40
 8006718:	08007a51 	.word	0x08007a51

0800671c <__hi0bits>:
 800671c:	2280      	movs	r2, #128	@ 0x80
 800671e:	0003      	movs	r3, r0
 8006720:	0252      	lsls	r2, r2, #9
 8006722:	2000      	movs	r0, #0
 8006724:	4293      	cmp	r3, r2
 8006726:	d201      	bcs.n	800672c <__hi0bits+0x10>
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	3010      	adds	r0, #16
 800672c:	2280      	movs	r2, #128	@ 0x80
 800672e:	0452      	lsls	r2, r2, #17
 8006730:	4293      	cmp	r3, r2
 8006732:	d201      	bcs.n	8006738 <__hi0bits+0x1c>
 8006734:	3008      	adds	r0, #8
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	2280      	movs	r2, #128	@ 0x80
 800673a:	0552      	lsls	r2, r2, #21
 800673c:	4293      	cmp	r3, r2
 800673e:	d201      	bcs.n	8006744 <__hi0bits+0x28>
 8006740:	3004      	adds	r0, #4
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	2280      	movs	r2, #128	@ 0x80
 8006746:	05d2      	lsls	r2, r2, #23
 8006748:	4293      	cmp	r3, r2
 800674a:	d201      	bcs.n	8006750 <__hi0bits+0x34>
 800674c:	3002      	adds	r0, #2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	db03      	blt.n	800675c <__hi0bits+0x40>
 8006754:	3001      	adds	r0, #1
 8006756:	4213      	tst	r3, r2
 8006758:	d100      	bne.n	800675c <__hi0bits+0x40>
 800675a:	2020      	movs	r0, #32
 800675c:	4770      	bx	lr

0800675e <__lo0bits>:
 800675e:	6803      	ldr	r3, [r0, #0]
 8006760:	0001      	movs	r1, r0
 8006762:	2207      	movs	r2, #7
 8006764:	0018      	movs	r0, r3
 8006766:	4010      	ands	r0, r2
 8006768:	4213      	tst	r3, r2
 800676a:	d00d      	beq.n	8006788 <__lo0bits+0x2a>
 800676c:	3a06      	subs	r2, #6
 800676e:	2000      	movs	r0, #0
 8006770:	4213      	tst	r3, r2
 8006772:	d105      	bne.n	8006780 <__lo0bits+0x22>
 8006774:	3002      	adds	r0, #2
 8006776:	4203      	tst	r3, r0
 8006778:	d003      	beq.n	8006782 <__lo0bits+0x24>
 800677a:	40d3      	lsrs	r3, r2
 800677c:	0010      	movs	r0, r2
 800677e:	600b      	str	r3, [r1, #0]
 8006780:	4770      	bx	lr
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	600b      	str	r3, [r1, #0]
 8006786:	e7fb      	b.n	8006780 <__lo0bits+0x22>
 8006788:	b29a      	uxth	r2, r3
 800678a:	2a00      	cmp	r2, #0
 800678c:	d101      	bne.n	8006792 <__lo0bits+0x34>
 800678e:	2010      	movs	r0, #16
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	b2da      	uxtb	r2, r3
 8006794:	2a00      	cmp	r2, #0
 8006796:	d101      	bne.n	800679c <__lo0bits+0x3e>
 8006798:	3008      	adds	r0, #8
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	071a      	lsls	r2, r3, #28
 800679e:	d101      	bne.n	80067a4 <__lo0bits+0x46>
 80067a0:	3004      	adds	r0, #4
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	079a      	lsls	r2, r3, #30
 80067a6:	d101      	bne.n	80067ac <__lo0bits+0x4e>
 80067a8:	3002      	adds	r0, #2
 80067aa:	089b      	lsrs	r3, r3, #2
 80067ac:	07da      	lsls	r2, r3, #31
 80067ae:	d4e9      	bmi.n	8006784 <__lo0bits+0x26>
 80067b0:	3001      	adds	r0, #1
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	d1e6      	bne.n	8006784 <__lo0bits+0x26>
 80067b6:	2020      	movs	r0, #32
 80067b8:	e7e2      	b.n	8006780 <__lo0bits+0x22>
	...

080067bc <__i2b>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	000c      	movs	r4, r1
 80067c0:	2101      	movs	r1, #1
 80067c2:	f7ff feff 	bl	80065c4 <_Balloc>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d107      	bne.n	80067da <__i2b+0x1e>
 80067ca:	2146      	movs	r1, #70	@ 0x46
 80067cc:	4c05      	ldr	r4, [pc, #20]	@ (80067e4 <__i2b+0x28>)
 80067ce:	0002      	movs	r2, r0
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <__i2b+0x2c>)
 80067d2:	0020      	movs	r0, r4
 80067d4:	31ff      	adds	r1, #255	@ 0xff
 80067d6:	f000 fcd7 	bl	8007188 <__assert_func>
 80067da:	2301      	movs	r3, #1
 80067dc:	6144      	str	r4, [r0, #20]
 80067de:	6103      	str	r3, [r0, #16]
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	08007a51 	.word	0x08007a51
 80067e8:	08007a40 	.word	0x08007a40

080067ec <__multiply>:
 80067ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ee:	0014      	movs	r4, r2
 80067f0:	690a      	ldr	r2, [r1, #16]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	000d      	movs	r5, r1
 80067f6:	b08b      	sub	sp, #44	@ 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	db02      	blt.n	8006802 <__multiply+0x16>
 80067fc:	0023      	movs	r3, r4
 80067fe:	000c      	movs	r4, r1
 8006800:	001d      	movs	r5, r3
 8006802:	6927      	ldr	r7, [r4, #16]
 8006804:	692e      	ldr	r6, [r5, #16]
 8006806:	6861      	ldr	r1, [r4, #4]
 8006808:	19bb      	adds	r3, r7, r6
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	19ba      	adds	r2, r7, r6
 8006810:	4293      	cmp	r3, r2
 8006812:	da00      	bge.n	8006816 <__multiply+0x2a>
 8006814:	3101      	adds	r1, #1
 8006816:	f7ff fed5 	bl	80065c4 <_Balloc>
 800681a:	9002      	str	r0, [sp, #8]
 800681c:	2800      	cmp	r0, #0
 800681e:	d106      	bne.n	800682e <__multiply+0x42>
 8006820:	21b1      	movs	r1, #177	@ 0xb1
 8006822:	4b49      	ldr	r3, [pc, #292]	@ (8006948 <__multiply+0x15c>)
 8006824:	4849      	ldr	r0, [pc, #292]	@ (800694c <__multiply+0x160>)
 8006826:	9a02      	ldr	r2, [sp, #8]
 8006828:	0049      	lsls	r1, r1, #1
 800682a:	f000 fcad 	bl	8007188 <__assert_func>
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	3314      	adds	r3, #20
 8006834:	469c      	mov	ip, r3
 8006836:	19bb      	adds	r3, r7, r6
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4463      	add	r3, ip
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	4663      	mov	r3, ip
 8006840:	9904      	ldr	r1, [sp, #16]
 8006842:	428b      	cmp	r3, r1
 8006844:	d32a      	bcc.n	800689c <__multiply+0xb0>
 8006846:	0023      	movs	r3, r4
 8006848:	00bf      	lsls	r7, r7, #2
 800684a:	3314      	adds	r3, #20
 800684c:	3514      	adds	r5, #20
 800684e:	9308      	str	r3, [sp, #32]
 8006850:	00b6      	lsls	r6, r6, #2
 8006852:	19db      	adds	r3, r3, r7
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	19ab      	adds	r3, r5, r6
 8006858:	9309      	str	r3, [sp, #36]	@ 0x24
 800685a:	2304      	movs	r3, #4
 800685c:	9306      	str	r3, [sp, #24]
 800685e:	0023      	movs	r3, r4
 8006860:	9a05      	ldr	r2, [sp, #20]
 8006862:	3315      	adds	r3, #21
 8006864:	9501      	str	r5, [sp, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d305      	bcc.n	8006876 <__multiply+0x8a>
 800686a:	1b13      	subs	r3, r2, r4
 800686c:	3b15      	subs	r3, #21
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	3301      	adds	r3, #1
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	9306      	str	r3, [sp, #24]
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687a:	4293      	cmp	r3, r2
 800687c:	d310      	bcc.n	80068a0 <__multiply+0xb4>
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	dd05      	ble.n	8006890 <__multiply+0xa4>
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	3b04      	subs	r3, #4
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d056      	beq.n	800693e <__multiply+0x152>
 8006890:	9b02      	ldr	r3, [sp, #8]
 8006892:	9a03      	ldr	r2, [sp, #12]
 8006894:	0018      	movs	r0, r3
 8006896:	611a      	str	r2, [r3, #16]
 8006898:	b00b      	add	sp, #44	@ 0x2c
 800689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689c:	c304      	stmia	r3!, {r2}
 800689e:	e7cf      	b.n	8006840 <__multiply+0x54>
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	b280      	uxth	r0, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d01e      	beq.n	80068e8 <__multiply+0xfc>
 80068aa:	4667      	mov	r7, ip
 80068ac:	2500      	movs	r5, #0
 80068ae:	9e08      	ldr	r6, [sp, #32]
 80068b0:	ce02      	ldmia	r6!, {r1}
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9307      	str	r3, [sp, #28]
 80068b6:	b28b      	uxth	r3, r1
 80068b8:	4343      	muls	r3, r0
 80068ba:	001a      	movs	r2, r3
 80068bc:	466b      	mov	r3, sp
 80068be:	0c09      	lsrs	r1, r1, #16
 80068c0:	8b9b      	ldrh	r3, [r3, #28]
 80068c2:	4341      	muls	r1, r0
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	9a07      	ldr	r2, [sp, #28]
 80068c8:	195b      	adds	r3, r3, r5
 80068ca:	0c12      	lsrs	r2, r2, #16
 80068cc:	1889      	adds	r1, r1, r2
 80068ce:	0c1a      	lsrs	r2, r3, #16
 80068d0:	188a      	adds	r2, r1, r2
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	0c15      	lsrs	r5, r2, #16
 80068d6:	0412      	lsls	r2, r2, #16
 80068d8:	431a      	orrs	r2, r3
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	c704      	stmia	r7!, {r2}
 80068de:	42b3      	cmp	r3, r6
 80068e0:	d8e6      	bhi.n	80068b0 <__multiply+0xc4>
 80068e2:	4663      	mov	r3, ip
 80068e4:	9a06      	ldr	r2, [sp, #24]
 80068e6:	509d      	str	r5, [r3, r2]
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	0c00      	lsrs	r0, r0, #16
 80068ee:	d020      	beq.n	8006932 <__multiply+0x146>
 80068f0:	4663      	mov	r3, ip
 80068f2:	0025      	movs	r5, r4
 80068f4:	4661      	mov	r1, ip
 80068f6:	2700      	movs	r7, #0
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3514      	adds	r5, #20
 80068fc:	682a      	ldr	r2, [r5, #0]
 80068fe:	680e      	ldr	r6, [r1, #0]
 8006900:	b292      	uxth	r2, r2
 8006902:	4342      	muls	r2, r0
 8006904:	0c36      	lsrs	r6, r6, #16
 8006906:	1992      	adds	r2, r2, r6
 8006908:	19d2      	adds	r2, r2, r7
 800690a:	0416      	lsls	r6, r2, #16
 800690c:	b29b      	uxth	r3, r3
 800690e:	431e      	orrs	r6, r3
 8006910:	600e      	str	r6, [r1, #0]
 8006912:	cd40      	ldmia	r5!, {r6}
 8006914:	684b      	ldr	r3, [r1, #4]
 8006916:	0c36      	lsrs	r6, r6, #16
 8006918:	4346      	muls	r6, r0
 800691a:	b29b      	uxth	r3, r3
 800691c:	0c12      	lsrs	r2, r2, #16
 800691e:	18f3      	adds	r3, r6, r3
 8006920:	189b      	adds	r3, r3, r2
 8006922:	9a05      	ldr	r2, [sp, #20]
 8006924:	0c1f      	lsrs	r7, r3, #16
 8006926:	3104      	adds	r1, #4
 8006928:	42aa      	cmp	r2, r5
 800692a:	d8e7      	bhi.n	80068fc <__multiply+0x110>
 800692c:	4662      	mov	r2, ip
 800692e:	9906      	ldr	r1, [sp, #24]
 8006930:	5053      	str	r3, [r2, r1]
 8006932:	9b01      	ldr	r3, [sp, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	2304      	movs	r3, #4
 800693a:	449c      	add	ip, r3
 800693c:	e79b      	b.n	8006876 <__multiply+0x8a>
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	3b01      	subs	r3, #1
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	e79b      	b.n	800687e <__multiply+0x92>
 8006946:	46c0      	nop			@ (mov r8, r8)
 8006948:	08007a40 	.word	0x08007a40
 800694c:	08007a51 	.word	0x08007a51

08006950 <__pow5mult>:
 8006950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006952:	2303      	movs	r3, #3
 8006954:	0015      	movs	r5, r2
 8006956:	0007      	movs	r7, r0
 8006958:	000e      	movs	r6, r1
 800695a:	401a      	ands	r2, r3
 800695c:	421d      	tst	r5, r3
 800695e:	d008      	beq.n	8006972 <__pow5mult+0x22>
 8006960:	4925      	ldr	r1, [pc, #148]	@ (80069f8 <__pow5mult+0xa8>)
 8006962:	3a01      	subs	r2, #1
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	5852      	ldr	r2, [r2, r1]
 8006968:	2300      	movs	r3, #0
 800696a:	0031      	movs	r1, r6
 800696c:	f7ff fe92 	bl	8006694 <__multadd>
 8006970:	0006      	movs	r6, r0
 8006972:	10ad      	asrs	r5, r5, #2
 8006974:	d03d      	beq.n	80069f2 <__pow5mult+0xa2>
 8006976:	69fc      	ldr	r4, [r7, #28]
 8006978:	2c00      	cmp	r4, #0
 800697a:	d10f      	bne.n	800699c <__pow5mult+0x4c>
 800697c:	2010      	movs	r0, #16
 800697e:	f7ff fd65 	bl	800644c <malloc>
 8006982:	1e02      	subs	r2, r0, #0
 8006984:	61f8      	str	r0, [r7, #28]
 8006986:	d105      	bne.n	8006994 <__pow5mult+0x44>
 8006988:	21b4      	movs	r1, #180	@ 0xb4
 800698a:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <__pow5mult+0xac>)
 800698c:	481c      	ldr	r0, [pc, #112]	@ (8006a00 <__pow5mult+0xb0>)
 800698e:	31ff      	adds	r1, #255	@ 0xff
 8006990:	f000 fbfa 	bl	8007188 <__assert_func>
 8006994:	6044      	str	r4, [r0, #4]
 8006996:	6084      	str	r4, [r0, #8]
 8006998:	6004      	str	r4, [r0, #0]
 800699a:	60c4      	str	r4, [r0, #12]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	689c      	ldr	r4, [r3, #8]
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	2c00      	cmp	r4, #0
 80069a4:	d108      	bne.n	80069b8 <__pow5mult+0x68>
 80069a6:	0038      	movs	r0, r7
 80069a8:	4916      	ldr	r1, [pc, #88]	@ (8006a04 <__pow5mult+0xb4>)
 80069aa:	f7ff ff07 	bl	80067bc <__i2b>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	0004      	movs	r4, r0
 80069b2:	6098      	str	r0, [r3, #8]
 80069b4:	2300      	movs	r3, #0
 80069b6:	6003      	str	r3, [r0, #0]
 80069b8:	2301      	movs	r3, #1
 80069ba:	421d      	tst	r5, r3
 80069bc:	d00a      	beq.n	80069d4 <__pow5mult+0x84>
 80069be:	0031      	movs	r1, r6
 80069c0:	0022      	movs	r2, r4
 80069c2:	0038      	movs	r0, r7
 80069c4:	f7ff ff12 	bl	80067ec <__multiply>
 80069c8:	0031      	movs	r1, r6
 80069ca:	9001      	str	r0, [sp, #4]
 80069cc:	0038      	movs	r0, r7
 80069ce:	f7ff fe3d 	bl	800664c <_Bfree>
 80069d2:	9e01      	ldr	r6, [sp, #4]
 80069d4:	106d      	asrs	r5, r5, #1
 80069d6:	d00c      	beq.n	80069f2 <__pow5mult+0xa2>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	2800      	cmp	r0, #0
 80069dc:	d107      	bne.n	80069ee <__pow5mult+0x9e>
 80069de:	0022      	movs	r2, r4
 80069e0:	0021      	movs	r1, r4
 80069e2:	0038      	movs	r0, r7
 80069e4:	f7ff ff02 	bl	80067ec <__multiply>
 80069e8:	2300      	movs	r3, #0
 80069ea:	6020      	str	r0, [r4, #0]
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	0004      	movs	r4, r0
 80069f0:	e7e2      	b.n	80069b8 <__pow5mult+0x68>
 80069f2:	0030      	movs	r0, r6
 80069f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	08007aac 	.word	0x08007aac
 80069fc:	080079d1 	.word	0x080079d1
 8006a00:	08007a51 	.word	0x08007a51
 8006a04:	00000271 	.word	0x00000271

08006a08 <__lshift>:
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0a:	000c      	movs	r4, r1
 8006a0c:	0016      	movs	r6, r2
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	1157      	asrs	r7, r2, #5
 8006a12:	b085      	sub	sp, #20
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	6849      	ldr	r1, [r1, #4]
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	9002      	str	r0, [sp, #8]
 8006a22:	9a00      	ldr	r2, [sp, #0]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	db10      	blt.n	8006a4a <__lshift+0x42>
 8006a28:	9802      	ldr	r0, [sp, #8]
 8006a2a:	f7ff fdcb 	bl	80065c4 <_Balloc>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	0001      	movs	r1, r0
 8006a32:	0005      	movs	r5, r0
 8006a34:	001a      	movs	r2, r3
 8006a36:	3114      	adds	r1, #20
 8006a38:	4298      	cmp	r0, r3
 8006a3a:	d10c      	bne.n	8006a56 <__lshift+0x4e>
 8006a3c:	21ef      	movs	r1, #239	@ 0xef
 8006a3e:	002a      	movs	r2, r5
 8006a40:	4b25      	ldr	r3, [pc, #148]	@ (8006ad8 <__lshift+0xd0>)
 8006a42:	4826      	ldr	r0, [pc, #152]	@ (8006adc <__lshift+0xd4>)
 8006a44:	0049      	lsls	r1, r1, #1
 8006a46:	f000 fb9f 	bl	8007188 <__assert_func>
 8006a4a:	3101      	adds	r1, #1
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	e7e8      	b.n	8006a22 <__lshift+0x1a>
 8006a50:	0098      	lsls	r0, r3, #2
 8006a52:	500a      	str	r2, [r1, r0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	42bb      	cmp	r3, r7
 8006a58:	dbfa      	blt.n	8006a50 <__lshift+0x48>
 8006a5a:	43fb      	mvns	r3, r7
 8006a5c:	17db      	asrs	r3, r3, #31
 8006a5e:	401f      	ands	r7, r3
 8006a60:	00bf      	lsls	r7, r7, #2
 8006a62:	0023      	movs	r3, r4
 8006a64:	201f      	movs	r0, #31
 8006a66:	19c9      	adds	r1, r1, r7
 8006a68:	0037      	movs	r7, r6
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	0092      	lsls	r2, r2, #2
 8006a70:	189a      	adds	r2, r3, r2
 8006a72:	4007      	ands	r7, r0
 8006a74:	4206      	tst	r6, r0
 8006a76:	d029      	beq.n	8006acc <__lshift+0xc4>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	1bc0      	subs	r0, r0, r7
 8006a7c:	9003      	str	r0, [sp, #12]
 8006a7e:	468c      	mov	ip, r1
 8006a80:	2000      	movs	r0, #0
 8006a82:	681e      	ldr	r6, [r3, #0]
 8006a84:	40be      	lsls	r6, r7
 8006a86:	4306      	orrs	r6, r0
 8006a88:	4660      	mov	r0, ip
 8006a8a:	c040      	stmia	r0!, {r6}
 8006a8c:	4684      	mov	ip, r0
 8006a8e:	9e03      	ldr	r6, [sp, #12]
 8006a90:	cb01      	ldmia	r3!, {r0}
 8006a92:	40f0      	lsrs	r0, r6
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d8f4      	bhi.n	8006a82 <__lshift+0x7a>
 8006a98:	0026      	movs	r6, r4
 8006a9a:	3615      	adds	r6, #21
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	42b2      	cmp	r2, r6
 8006aa0:	d304      	bcc.n	8006aac <__lshift+0xa4>
 8006aa2:	1b13      	subs	r3, r2, r4
 8006aa4:	3b15      	subs	r3, #21
 8006aa6:	089b      	lsrs	r3, r3, #2
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	50c8      	str	r0, [r1, r3]
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d002      	beq.n	8006ab8 <__lshift+0xb0>
 8006ab2:	9b01      	ldr	r3, [sp, #4]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	9b00      	ldr	r3, [sp, #0]
 8006aba:	9802      	ldr	r0, [sp, #8]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	0021      	movs	r1, r4
 8006ac0:	612b      	str	r3, [r5, #16]
 8006ac2:	f7ff fdc3 	bl	800664c <_Bfree>
 8006ac6:	0028      	movs	r0, r5
 8006ac8:	b005      	add	sp, #20
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006acc:	cb01      	ldmia	r3!, {r0}
 8006ace:	c101      	stmia	r1!, {r0}
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d8fb      	bhi.n	8006acc <__lshift+0xc4>
 8006ad4:	e7f0      	b.n	8006ab8 <__lshift+0xb0>
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	08007a40 	.word	0x08007a40
 8006adc:	08007a51 	.word	0x08007a51

08006ae0 <__mcmp>:
 8006ae0:	b530      	push	{r4, r5, lr}
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	6904      	ldr	r4, [r0, #16]
 8006ae6:	0002      	movs	r2, r0
 8006ae8:	1ae0      	subs	r0, r4, r3
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d10f      	bne.n	8006b0e <__mcmp+0x2e>
 8006aee:	3214      	adds	r2, #20
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	3114      	adds	r1, #20
 8006af4:	0014      	movs	r4, r2
 8006af6:	18c9      	adds	r1, r1, r3
 8006af8:	18d2      	adds	r2, r2, r3
 8006afa:	3a04      	subs	r2, #4
 8006afc:	3904      	subs	r1, #4
 8006afe:	6815      	ldr	r5, [r2, #0]
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	429d      	cmp	r5, r3
 8006b04:	d004      	beq.n	8006b10 <__mcmp+0x30>
 8006b06:	2001      	movs	r0, #1
 8006b08:	429d      	cmp	r5, r3
 8006b0a:	d200      	bcs.n	8006b0e <__mcmp+0x2e>
 8006b0c:	3802      	subs	r0, #2
 8006b0e:	bd30      	pop	{r4, r5, pc}
 8006b10:	4294      	cmp	r4, r2
 8006b12:	d3f2      	bcc.n	8006afa <__mcmp+0x1a>
 8006b14:	e7fb      	b.n	8006b0e <__mcmp+0x2e>
	...

08006b18 <__mdiff>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	000c      	movs	r4, r1
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	9000      	str	r0, [sp, #0]
 8006b20:	0011      	movs	r1, r2
 8006b22:	0020      	movs	r0, r4
 8006b24:	0017      	movs	r7, r2
 8006b26:	f7ff ffdb 	bl	8006ae0 <__mcmp>
 8006b2a:	1e05      	subs	r5, r0, #0
 8006b2c:	d110      	bne.n	8006b50 <__mdiff+0x38>
 8006b2e:	0001      	movs	r1, r0
 8006b30:	9800      	ldr	r0, [sp, #0]
 8006b32:	f7ff fd47 	bl	80065c4 <_Balloc>
 8006b36:	1e02      	subs	r2, r0, #0
 8006b38:	d104      	bne.n	8006b44 <__mdiff+0x2c>
 8006b3a:	4b40      	ldr	r3, [pc, #256]	@ (8006c3c <__mdiff+0x124>)
 8006b3c:	4840      	ldr	r0, [pc, #256]	@ (8006c40 <__mdiff+0x128>)
 8006b3e:	4941      	ldr	r1, [pc, #260]	@ (8006c44 <__mdiff+0x12c>)
 8006b40:	f000 fb22 	bl	8007188 <__assert_func>
 8006b44:	2301      	movs	r3, #1
 8006b46:	6145      	str	r5, [r0, #20]
 8006b48:	6103      	str	r3, [r0, #16]
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	b007      	add	sp, #28
 8006b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b50:	2600      	movs	r6, #0
 8006b52:	42b0      	cmp	r0, r6
 8006b54:	da03      	bge.n	8006b5e <__mdiff+0x46>
 8006b56:	0023      	movs	r3, r4
 8006b58:	003c      	movs	r4, r7
 8006b5a:	001f      	movs	r7, r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	9800      	ldr	r0, [sp, #0]
 8006b62:	f7ff fd2f 	bl	80065c4 <_Balloc>
 8006b66:	1e02      	subs	r2, r0, #0
 8006b68:	d103      	bne.n	8006b72 <__mdiff+0x5a>
 8006b6a:	4b34      	ldr	r3, [pc, #208]	@ (8006c3c <__mdiff+0x124>)
 8006b6c:	4834      	ldr	r0, [pc, #208]	@ (8006c40 <__mdiff+0x128>)
 8006b6e:	4936      	ldr	r1, [pc, #216]	@ (8006c48 <__mdiff+0x130>)
 8006b70:	e7e6      	b.n	8006b40 <__mdiff+0x28>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	3414      	adds	r4, #20
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	18e3      	adds	r3, r4, r3
 8006b7c:	0021      	movs	r1, r4
 8006b7e:	9401      	str	r4, [sp, #4]
 8006b80:	003c      	movs	r4, r7
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3414      	adds	r4, #20
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	18e3      	adds	r3, r4, r3
 8006b8c:	9303      	str	r3, [sp, #12]
 8006b8e:	0003      	movs	r3, r0
 8006b90:	60c6      	str	r6, [r0, #12]
 8006b92:	468c      	mov	ip, r1
 8006b94:	2000      	movs	r0, #0
 8006b96:	3314      	adds	r3, #20
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	4663      	mov	r3, ip
 8006b9e:	cb20      	ldmia	r3!, {r5}
 8006ba0:	b2a9      	uxth	r1, r5
 8006ba2:	000e      	movs	r6, r1
 8006ba4:	469c      	mov	ip, r3
 8006ba6:	cc08      	ldmia	r4!, {r3}
 8006ba8:	0c2d      	lsrs	r5, r5, #16
 8006baa:	b299      	uxth	r1, r3
 8006bac:	1a71      	subs	r1, r6, r1
 8006bae:	1809      	adds	r1, r1, r0
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	1408      	asrs	r0, r1, #16
 8006bb4:	1aeb      	subs	r3, r5, r3
 8006bb6:	181b      	adds	r3, r3, r0
 8006bb8:	1418      	asrs	r0, r3, #16
 8006bba:	b289      	uxth	r1, r1
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	4319      	orrs	r1, r3
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	c302      	stmia	r3!, {r1}
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d8e7      	bhi.n	8006b9c <__mdiff+0x84>
 8006bcc:	0039      	movs	r1, r7
 8006bce:	9c03      	ldr	r4, [sp, #12]
 8006bd0:	3115      	adds	r1, #21
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	428c      	cmp	r4, r1
 8006bd6:	d304      	bcc.n	8006be2 <__mdiff+0xca>
 8006bd8:	1be3      	subs	r3, r4, r7
 8006bda:	3b15      	subs	r3, #21
 8006bdc:	089b      	lsrs	r3, r3, #2
 8006bde:	3301      	adds	r3, #1
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	9901      	ldr	r1, [sp, #4]
 8006be4:	18cd      	adds	r5, r1, r3
 8006be6:	9904      	ldr	r1, [sp, #16]
 8006be8:	002e      	movs	r6, r5
 8006bea:	18cb      	adds	r3, r1, r3
 8006bec:	001f      	movs	r7, r3
 8006bee:	9902      	ldr	r1, [sp, #8]
 8006bf0:	428e      	cmp	r6, r1
 8006bf2:	d311      	bcc.n	8006c18 <__mdiff+0x100>
 8006bf4:	9c02      	ldr	r4, [sp, #8]
 8006bf6:	1ee9      	subs	r1, r5, #3
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	428c      	cmp	r4, r1
 8006bfc:	d304      	bcc.n	8006c08 <__mdiff+0xf0>
 8006bfe:	0021      	movs	r1, r4
 8006c00:	3103      	adds	r1, #3
 8006c02:	1b49      	subs	r1, r1, r5
 8006c04:	0889      	lsrs	r1, r1, #2
 8006c06:	0088      	lsls	r0, r1, #2
 8006c08:	181b      	adds	r3, r3, r0
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	6819      	ldr	r1, [r3, #0]
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d010      	beq.n	8006c34 <__mdiff+0x11c>
 8006c12:	9b00      	ldr	r3, [sp, #0]
 8006c14:	6113      	str	r3, [r2, #16]
 8006c16:	e798      	b.n	8006b4a <__mdiff+0x32>
 8006c18:	4684      	mov	ip, r0
 8006c1a:	ce02      	ldmia	r6!, {r1}
 8006c1c:	b288      	uxth	r0, r1
 8006c1e:	4460      	add	r0, ip
 8006c20:	1400      	asrs	r0, r0, #16
 8006c22:	0c0c      	lsrs	r4, r1, #16
 8006c24:	1904      	adds	r4, r0, r4
 8006c26:	4461      	add	r1, ip
 8006c28:	1420      	asrs	r0, r4, #16
 8006c2a:	b289      	uxth	r1, r1
 8006c2c:	0424      	lsls	r4, r4, #16
 8006c2e:	4321      	orrs	r1, r4
 8006c30:	c702      	stmia	r7!, {r1}
 8006c32:	e7dc      	b.n	8006bee <__mdiff+0xd6>
 8006c34:	9900      	ldr	r1, [sp, #0]
 8006c36:	3901      	subs	r1, #1
 8006c38:	9100      	str	r1, [sp, #0]
 8006c3a:	e7e6      	b.n	8006c0a <__mdiff+0xf2>
 8006c3c:	08007a40 	.word	0x08007a40
 8006c40:	08007a51 	.word	0x08007a51
 8006c44:	00000237 	.word	0x00000237
 8006c48:	00000245 	.word	0x00000245

08006c4c <__d2b>:
 8006c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c4e:	2101      	movs	r1, #1
 8006c50:	0016      	movs	r6, r2
 8006c52:	001f      	movs	r7, r3
 8006c54:	f7ff fcb6 	bl	80065c4 <_Balloc>
 8006c58:	1e04      	subs	r4, r0, #0
 8006c5a:	d105      	bne.n	8006c68 <__d2b+0x1c>
 8006c5c:	0022      	movs	r2, r4
 8006c5e:	4b25      	ldr	r3, [pc, #148]	@ (8006cf4 <__d2b+0xa8>)
 8006c60:	4825      	ldr	r0, [pc, #148]	@ (8006cf8 <__d2b+0xac>)
 8006c62:	4926      	ldr	r1, [pc, #152]	@ (8006cfc <__d2b+0xb0>)
 8006c64:	f000 fa90 	bl	8007188 <__assert_func>
 8006c68:	033b      	lsls	r3, r7, #12
 8006c6a:	007d      	lsls	r5, r7, #1
 8006c6c:	0b1b      	lsrs	r3, r3, #12
 8006c6e:	0d6d      	lsrs	r5, r5, #21
 8006c70:	d002      	beq.n	8006c78 <__d2b+0x2c>
 8006c72:	2280      	movs	r2, #128	@ 0x80
 8006c74:	0352      	lsls	r2, r2, #13
 8006c76:	4313      	orrs	r3, r2
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	d025      	beq.n	8006cca <__d2b+0x7e>
 8006c7e:	4668      	mov	r0, sp
 8006c80:	9600      	str	r6, [sp, #0]
 8006c82:	f7ff fd6c 	bl	800675e <__lo0bits>
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	9900      	ldr	r1, [sp, #0]
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d01b      	beq.n	8006cc6 <__d2b+0x7a>
 8006c8e:	2220      	movs	r2, #32
 8006c90:	001e      	movs	r6, r3
 8006c92:	1a12      	subs	r2, r2, r0
 8006c94:	4096      	lsls	r6, r2
 8006c96:	0032      	movs	r2, r6
 8006c98:	40c3      	lsrs	r3, r0
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	6162      	str	r2, [r4, #20]
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	9e01      	ldr	r6, [sp, #4]
 8006ca2:	61a6      	str	r6, [r4, #24]
 8006ca4:	1e73      	subs	r3, r6, #1
 8006ca6:	419e      	sbcs	r6, r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	6126      	str	r6, [r4, #16]
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d014      	beq.n	8006cda <__d2b+0x8e>
 8006cb0:	2635      	movs	r6, #53	@ 0x35
 8006cb2:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <__d2b+0xb4>)
 8006cb4:	18ed      	adds	r5, r5, r3
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	182d      	adds	r5, r5, r0
 8006cba:	601d      	str	r5, [r3, #0]
 8006cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cbe:	1a36      	subs	r6, r6, r0
 8006cc0:	601e      	str	r6, [r3, #0]
 8006cc2:	0020      	movs	r0, r4
 8006cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc6:	6161      	str	r1, [r4, #20]
 8006cc8:	e7ea      	b.n	8006ca0 <__d2b+0x54>
 8006cca:	a801      	add	r0, sp, #4
 8006ccc:	f7ff fd47 	bl	800675e <__lo0bits>
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	2601      	movs	r6, #1
 8006cd4:	6163      	str	r3, [r4, #20]
 8006cd6:	3020      	adds	r0, #32
 8006cd8:	e7e7      	b.n	8006caa <__d2b+0x5e>
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <__d2b+0xb8>)
 8006cdc:	18c0      	adds	r0, r0, r3
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	6018      	str	r0, [r3, #0]
 8006ce2:	4b09      	ldr	r3, [pc, #36]	@ (8006d08 <__d2b+0xbc>)
 8006ce4:	18f3      	adds	r3, r6, r3
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	18e3      	adds	r3, r4, r3
 8006cea:	6958      	ldr	r0, [r3, #20]
 8006cec:	f7ff fd16 	bl	800671c <__hi0bits>
 8006cf0:	0176      	lsls	r6, r6, #5
 8006cf2:	e7e3      	b.n	8006cbc <__d2b+0x70>
 8006cf4:	08007a40 	.word	0x08007a40
 8006cf8:	08007a51 	.word	0x08007a51
 8006cfc:	0000030f 	.word	0x0000030f
 8006d00:	fffffbcd 	.word	0xfffffbcd
 8006d04:	fffffbce 	.word	0xfffffbce
 8006d08:	3fffffff 	.word	0x3fffffff

08006d0c <__ssputs_r>:
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	688e      	ldr	r6, [r1, #8]
 8006d10:	b085      	sub	sp, #20
 8006d12:	001f      	movs	r7, r3
 8006d14:	000c      	movs	r4, r1
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	9002      	str	r0, [sp, #8]
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	42be      	cmp	r6, r7
 8006d1e:	d830      	bhi.n	8006d82 <__ssputs_r+0x76>
 8006d20:	210c      	movs	r1, #12
 8006d22:	5e62      	ldrsh	r2, [r4, r1]
 8006d24:	2190      	movs	r1, #144	@ 0x90
 8006d26:	00c9      	lsls	r1, r1, #3
 8006d28:	420a      	tst	r2, r1
 8006d2a:	d028      	beq.n	8006d7e <__ssputs_r+0x72>
 8006d2c:	2003      	movs	r0, #3
 8006d2e:	6921      	ldr	r1, [r4, #16]
 8006d30:	1a5b      	subs	r3, r3, r1
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	4343      	muls	r3, r0
 8006d38:	9801      	ldr	r0, [sp, #4]
 8006d3a:	0fdd      	lsrs	r5, r3, #31
 8006d3c:	18ed      	adds	r5, r5, r3
 8006d3e:	1c7b      	adds	r3, r7, #1
 8006d40:	181b      	adds	r3, r3, r0
 8006d42:	106d      	asrs	r5, r5, #1
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	d900      	bls.n	8006d4a <__ssputs_r+0x3e>
 8006d48:	001d      	movs	r5, r3
 8006d4a:	0552      	lsls	r2, r2, #21
 8006d4c:	d528      	bpl.n	8006da0 <__ssputs_r+0x94>
 8006d4e:	0029      	movs	r1, r5
 8006d50:	9802      	ldr	r0, [sp, #8]
 8006d52:	f7ff fba7 	bl	80064a4 <_malloc_r>
 8006d56:	1e06      	subs	r6, r0, #0
 8006d58:	d02c      	beq.n	8006db4 <__ssputs_r+0xa8>
 8006d5a:	9a01      	ldr	r2, [sp, #4]
 8006d5c:	6921      	ldr	r1, [r4, #16]
 8006d5e:	f000 fa09 	bl	8007174 <memcpy>
 8006d62:	89a2      	ldrh	r2, [r4, #12]
 8006d64:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <__ssputs_r+0xbc>)
 8006d66:	401a      	ands	r2, r3
 8006d68:	2380      	movs	r3, #128	@ 0x80
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	6126      	str	r6, [r4, #16]
 8006d72:	18f6      	adds	r6, r6, r3
 8006d74:	6026      	str	r6, [r4, #0]
 8006d76:	003e      	movs	r6, r7
 8006d78:	6165      	str	r5, [r4, #20]
 8006d7a:	1aed      	subs	r5, r5, r3
 8006d7c:	60a5      	str	r5, [r4, #8]
 8006d7e:	42be      	cmp	r6, r7
 8006d80:	d900      	bls.n	8006d84 <__ssputs_r+0x78>
 8006d82:	003e      	movs	r6, r7
 8006d84:	0032      	movs	r2, r6
 8006d86:	9903      	ldr	r1, [sp, #12]
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	f000 f9ce 	bl	800712a <memmove>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	1b9b      	subs	r3, r3, r6
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	199b      	adds	r3, r3, r6
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	b005      	add	sp, #20
 8006d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da0:	002a      	movs	r2, r5
 8006da2:	9802      	ldr	r0, [sp, #8]
 8006da4:	f000 fa4d 	bl	8007242 <_realloc_r>
 8006da8:	1e06      	subs	r6, r0, #0
 8006daa:	d1e0      	bne.n	8006d6e <__ssputs_r+0x62>
 8006dac:	6921      	ldr	r1, [r4, #16]
 8006dae:	9802      	ldr	r0, [sp, #8]
 8006db0:	f7ff fb02 	bl	80063b8 <_free_r>
 8006db4:	230c      	movs	r3, #12
 8006db6:	2001      	movs	r0, #1
 8006db8:	9a02      	ldr	r2, [sp, #8]
 8006dba:	4240      	negs	r0, r0
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	89a2      	ldrh	r2, [r4, #12]
 8006dc0:	3334      	adds	r3, #52	@ 0x34
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	e7e9      	b.n	8006d9c <__ssputs_r+0x90>
 8006dc8:	fffffb7f 	.word	0xfffffb7f

08006dcc <_svfiprintf_r>:
 8006dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dce:	b0a1      	sub	sp, #132	@ 0x84
 8006dd0:	9003      	str	r0, [sp, #12]
 8006dd2:	001d      	movs	r5, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	000f      	movs	r7, r1
 8006dd8:	0016      	movs	r6, r2
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	d511      	bpl.n	8006e02 <_svfiprintf_r+0x36>
 8006dde:	690b      	ldr	r3, [r1, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <_svfiprintf_r+0x36>
 8006de4:	2140      	movs	r1, #64	@ 0x40
 8006de6:	f7ff fb5d 	bl	80064a4 <_malloc_r>
 8006dea:	6038      	str	r0, [r7, #0]
 8006dec:	6138      	str	r0, [r7, #16]
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d105      	bne.n	8006dfe <_svfiprintf_r+0x32>
 8006df2:	230c      	movs	r3, #12
 8006df4:	9a03      	ldr	r2, [sp, #12]
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	2001      	movs	r0, #1
 8006dfa:	4240      	negs	r0, r0
 8006dfc:	e0cf      	b.n	8006f9e <_svfiprintf_r+0x1d2>
 8006dfe:	2340      	movs	r3, #64	@ 0x40
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	2300      	movs	r3, #0
 8006e04:	ac08      	add	r4, sp, #32
 8006e06:	6163      	str	r3, [r4, #20]
 8006e08:	3320      	adds	r3, #32
 8006e0a:	7663      	strb	r3, [r4, #25]
 8006e0c:	3310      	adds	r3, #16
 8006e0e:	76a3      	strb	r3, [r4, #26]
 8006e10:	9507      	str	r5, [sp, #28]
 8006e12:	0035      	movs	r5, r6
 8006e14:	782b      	ldrb	r3, [r5, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <_svfiprintf_r+0x52>
 8006e1a:	2b25      	cmp	r3, #37	@ 0x25
 8006e1c:	d148      	bne.n	8006eb0 <_svfiprintf_r+0xe4>
 8006e1e:	1bab      	subs	r3, r5, r6
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	42b5      	cmp	r5, r6
 8006e24:	d00b      	beq.n	8006e3e <_svfiprintf_r+0x72>
 8006e26:	0032      	movs	r2, r6
 8006e28:	0039      	movs	r1, r7
 8006e2a:	9803      	ldr	r0, [sp, #12]
 8006e2c:	f7ff ff6e 	bl	8006d0c <__ssputs_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d100      	bne.n	8006e36 <_svfiprintf_r+0x6a>
 8006e34:	e0ae      	b.n	8006f94 <_svfiprintf_r+0x1c8>
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	9a05      	ldr	r2, [sp, #20]
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	6163      	str	r3, [r4, #20]
 8006e3e:	782b      	ldrb	r3, [r5, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d100      	bne.n	8006e46 <_svfiprintf_r+0x7a>
 8006e44:	e0a6      	b.n	8006f94 <_svfiprintf_r+0x1c8>
 8006e46:	2201      	movs	r2, #1
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	6062      	str	r2, [r4, #4]
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	3254      	adds	r2, #84	@ 0x54
 8006e52:	1852      	adds	r2, r2, r1
 8006e54:	1c6e      	adds	r6, r5, #1
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	60e3      	str	r3, [r4, #12]
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	7013      	strb	r3, [r2, #0]
 8006e5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006e60:	4b54      	ldr	r3, [pc, #336]	@ (8006fb4 <_svfiprintf_r+0x1e8>)
 8006e62:	2205      	movs	r2, #5
 8006e64:	0018      	movs	r0, r3
 8006e66:	7831      	ldrb	r1, [r6, #0]
 8006e68:	9305      	str	r3, [sp, #20]
 8006e6a:	f7fe fc18 	bl	800569e <memchr>
 8006e6e:	1c75      	adds	r5, r6, #1
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d11f      	bne.n	8006eb4 <_svfiprintf_r+0xe8>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	06d3      	lsls	r3, r2, #27
 8006e78:	d504      	bpl.n	8006e84 <_svfiprintf_r+0xb8>
 8006e7a:	2353      	movs	r3, #83	@ 0x53
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	185b      	adds	r3, r3, r1
 8006e80:	2120      	movs	r1, #32
 8006e82:	7019      	strb	r1, [r3, #0]
 8006e84:	0713      	lsls	r3, r2, #28
 8006e86:	d504      	bpl.n	8006e92 <_svfiprintf_r+0xc6>
 8006e88:	2353      	movs	r3, #83	@ 0x53
 8006e8a:	a904      	add	r1, sp, #16
 8006e8c:	185b      	adds	r3, r3, r1
 8006e8e:	212b      	movs	r1, #43	@ 0x2b
 8006e90:	7019      	strb	r1, [r3, #0]
 8006e92:	7833      	ldrb	r3, [r6, #0]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d016      	beq.n	8006ec6 <_svfiprintf_r+0xfa>
 8006e98:	0035      	movs	r5, r6
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	200a      	movs	r0, #10
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	782a      	ldrb	r2, [r5, #0]
 8006ea2:	1c6e      	adds	r6, r5, #1
 8006ea4:	3a30      	subs	r2, #48	@ 0x30
 8006ea6:	2a09      	cmp	r2, #9
 8006ea8:	d950      	bls.n	8006f4c <_svfiprintf_r+0x180>
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	d111      	bne.n	8006ed2 <_svfiprintf_r+0x106>
 8006eae:	e017      	b.n	8006ee0 <_svfiprintf_r+0x114>
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7af      	b.n	8006e14 <_svfiprintf_r+0x48>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	1ac0      	subs	r0, r0, r3
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4083      	lsls	r3, r0
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	002e      	movs	r6, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e7cc      	b.n	8006e60 <_svfiprintf_r+0x94>
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	1d19      	adds	r1, r3, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	9107      	str	r1, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	db01      	blt.n	8006ed6 <_svfiprintf_r+0x10a>
 8006ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed4:	e004      	b.n	8006ee0 <_svfiprintf_r+0x114>
 8006ed6:	425b      	negs	r3, r3
 8006ed8:	60e3      	str	r3, [r4, #12]
 8006eda:	2302      	movs	r3, #2
 8006edc:	4313      	orrs	r3, r2
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	782b      	ldrb	r3, [r5, #0]
 8006ee2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ee4:	d10c      	bne.n	8006f00 <_svfiprintf_r+0x134>
 8006ee6:	786b      	ldrb	r3, [r5, #1]
 8006ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eea:	d134      	bne.n	8006f56 <_svfiprintf_r+0x18a>
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	3502      	adds	r5, #2
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	9207      	str	r2, [sp, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da01      	bge.n	8006efe <_svfiprintf_r+0x132>
 8006efa:	2301      	movs	r3, #1
 8006efc:	425b      	negs	r3, r3
 8006efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f00:	4e2d      	ldr	r6, [pc, #180]	@ (8006fb8 <_svfiprintf_r+0x1ec>)
 8006f02:	2203      	movs	r2, #3
 8006f04:	0030      	movs	r0, r6
 8006f06:	7829      	ldrb	r1, [r5, #0]
 8006f08:	f7fe fbc9 	bl	800569e <memchr>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d006      	beq.n	8006f1e <_svfiprintf_r+0x152>
 8006f10:	2340      	movs	r3, #64	@ 0x40
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	4083      	lsls	r3, r0
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	3501      	adds	r5, #1
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	7829      	ldrb	r1, [r5, #0]
 8006f20:	2206      	movs	r2, #6
 8006f22:	4826      	ldr	r0, [pc, #152]	@ (8006fbc <_svfiprintf_r+0x1f0>)
 8006f24:	1c6e      	adds	r6, r5, #1
 8006f26:	7621      	strb	r1, [r4, #24]
 8006f28:	f7fe fbb9 	bl	800569e <memchr>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d038      	beq.n	8006fa2 <_svfiprintf_r+0x1d6>
 8006f30:	4b23      	ldr	r3, [pc, #140]	@ (8006fc0 <_svfiprintf_r+0x1f4>)
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d122      	bne.n	8006f7c <_svfiprintf_r+0x1b0>
 8006f36:	2207      	movs	r2, #7
 8006f38:	9b07      	ldr	r3, [sp, #28]
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	4393      	bics	r3, r2
 8006f3e:	3308      	adds	r3, #8
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	9a04      	ldr	r2, [sp, #16]
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	e762      	b.n	8006e12 <_svfiprintf_r+0x46>
 8006f4c:	4343      	muls	r3, r0
 8006f4e:	0035      	movs	r5, r6
 8006f50:	2101      	movs	r1, #1
 8006f52:	189b      	adds	r3, r3, r2
 8006f54:	e7a4      	b.n	8006ea0 <_svfiprintf_r+0xd4>
 8006f56:	2300      	movs	r3, #0
 8006f58:	200a      	movs	r0, #10
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	782a      	ldrb	r2, [r5, #0]
 8006f62:	1c6e      	adds	r6, r5, #1
 8006f64:	3a30      	subs	r2, #48	@ 0x30
 8006f66:	2a09      	cmp	r2, #9
 8006f68:	d903      	bls.n	8006f72 <_svfiprintf_r+0x1a6>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0c8      	beq.n	8006f00 <_svfiprintf_r+0x134>
 8006f6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f70:	e7c6      	b.n	8006f00 <_svfiprintf_r+0x134>
 8006f72:	4341      	muls	r1, r0
 8006f74:	0035      	movs	r5, r6
 8006f76:	2301      	movs	r3, #1
 8006f78:	1889      	adds	r1, r1, r2
 8006f7a:	e7f1      	b.n	8006f60 <_svfiprintf_r+0x194>
 8006f7c:	aa07      	add	r2, sp, #28
 8006f7e:	9200      	str	r2, [sp, #0]
 8006f80:	0021      	movs	r1, r4
 8006f82:	003a      	movs	r2, r7
 8006f84:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <_svfiprintf_r+0x1f8>)
 8006f86:	9803      	ldr	r0, [sp, #12]
 8006f88:	f7fd fdf8 	bl	8004b7c <_printf_float>
 8006f8c:	9004      	str	r0, [sp, #16]
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	d1d6      	bne.n	8006f42 <_svfiprintf_r+0x176>
 8006f94:	89bb      	ldrh	r3, [r7, #12]
 8006f96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006f98:	065b      	lsls	r3, r3, #25
 8006f9a:	d500      	bpl.n	8006f9e <_svfiprintf_r+0x1d2>
 8006f9c:	e72c      	b.n	8006df8 <_svfiprintf_r+0x2c>
 8006f9e:	b021      	add	sp, #132	@ 0x84
 8006fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa2:	aa07      	add	r2, sp, #28
 8006fa4:	9200      	str	r2, [sp, #0]
 8006fa6:	0021      	movs	r1, r4
 8006fa8:	003a      	movs	r2, r7
 8006faa:	4b06      	ldr	r3, [pc, #24]	@ (8006fc4 <_svfiprintf_r+0x1f8>)
 8006fac:	9803      	ldr	r0, [sp, #12]
 8006fae:	f7fe f893 	bl	80050d8 <_printf_i>
 8006fb2:	e7eb      	b.n	8006f8c <_svfiprintf_r+0x1c0>
 8006fb4:	08007ba8 	.word	0x08007ba8
 8006fb8:	08007bae 	.word	0x08007bae
 8006fbc:	08007bb2 	.word	0x08007bb2
 8006fc0:	08004b7d 	.word	0x08004b7d
 8006fc4:	08006d0d 	.word	0x08006d0d

08006fc8 <__sflush_r>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	220c      	movs	r2, #12
 8006fcc:	5e8b      	ldrsh	r3, [r1, r2]
 8006fce:	0005      	movs	r5, r0
 8006fd0:	000c      	movs	r4, r1
 8006fd2:	071a      	lsls	r2, r3, #28
 8006fd4:	d456      	bmi.n	8007084 <__sflush_r+0xbc>
 8006fd6:	684a      	ldr	r2, [r1, #4]
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	dc02      	bgt.n	8006fe2 <__sflush_r+0x1a>
 8006fdc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	dd4e      	ble.n	8007080 <__sflush_r+0xb8>
 8006fe2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006fe4:	2f00      	cmp	r7, #0
 8006fe6:	d04b      	beq.n	8007080 <__sflush_r+0xb8>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2080      	movs	r0, #128	@ 0x80
 8006fec:	682e      	ldr	r6, [r5, #0]
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	0140      	lsls	r0, r0, #5
 8006ff4:	6a21      	ldr	r1, [r4, #32]
 8006ff6:	4002      	ands	r2, r0
 8006ff8:	4203      	tst	r3, r0
 8006ffa:	d033      	beq.n	8007064 <__sflush_r+0x9c>
 8006ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	075b      	lsls	r3, r3, #29
 8007002:	d506      	bpl.n	8007012 <__sflush_r+0x4a>
 8007004:	6863      	ldr	r3, [r4, #4]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <__sflush_r+0x4a>
 800700e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	2300      	movs	r3, #0
 8007014:	0028      	movs	r0, r5
 8007016:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007018:	6a21      	ldr	r1, [r4, #32]
 800701a:	47b8      	blx	r7
 800701c:	89a2      	ldrh	r2, [r4, #12]
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d106      	bne.n	8007030 <__sflush_r+0x68>
 8007022:	6829      	ldr	r1, [r5, #0]
 8007024:	291d      	cmp	r1, #29
 8007026:	d846      	bhi.n	80070b6 <__sflush_r+0xee>
 8007028:	4b29      	ldr	r3, [pc, #164]	@ (80070d0 <__sflush_r+0x108>)
 800702a:	410b      	asrs	r3, r1
 800702c:	07db      	lsls	r3, r3, #31
 800702e:	d442      	bmi.n	80070b6 <__sflush_r+0xee>
 8007030:	2300      	movs	r3, #0
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	6923      	ldr	r3, [r4, #16]
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	04d2      	lsls	r2, r2, #19
 800703a:	d505      	bpl.n	8007048 <__sflush_r+0x80>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <__sflush_r+0x7e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d100      	bne.n	8007048 <__sflush_r+0x80>
 8007046:	6560      	str	r0, [r4, #84]	@ 0x54
 8007048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704a:	602e      	str	r6, [r5, #0]
 800704c:	2900      	cmp	r1, #0
 800704e:	d017      	beq.n	8007080 <__sflush_r+0xb8>
 8007050:	0023      	movs	r3, r4
 8007052:	3344      	adds	r3, #68	@ 0x44
 8007054:	4299      	cmp	r1, r3
 8007056:	d002      	beq.n	800705e <__sflush_r+0x96>
 8007058:	0028      	movs	r0, r5
 800705a:	f7ff f9ad 	bl	80063b8 <_free_r>
 800705e:	2300      	movs	r3, #0
 8007060:	6363      	str	r3, [r4, #52]	@ 0x34
 8007062:	e00d      	b.n	8007080 <__sflush_r+0xb8>
 8007064:	2301      	movs	r3, #1
 8007066:	0028      	movs	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	0002      	movs	r2, r0
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d1c6      	bne.n	8006ffe <__sflush_r+0x36>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0c3      	beq.n	8006ffe <__sflush_r+0x36>
 8007076:	2b1d      	cmp	r3, #29
 8007078:	d001      	beq.n	800707e <__sflush_r+0xb6>
 800707a:	2b16      	cmp	r3, #22
 800707c:	d11a      	bne.n	80070b4 <__sflush_r+0xec>
 800707e:	602e      	str	r6, [r5, #0]
 8007080:	2000      	movs	r0, #0
 8007082:	e01e      	b.n	80070c2 <__sflush_r+0xfa>
 8007084:	690e      	ldr	r6, [r1, #16]
 8007086:	2e00      	cmp	r6, #0
 8007088:	d0fa      	beq.n	8007080 <__sflush_r+0xb8>
 800708a:	680f      	ldr	r7, [r1, #0]
 800708c:	600e      	str	r6, [r1, #0]
 800708e:	1bba      	subs	r2, r7, r6
 8007090:	9201      	str	r2, [sp, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	079b      	lsls	r3, r3, #30
 8007096:	d100      	bne.n	800709a <__sflush_r+0xd2>
 8007098:	694a      	ldr	r2, [r1, #20]
 800709a:	60a2      	str	r2, [r4, #8]
 800709c:	9b01      	ldr	r3, [sp, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	ddee      	ble.n	8007080 <__sflush_r+0xb8>
 80070a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80070a4:	0032      	movs	r2, r6
 80070a6:	001f      	movs	r7, r3
 80070a8:	0028      	movs	r0, r5
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	47b8      	blx	r7
 80070b0:	2800      	cmp	r0, #0
 80070b2:	dc07      	bgt.n	80070c4 <__sflush_r+0xfc>
 80070b4:	89a2      	ldrh	r2, [r4, #12]
 80070b6:	2340      	movs	r3, #64	@ 0x40
 80070b8:	2001      	movs	r0, #1
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b21b      	sxth	r3, r3
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	4240      	negs	r0, r0
 80070c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	1836      	adds	r6, r6, r0
 80070c8:	1a1b      	subs	r3, r3, r0
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	e7e6      	b.n	800709c <__sflush_r+0xd4>
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	dfbffffe 	.word	0xdfbffffe

080070d4 <_fflush_r>:
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	b570      	push	{r4, r5, r6, lr}
 80070d8:	0005      	movs	r5, r0
 80070da:	000c      	movs	r4, r1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <_fflush_r+0x12>
 80070e0:	2500      	movs	r5, #0
 80070e2:	0028      	movs	r0, r5
 80070e4:	bd70      	pop	{r4, r5, r6, pc}
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d004      	beq.n	80070f4 <_fflush_r+0x20>
 80070ea:	6a03      	ldr	r3, [r0, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <_fflush_r+0x20>
 80070f0:	f7fe f990 	bl	8005414 <__sinit>
 80070f4:	220c      	movs	r2, #12
 80070f6:	5ea3      	ldrsh	r3, [r4, r2]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f1      	beq.n	80070e0 <_fflush_r+0xc>
 80070fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070fe:	07d2      	lsls	r2, r2, #31
 8007100:	d404      	bmi.n	800710c <_fflush_r+0x38>
 8007102:	059b      	lsls	r3, r3, #22
 8007104:	d402      	bmi.n	800710c <_fflush_r+0x38>
 8007106:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007108:	f7fe fabf 	bl	800568a <__retarget_lock_acquire_recursive>
 800710c:	0028      	movs	r0, r5
 800710e:	0021      	movs	r1, r4
 8007110:	f7ff ff5a 	bl	8006fc8 <__sflush_r>
 8007114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007116:	0005      	movs	r5, r0
 8007118:	07db      	lsls	r3, r3, #31
 800711a:	d4e2      	bmi.n	80070e2 <_fflush_r+0xe>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	059b      	lsls	r3, r3, #22
 8007120:	d4df      	bmi.n	80070e2 <_fflush_r+0xe>
 8007122:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007124:	f7fe fab2 	bl	800568c <__retarget_lock_release_recursive>
 8007128:	e7db      	b.n	80070e2 <_fflush_r+0xe>

0800712a <memmove>:
 800712a:	b510      	push	{r4, lr}
 800712c:	4288      	cmp	r0, r1
 800712e:	d806      	bhi.n	800713e <memmove+0x14>
 8007130:	2300      	movs	r3, #0
 8007132:	429a      	cmp	r2, r3
 8007134:	d008      	beq.n	8007148 <memmove+0x1e>
 8007136:	5ccc      	ldrb	r4, [r1, r3]
 8007138:	54c4      	strb	r4, [r0, r3]
 800713a:	3301      	adds	r3, #1
 800713c:	e7f9      	b.n	8007132 <memmove+0x8>
 800713e:	188b      	adds	r3, r1, r2
 8007140:	4298      	cmp	r0, r3
 8007142:	d2f5      	bcs.n	8007130 <memmove+0x6>
 8007144:	3a01      	subs	r2, #1
 8007146:	d200      	bcs.n	800714a <memmove+0x20>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	5c8b      	ldrb	r3, [r1, r2]
 800714c:	5483      	strb	r3, [r0, r2]
 800714e:	e7f9      	b.n	8007144 <memmove+0x1a>

08007150 <_sbrk_r>:
 8007150:	2300      	movs	r3, #0
 8007152:	b570      	push	{r4, r5, r6, lr}
 8007154:	4d06      	ldr	r5, [pc, #24]	@ (8007170 <_sbrk_r+0x20>)
 8007156:	0004      	movs	r4, r0
 8007158:	0008      	movs	r0, r1
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	f7fb fd1e 	bl	8002b9c <_sbrk>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d103      	bne.n	800716c <_sbrk_r+0x1c>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d000      	beq.n	800716c <_sbrk_r+0x1c>
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	bd70      	pop	{r4, r5, r6, pc}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	2000057c 	.word	0x2000057c

08007174 <memcpy>:
 8007174:	2300      	movs	r3, #0
 8007176:	b510      	push	{r4, lr}
 8007178:	429a      	cmp	r2, r3
 800717a:	d100      	bne.n	800717e <memcpy+0xa>
 800717c:	bd10      	pop	{r4, pc}
 800717e:	5ccc      	ldrb	r4, [r1, r3]
 8007180:	54c4      	strb	r4, [r0, r3]
 8007182:	3301      	adds	r3, #1
 8007184:	e7f8      	b.n	8007178 <memcpy+0x4>
	...

08007188 <__assert_func>:
 8007188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800718a:	0014      	movs	r4, r2
 800718c:	001a      	movs	r2, r3
 800718e:	4b09      	ldr	r3, [pc, #36]	@ (80071b4 <__assert_func+0x2c>)
 8007190:	0005      	movs	r5, r0
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	000e      	movs	r6, r1
 8007196:	68d8      	ldr	r0, [r3, #12]
 8007198:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <__assert_func+0x30>)
 800719a:	2c00      	cmp	r4, #0
 800719c:	d101      	bne.n	80071a2 <__assert_func+0x1a>
 800719e:	4b07      	ldr	r3, [pc, #28]	@ (80071bc <__assert_func+0x34>)
 80071a0:	001c      	movs	r4, r3
 80071a2:	4907      	ldr	r1, [pc, #28]	@ (80071c0 <__assert_func+0x38>)
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	9402      	str	r4, [sp, #8]
 80071a8:	002b      	movs	r3, r5
 80071aa:	9600      	str	r6, [sp, #0]
 80071ac:	f000 f886 	bl	80072bc <fiprintf>
 80071b0:	f000 f894 	bl	80072dc <abort>
 80071b4:	20000018 	.word	0x20000018
 80071b8:	08007bc3 	.word	0x08007bc3
 80071bc:	08007902 	.word	0x08007902
 80071c0:	08007bd0 	.word	0x08007bd0

080071c4 <_calloc_r>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	0c0b      	lsrs	r3, r1, #16
 80071c8:	0c15      	lsrs	r5, r2, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11e      	bne.n	800720c <_calloc_r+0x48>
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	d10c      	bne.n	80071ec <_calloc_r+0x28>
 80071d2:	b289      	uxth	r1, r1
 80071d4:	b294      	uxth	r4, r2
 80071d6:	434c      	muls	r4, r1
 80071d8:	0021      	movs	r1, r4
 80071da:	f7ff f963 	bl	80064a4 <_malloc_r>
 80071de:	1e05      	subs	r5, r0, #0
 80071e0:	d01a      	beq.n	8007218 <_calloc_r+0x54>
 80071e2:	0022      	movs	r2, r4
 80071e4:	2100      	movs	r1, #0
 80071e6:	f7fe f9b5 	bl	8005554 <memset>
 80071ea:	e016      	b.n	800721a <_calloc_r+0x56>
 80071ec:	1c2b      	adds	r3, r5, #0
 80071ee:	1c0c      	adds	r4, r1, #0
 80071f0:	b289      	uxth	r1, r1
 80071f2:	b292      	uxth	r2, r2
 80071f4:	434a      	muls	r2, r1
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	b2a1      	uxth	r1, r4
 80071fa:	4359      	muls	r1, r3
 80071fc:	0c14      	lsrs	r4, r2, #16
 80071fe:	190c      	adds	r4, r1, r4
 8007200:	0c23      	lsrs	r3, r4, #16
 8007202:	d107      	bne.n	8007214 <_calloc_r+0x50>
 8007204:	0424      	lsls	r4, r4, #16
 8007206:	b292      	uxth	r2, r2
 8007208:	4314      	orrs	r4, r2
 800720a:	e7e5      	b.n	80071d8 <_calloc_r+0x14>
 800720c:	2d00      	cmp	r5, #0
 800720e:	d101      	bne.n	8007214 <_calloc_r+0x50>
 8007210:	1c14      	adds	r4, r2, #0
 8007212:	e7ed      	b.n	80071f0 <_calloc_r+0x2c>
 8007214:	230c      	movs	r3, #12
 8007216:	6003      	str	r3, [r0, #0]
 8007218:	2500      	movs	r5, #0
 800721a:	0028      	movs	r0, r5
 800721c:	bd70      	pop	{r4, r5, r6, pc}

0800721e <__ascii_mbtowc>:
 800721e:	b082      	sub	sp, #8
 8007220:	2900      	cmp	r1, #0
 8007222:	d100      	bne.n	8007226 <__ascii_mbtowc+0x8>
 8007224:	a901      	add	r1, sp, #4
 8007226:	1e10      	subs	r0, r2, #0
 8007228:	d006      	beq.n	8007238 <__ascii_mbtowc+0x1a>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <__ascii_mbtowc+0x1e>
 800722e:	7813      	ldrb	r3, [r2, #0]
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	7810      	ldrb	r0, [r2, #0]
 8007234:	1e43      	subs	r3, r0, #1
 8007236:	4198      	sbcs	r0, r3
 8007238:	b002      	add	sp, #8
 800723a:	4770      	bx	lr
 800723c:	2002      	movs	r0, #2
 800723e:	4240      	negs	r0, r0
 8007240:	e7fa      	b.n	8007238 <__ascii_mbtowc+0x1a>

08007242 <_realloc_r>:
 8007242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007244:	0006      	movs	r6, r0
 8007246:	000c      	movs	r4, r1
 8007248:	0015      	movs	r5, r2
 800724a:	2900      	cmp	r1, #0
 800724c:	d105      	bne.n	800725a <_realloc_r+0x18>
 800724e:	0011      	movs	r1, r2
 8007250:	f7ff f928 	bl	80064a4 <_malloc_r>
 8007254:	0004      	movs	r4, r0
 8007256:	0020      	movs	r0, r4
 8007258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800725a:	2a00      	cmp	r2, #0
 800725c:	d103      	bne.n	8007266 <_realloc_r+0x24>
 800725e:	f7ff f8ab 	bl	80063b8 <_free_r>
 8007262:	2400      	movs	r4, #0
 8007264:	e7f7      	b.n	8007256 <_realloc_r+0x14>
 8007266:	f000 f840 	bl	80072ea <_malloc_usable_size_r>
 800726a:	0007      	movs	r7, r0
 800726c:	4285      	cmp	r5, r0
 800726e:	d802      	bhi.n	8007276 <_realloc_r+0x34>
 8007270:	0843      	lsrs	r3, r0, #1
 8007272:	42ab      	cmp	r3, r5
 8007274:	d3ef      	bcc.n	8007256 <_realloc_r+0x14>
 8007276:	0029      	movs	r1, r5
 8007278:	0030      	movs	r0, r6
 800727a:	f7ff f913 	bl	80064a4 <_malloc_r>
 800727e:	9001      	str	r0, [sp, #4]
 8007280:	2800      	cmp	r0, #0
 8007282:	d0ee      	beq.n	8007262 <_realloc_r+0x20>
 8007284:	002a      	movs	r2, r5
 8007286:	42bd      	cmp	r5, r7
 8007288:	d900      	bls.n	800728c <_realloc_r+0x4a>
 800728a:	003a      	movs	r2, r7
 800728c:	0021      	movs	r1, r4
 800728e:	9801      	ldr	r0, [sp, #4]
 8007290:	f7ff ff70 	bl	8007174 <memcpy>
 8007294:	0021      	movs	r1, r4
 8007296:	0030      	movs	r0, r6
 8007298:	f7ff f88e 	bl	80063b8 <_free_r>
 800729c:	9c01      	ldr	r4, [sp, #4]
 800729e:	e7da      	b.n	8007256 <_realloc_r+0x14>

080072a0 <__ascii_wctomb>:
 80072a0:	0003      	movs	r3, r0
 80072a2:	1e08      	subs	r0, r1, #0
 80072a4:	d005      	beq.n	80072b2 <__ascii_wctomb+0x12>
 80072a6:	2aff      	cmp	r2, #255	@ 0xff
 80072a8:	d904      	bls.n	80072b4 <__ascii_wctomb+0x14>
 80072aa:	228a      	movs	r2, #138	@ 0x8a
 80072ac:	2001      	movs	r0, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	4240      	negs	r0, r0
 80072b2:	4770      	bx	lr
 80072b4:	2001      	movs	r0, #1
 80072b6:	700a      	strb	r2, [r1, #0]
 80072b8:	e7fb      	b.n	80072b2 <__ascii_wctomb+0x12>
	...

080072bc <fiprintf>:
 80072bc:	b40e      	push	{r1, r2, r3}
 80072be:	b517      	push	{r0, r1, r2, r4, lr}
 80072c0:	4c05      	ldr	r4, [pc, #20]	@ (80072d8 <fiprintf+0x1c>)
 80072c2:	ab05      	add	r3, sp, #20
 80072c4:	cb04      	ldmia	r3!, {r2}
 80072c6:	0001      	movs	r1, r0
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	f000 f83c 	bl	8007348 <_vfiprintf_r>
 80072d0:	bc1e      	pop	{r1, r2, r3, r4}
 80072d2:	bc08      	pop	{r3}
 80072d4:	b003      	add	sp, #12
 80072d6:	4718      	bx	r3
 80072d8:	20000018 	.word	0x20000018

080072dc <abort>:
 80072dc:	2006      	movs	r0, #6
 80072de:	b510      	push	{r4, lr}
 80072e0:	f000 fa18 	bl	8007714 <raise>
 80072e4:	2001      	movs	r0, #1
 80072e6:	f7fb fc2d 	bl	8002b44 <_exit>

080072ea <_malloc_usable_size_r>:
 80072ea:	1f0b      	subs	r3, r1, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	1f18      	subs	r0, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da01      	bge.n	80072f8 <_malloc_usable_size_r+0xe>
 80072f4:	580b      	ldr	r3, [r1, r0]
 80072f6:	18c0      	adds	r0, r0, r3
 80072f8:	4770      	bx	lr

080072fa <__sfputc_r>:
 80072fa:	6893      	ldr	r3, [r2, #8]
 80072fc:	b510      	push	{r4, lr}
 80072fe:	3b01      	subs	r3, #1
 8007300:	6093      	str	r3, [r2, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	da04      	bge.n	8007310 <__sfputc_r+0x16>
 8007306:	6994      	ldr	r4, [r2, #24]
 8007308:	42a3      	cmp	r3, r4
 800730a:	db07      	blt.n	800731c <__sfputc_r+0x22>
 800730c:	290a      	cmp	r1, #10
 800730e:	d005      	beq.n	800731c <__sfputc_r+0x22>
 8007310:	6813      	ldr	r3, [r2, #0]
 8007312:	1c58      	adds	r0, r3, #1
 8007314:	6010      	str	r0, [r2, #0]
 8007316:	7019      	strb	r1, [r3, #0]
 8007318:	0008      	movs	r0, r1
 800731a:	bd10      	pop	{r4, pc}
 800731c:	f000 f930 	bl	8007580 <__swbuf_r>
 8007320:	0001      	movs	r1, r0
 8007322:	e7f9      	b.n	8007318 <__sfputc_r+0x1e>

08007324 <__sfputs_r>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	0006      	movs	r6, r0
 8007328:	000f      	movs	r7, r1
 800732a:	0014      	movs	r4, r2
 800732c:	18d5      	adds	r5, r2, r3
 800732e:	42ac      	cmp	r4, r5
 8007330:	d101      	bne.n	8007336 <__sfputs_r+0x12>
 8007332:	2000      	movs	r0, #0
 8007334:	e007      	b.n	8007346 <__sfputs_r+0x22>
 8007336:	7821      	ldrb	r1, [r4, #0]
 8007338:	003a      	movs	r2, r7
 800733a:	0030      	movs	r0, r6
 800733c:	f7ff ffdd 	bl	80072fa <__sfputc_r>
 8007340:	3401      	adds	r4, #1
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d1f3      	bne.n	800732e <__sfputs_r+0xa>
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007348 <_vfiprintf_r>:
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b0a1      	sub	sp, #132	@ 0x84
 800734c:	000f      	movs	r7, r1
 800734e:	0015      	movs	r5, r2
 8007350:	001e      	movs	r6, r3
 8007352:	9003      	str	r0, [sp, #12]
 8007354:	2800      	cmp	r0, #0
 8007356:	d004      	beq.n	8007362 <_vfiprintf_r+0x1a>
 8007358:	6a03      	ldr	r3, [r0, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <_vfiprintf_r+0x1a>
 800735e:	f7fe f859 	bl	8005414 <__sinit>
 8007362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007364:	07db      	lsls	r3, r3, #31
 8007366:	d405      	bmi.n	8007374 <_vfiprintf_r+0x2c>
 8007368:	89bb      	ldrh	r3, [r7, #12]
 800736a:	059b      	lsls	r3, r3, #22
 800736c:	d402      	bmi.n	8007374 <_vfiprintf_r+0x2c>
 800736e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007370:	f7fe f98b 	bl	800568a <__retarget_lock_acquire_recursive>
 8007374:	89bb      	ldrh	r3, [r7, #12]
 8007376:	071b      	lsls	r3, r3, #28
 8007378:	d502      	bpl.n	8007380 <_vfiprintf_r+0x38>
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d113      	bne.n	80073a8 <_vfiprintf_r+0x60>
 8007380:	0039      	movs	r1, r7
 8007382:	9803      	ldr	r0, [sp, #12]
 8007384:	f000 f93e 	bl	8007604 <__swsetup_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	d00d      	beq.n	80073a8 <_vfiprintf_r+0x60>
 800738c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800738e:	07db      	lsls	r3, r3, #31
 8007390:	d503      	bpl.n	800739a <_vfiprintf_r+0x52>
 8007392:	2001      	movs	r0, #1
 8007394:	4240      	negs	r0, r0
 8007396:	b021      	add	sp, #132	@ 0x84
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739a:	89bb      	ldrh	r3, [r7, #12]
 800739c:	059b      	lsls	r3, r3, #22
 800739e:	d4f8      	bmi.n	8007392 <_vfiprintf_r+0x4a>
 80073a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80073a2:	f7fe f973 	bl	800568c <__retarget_lock_release_recursive>
 80073a6:	e7f4      	b.n	8007392 <_vfiprintf_r+0x4a>
 80073a8:	2300      	movs	r3, #0
 80073aa:	ac08      	add	r4, sp, #32
 80073ac:	6163      	str	r3, [r4, #20]
 80073ae:	3320      	adds	r3, #32
 80073b0:	7663      	strb	r3, [r4, #25]
 80073b2:	3310      	adds	r3, #16
 80073b4:	76a3      	strb	r3, [r4, #26]
 80073b6:	9607      	str	r6, [sp, #28]
 80073b8:	002e      	movs	r6, r5
 80073ba:	7833      	ldrb	r3, [r6, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <_vfiprintf_r+0x7c>
 80073c0:	2b25      	cmp	r3, #37	@ 0x25
 80073c2:	d148      	bne.n	8007456 <_vfiprintf_r+0x10e>
 80073c4:	1b73      	subs	r3, r6, r5
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	42ae      	cmp	r6, r5
 80073ca:	d00b      	beq.n	80073e4 <_vfiprintf_r+0x9c>
 80073cc:	002a      	movs	r2, r5
 80073ce:	0039      	movs	r1, r7
 80073d0:	9803      	ldr	r0, [sp, #12]
 80073d2:	f7ff ffa7 	bl	8007324 <__sfputs_r>
 80073d6:	3001      	adds	r0, #1
 80073d8:	d100      	bne.n	80073dc <_vfiprintf_r+0x94>
 80073da:	e0ae      	b.n	800753a <_vfiprintf_r+0x1f2>
 80073dc:	6963      	ldr	r3, [r4, #20]
 80073de:	9a05      	ldr	r2, [sp, #20]
 80073e0:	189b      	adds	r3, r3, r2
 80073e2:	6163      	str	r3, [r4, #20]
 80073e4:	7833      	ldrb	r3, [r6, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d100      	bne.n	80073ec <_vfiprintf_r+0xa4>
 80073ea:	e0a6      	b.n	800753a <_vfiprintf_r+0x1f2>
 80073ec:	2201      	movs	r2, #1
 80073ee:	2300      	movs	r3, #0
 80073f0:	4252      	negs	r2, r2
 80073f2:	6062      	str	r2, [r4, #4]
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	3254      	adds	r2, #84	@ 0x54
 80073f8:	1852      	adds	r2, r2, r1
 80073fa:	1c75      	adds	r5, r6, #1
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	60e3      	str	r3, [r4, #12]
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	7013      	strb	r3, [r2, #0]
 8007404:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007406:	4b59      	ldr	r3, [pc, #356]	@ (800756c <_vfiprintf_r+0x224>)
 8007408:	2205      	movs	r2, #5
 800740a:	0018      	movs	r0, r3
 800740c:	7829      	ldrb	r1, [r5, #0]
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	f7fe f945 	bl	800569e <memchr>
 8007414:	1c6e      	adds	r6, r5, #1
 8007416:	2800      	cmp	r0, #0
 8007418:	d11f      	bne.n	800745a <_vfiprintf_r+0x112>
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	06d3      	lsls	r3, r2, #27
 800741e:	d504      	bpl.n	800742a <_vfiprintf_r+0xe2>
 8007420:	2353      	movs	r3, #83	@ 0x53
 8007422:	a904      	add	r1, sp, #16
 8007424:	185b      	adds	r3, r3, r1
 8007426:	2120      	movs	r1, #32
 8007428:	7019      	strb	r1, [r3, #0]
 800742a:	0713      	lsls	r3, r2, #28
 800742c:	d504      	bpl.n	8007438 <_vfiprintf_r+0xf0>
 800742e:	2353      	movs	r3, #83	@ 0x53
 8007430:	a904      	add	r1, sp, #16
 8007432:	185b      	adds	r3, r3, r1
 8007434:	212b      	movs	r1, #43	@ 0x2b
 8007436:	7019      	strb	r1, [r3, #0]
 8007438:	782b      	ldrb	r3, [r5, #0]
 800743a:	2b2a      	cmp	r3, #42	@ 0x2a
 800743c:	d016      	beq.n	800746c <_vfiprintf_r+0x124>
 800743e:	002e      	movs	r6, r5
 8007440:	2100      	movs	r1, #0
 8007442:	200a      	movs	r0, #10
 8007444:	68e3      	ldr	r3, [r4, #12]
 8007446:	7832      	ldrb	r2, [r6, #0]
 8007448:	1c75      	adds	r5, r6, #1
 800744a:	3a30      	subs	r2, #48	@ 0x30
 800744c:	2a09      	cmp	r2, #9
 800744e:	d950      	bls.n	80074f2 <_vfiprintf_r+0x1aa>
 8007450:	2900      	cmp	r1, #0
 8007452:	d111      	bne.n	8007478 <_vfiprintf_r+0x130>
 8007454:	e017      	b.n	8007486 <_vfiprintf_r+0x13e>
 8007456:	3601      	adds	r6, #1
 8007458:	e7af      	b.n	80073ba <_vfiprintf_r+0x72>
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	1ac0      	subs	r0, r0, r3
 8007460:	2301      	movs	r3, #1
 8007462:	4083      	lsls	r3, r0
 8007464:	4313      	orrs	r3, r2
 8007466:	0035      	movs	r5, r6
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	e7cc      	b.n	8007406 <_vfiprintf_r+0xbe>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	1d19      	adds	r1, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	9107      	str	r1, [sp, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	db01      	blt.n	800747c <_vfiprintf_r+0x134>
 8007478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747a:	e004      	b.n	8007486 <_vfiprintf_r+0x13e>
 800747c:	425b      	negs	r3, r3
 800747e:	60e3      	str	r3, [r4, #12]
 8007480:	2302      	movs	r3, #2
 8007482:	4313      	orrs	r3, r2
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	7833      	ldrb	r3, [r6, #0]
 8007488:	2b2e      	cmp	r3, #46	@ 0x2e
 800748a:	d10c      	bne.n	80074a6 <_vfiprintf_r+0x15e>
 800748c:	7873      	ldrb	r3, [r6, #1]
 800748e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007490:	d134      	bne.n	80074fc <_vfiprintf_r+0x1b4>
 8007492:	9b07      	ldr	r3, [sp, #28]
 8007494:	3602      	adds	r6, #2
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9207      	str	r2, [sp, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da01      	bge.n	80074a4 <_vfiprintf_r+0x15c>
 80074a0:	2301      	movs	r3, #1
 80074a2:	425b      	negs	r3, r3
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	4d32      	ldr	r5, [pc, #200]	@ (8007570 <_vfiprintf_r+0x228>)
 80074a8:	2203      	movs	r2, #3
 80074aa:	0028      	movs	r0, r5
 80074ac:	7831      	ldrb	r1, [r6, #0]
 80074ae:	f7fe f8f6 	bl	800569e <memchr>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d006      	beq.n	80074c4 <_vfiprintf_r+0x17c>
 80074b6:	2340      	movs	r3, #64	@ 0x40
 80074b8:	1b40      	subs	r0, r0, r5
 80074ba:	4083      	lsls	r3, r0
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	3601      	adds	r6, #1
 80074c0:	4313      	orrs	r3, r2
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	7831      	ldrb	r1, [r6, #0]
 80074c6:	2206      	movs	r2, #6
 80074c8:	482a      	ldr	r0, [pc, #168]	@ (8007574 <_vfiprintf_r+0x22c>)
 80074ca:	1c75      	adds	r5, r6, #1
 80074cc:	7621      	strb	r1, [r4, #24]
 80074ce:	f7fe f8e6 	bl	800569e <memchr>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d040      	beq.n	8007558 <_vfiprintf_r+0x210>
 80074d6:	4b28      	ldr	r3, [pc, #160]	@ (8007578 <_vfiprintf_r+0x230>)
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d122      	bne.n	8007522 <_vfiprintf_r+0x1da>
 80074dc:	2207      	movs	r2, #7
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	3307      	adds	r3, #7
 80074e2:	4393      	bics	r3, r2
 80074e4:	3308      	adds	r3, #8
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	6963      	ldr	r3, [r4, #20]
 80074ea:	9a04      	ldr	r2, [sp, #16]
 80074ec:	189b      	adds	r3, r3, r2
 80074ee:	6163      	str	r3, [r4, #20]
 80074f0:	e762      	b.n	80073b8 <_vfiprintf_r+0x70>
 80074f2:	4343      	muls	r3, r0
 80074f4:	002e      	movs	r6, r5
 80074f6:	2101      	movs	r1, #1
 80074f8:	189b      	adds	r3, r3, r2
 80074fa:	e7a4      	b.n	8007446 <_vfiprintf_r+0xfe>
 80074fc:	2300      	movs	r3, #0
 80074fe:	200a      	movs	r0, #10
 8007500:	0019      	movs	r1, r3
 8007502:	3601      	adds	r6, #1
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	7832      	ldrb	r2, [r6, #0]
 8007508:	1c75      	adds	r5, r6, #1
 800750a:	3a30      	subs	r2, #48	@ 0x30
 800750c:	2a09      	cmp	r2, #9
 800750e:	d903      	bls.n	8007518 <_vfiprintf_r+0x1d0>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0c8      	beq.n	80074a6 <_vfiprintf_r+0x15e>
 8007514:	9109      	str	r1, [sp, #36]	@ 0x24
 8007516:	e7c6      	b.n	80074a6 <_vfiprintf_r+0x15e>
 8007518:	4341      	muls	r1, r0
 800751a:	002e      	movs	r6, r5
 800751c:	2301      	movs	r3, #1
 800751e:	1889      	adds	r1, r1, r2
 8007520:	e7f1      	b.n	8007506 <_vfiprintf_r+0x1be>
 8007522:	aa07      	add	r2, sp, #28
 8007524:	9200      	str	r2, [sp, #0]
 8007526:	0021      	movs	r1, r4
 8007528:	003a      	movs	r2, r7
 800752a:	4b14      	ldr	r3, [pc, #80]	@ (800757c <_vfiprintf_r+0x234>)
 800752c:	9803      	ldr	r0, [sp, #12]
 800752e:	f7fd fb25 	bl	8004b7c <_printf_float>
 8007532:	9004      	str	r0, [sp, #16]
 8007534:	9b04      	ldr	r3, [sp, #16]
 8007536:	3301      	adds	r3, #1
 8007538:	d1d6      	bne.n	80074e8 <_vfiprintf_r+0x1a0>
 800753a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800753c:	07db      	lsls	r3, r3, #31
 800753e:	d405      	bmi.n	800754c <_vfiprintf_r+0x204>
 8007540:	89bb      	ldrh	r3, [r7, #12]
 8007542:	059b      	lsls	r3, r3, #22
 8007544:	d402      	bmi.n	800754c <_vfiprintf_r+0x204>
 8007546:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007548:	f7fe f8a0 	bl	800568c <__retarget_lock_release_recursive>
 800754c:	89bb      	ldrh	r3, [r7, #12]
 800754e:	065b      	lsls	r3, r3, #25
 8007550:	d500      	bpl.n	8007554 <_vfiprintf_r+0x20c>
 8007552:	e71e      	b.n	8007392 <_vfiprintf_r+0x4a>
 8007554:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007556:	e71e      	b.n	8007396 <_vfiprintf_r+0x4e>
 8007558:	aa07      	add	r2, sp, #28
 800755a:	9200      	str	r2, [sp, #0]
 800755c:	0021      	movs	r1, r4
 800755e:	003a      	movs	r2, r7
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <_vfiprintf_r+0x234>)
 8007562:	9803      	ldr	r0, [sp, #12]
 8007564:	f7fd fdb8 	bl	80050d8 <_printf_i>
 8007568:	e7e3      	b.n	8007532 <_vfiprintf_r+0x1ea>
 800756a:	46c0      	nop			@ (mov r8, r8)
 800756c:	08007ba8 	.word	0x08007ba8
 8007570:	08007bae 	.word	0x08007bae
 8007574:	08007bb2 	.word	0x08007bb2
 8007578:	08004b7d 	.word	0x08004b7d
 800757c:	08007325 	.word	0x08007325

08007580 <__swbuf_r>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	0006      	movs	r6, r0
 8007584:	000d      	movs	r5, r1
 8007586:	0014      	movs	r4, r2
 8007588:	2800      	cmp	r0, #0
 800758a:	d004      	beq.n	8007596 <__swbuf_r+0x16>
 800758c:	6a03      	ldr	r3, [r0, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <__swbuf_r+0x16>
 8007592:	f7fd ff3f 	bl	8005414 <__sinit>
 8007596:	69a3      	ldr	r3, [r4, #24]
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	071b      	lsls	r3, r3, #28
 800759e:	d502      	bpl.n	80075a6 <__swbuf_r+0x26>
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <__swbuf_r+0x3a>
 80075a6:	0021      	movs	r1, r4
 80075a8:	0030      	movs	r0, r6
 80075aa:	f000 f82b 	bl	8007604 <__swsetup_r>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d003      	beq.n	80075ba <__swbuf_r+0x3a>
 80075b2:	2501      	movs	r5, #1
 80075b4:	426d      	negs	r5, r5
 80075b6:	0028      	movs	r0, r5
 80075b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	b2ef      	uxtb	r7, r5
 80075c0:	1ac0      	subs	r0, r0, r3
 80075c2:	6963      	ldr	r3, [r4, #20]
 80075c4:	b2ed      	uxtb	r5, r5
 80075c6:	4283      	cmp	r3, r0
 80075c8:	dc05      	bgt.n	80075d6 <__swbuf_r+0x56>
 80075ca:	0021      	movs	r1, r4
 80075cc:	0030      	movs	r0, r6
 80075ce:	f7ff fd81 	bl	80070d4 <_fflush_r>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d1ed      	bne.n	80075b2 <__swbuf_r+0x32>
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	3001      	adds	r0, #1
 80075da:	3b01      	subs	r3, #1
 80075dc:	60a3      	str	r3, [r4, #8]
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	701f      	strb	r7, [r3, #0]
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	4283      	cmp	r3, r0
 80075ea:	d004      	beq.n	80075f6 <__swbuf_r+0x76>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	07db      	lsls	r3, r3, #31
 80075f0:	d5e1      	bpl.n	80075b6 <__swbuf_r+0x36>
 80075f2:	2d0a      	cmp	r5, #10
 80075f4:	d1df      	bne.n	80075b6 <__swbuf_r+0x36>
 80075f6:	0021      	movs	r1, r4
 80075f8:	0030      	movs	r0, r6
 80075fa:	f7ff fd6b 	bl	80070d4 <_fflush_r>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0d9      	beq.n	80075b6 <__swbuf_r+0x36>
 8007602:	e7d6      	b.n	80075b2 <__swbuf_r+0x32>

08007604 <__swsetup_r>:
 8007604:	4b2d      	ldr	r3, [pc, #180]	@ (80076bc <__swsetup_r+0xb8>)
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	0005      	movs	r5, r0
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	000c      	movs	r4, r1
 800760e:	2800      	cmp	r0, #0
 8007610:	d004      	beq.n	800761c <__swsetup_r+0x18>
 8007612:	6a03      	ldr	r3, [r0, #32]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <__swsetup_r+0x18>
 8007618:	f7fd fefc 	bl	8005414 <__sinit>
 800761c:	230c      	movs	r3, #12
 800761e:	5ee2      	ldrsh	r2, [r4, r3]
 8007620:	0713      	lsls	r3, r2, #28
 8007622:	d423      	bmi.n	800766c <__swsetup_r+0x68>
 8007624:	06d3      	lsls	r3, r2, #27
 8007626:	d407      	bmi.n	8007638 <__swsetup_r+0x34>
 8007628:	2309      	movs	r3, #9
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	2340      	movs	r3, #64	@ 0x40
 800762e:	2001      	movs	r0, #1
 8007630:	4313      	orrs	r3, r2
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	4240      	negs	r0, r0
 8007636:	e03a      	b.n	80076ae <__swsetup_r+0xaa>
 8007638:	0752      	lsls	r2, r2, #29
 800763a:	d513      	bpl.n	8007664 <__swsetup_r+0x60>
 800763c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800763e:	2900      	cmp	r1, #0
 8007640:	d008      	beq.n	8007654 <__swsetup_r+0x50>
 8007642:	0023      	movs	r3, r4
 8007644:	3344      	adds	r3, #68	@ 0x44
 8007646:	4299      	cmp	r1, r3
 8007648:	d002      	beq.n	8007650 <__swsetup_r+0x4c>
 800764a:	0028      	movs	r0, r5
 800764c:	f7fe feb4 	bl	80063b8 <_free_r>
 8007650:	2300      	movs	r3, #0
 8007652:	6363      	str	r3, [r4, #52]	@ 0x34
 8007654:	2224      	movs	r2, #36	@ 0x24
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	4393      	bics	r3, r2
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	2300      	movs	r3, #0
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	2308      	movs	r3, #8
 8007666:	89a2      	ldrh	r2, [r4, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <__swsetup_r+0x86>
 8007672:	21a0      	movs	r1, #160	@ 0xa0
 8007674:	2280      	movs	r2, #128	@ 0x80
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	0089      	lsls	r1, r1, #2
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	400b      	ands	r3, r1
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <__swsetup_r+0x86>
 8007682:	0021      	movs	r1, r4
 8007684:	0028      	movs	r0, r5
 8007686:	f000 f88f 	bl	80077a8 <__smakebuf_r>
 800768a:	230c      	movs	r3, #12
 800768c:	5ee2      	ldrsh	r2, [r4, r3]
 800768e:	2101      	movs	r1, #1
 8007690:	0013      	movs	r3, r2
 8007692:	400b      	ands	r3, r1
 8007694:	420a      	tst	r2, r1
 8007696:	d00b      	beq.n	80076b0 <__swsetup_r+0xac>
 8007698:	2300      	movs	r3, #0
 800769a:	60a3      	str	r3, [r4, #8]
 800769c:	6963      	ldr	r3, [r4, #20]
 800769e:	425b      	negs	r3, r3
 80076a0:	61a3      	str	r3, [r4, #24]
 80076a2:	2000      	movs	r0, #0
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	4283      	cmp	r3, r0
 80076a8:	d101      	bne.n	80076ae <__swsetup_r+0xaa>
 80076aa:	0613      	lsls	r3, r2, #24
 80076ac:	d4be      	bmi.n	800762c <__swsetup_r+0x28>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	0791      	lsls	r1, r2, #30
 80076b2:	d400      	bmi.n	80076b6 <__swsetup_r+0xb2>
 80076b4:	6963      	ldr	r3, [r4, #20]
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	e7f3      	b.n	80076a2 <__swsetup_r+0x9e>
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	20000018 	.word	0x20000018

080076c0 <_raise_r>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	0004      	movs	r4, r0
 80076c4:	000d      	movs	r5, r1
 80076c6:	291f      	cmp	r1, #31
 80076c8:	d904      	bls.n	80076d4 <_raise_r+0x14>
 80076ca:	2316      	movs	r3, #22
 80076cc:	6003      	str	r3, [r0, #0]
 80076ce:	2001      	movs	r0, #1
 80076d0:	4240      	negs	r0, r0
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <_raise_r+0x24>
 80076da:	008a      	lsls	r2, r1, #2
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	d108      	bne.n	80076f6 <_raise_r+0x36>
 80076e4:	0020      	movs	r0, r4
 80076e6:	f000 f831 	bl	800774c <_getpid_r>
 80076ea:	002a      	movs	r2, r5
 80076ec:	0001      	movs	r1, r0
 80076ee:	0020      	movs	r0, r4
 80076f0:	f000 f81a 	bl	8007728 <_kill_r>
 80076f4:	e7ed      	b.n	80076d2 <_raise_r+0x12>
 80076f6:	2a01      	cmp	r2, #1
 80076f8:	d009      	beq.n	800770e <_raise_r+0x4e>
 80076fa:	1c51      	adds	r1, r2, #1
 80076fc:	d103      	bne.n	8007706 <_raise_r+0x46>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	2001      	movs	r0, #1
 8007704:	e7e5      	b.n	80076d2 <_raise_r+0x12>
 8007706:	2100      	movs	r1, #0
 8007708:	0028      	movs	r0, r5
 800770a:	6019      	str	r1, [r3, #0]
 800770c:	4790      	blx	r2
 800770e:	2000      	movs	r0, #0
 8007710:	e7df      	b.n	80076d2 <_raise_r+0x12>
	...

08007714 <raise>:
 8007714:	b510      	push	{r4, lr}
 8007716:	4b03      	ldr	r3, [pc, #12]	@ (8007724 <raise+0x10>)
 8007718:	0001      	movs	r1, r0
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	f7ff ffd0 	bl	80076c0 <_raise_r>
 8007720:	bd10      	pop	{r4, pc}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	20000018 	.word	0x20000018

08007728 <_kill_r>:
 8007728:	2300      	movs	r3, #0
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	4d06      	ldr	r5, [pc, #24]	@ (8007748 <_kill_r+0x20>)
 800772e:	0004      	movs	r4, r0
 8007730:	0008      	movs	r0, r1
 8007732:	0011      	movs	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f7fb f9fd 	bl	8002b34 <_kill>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d103      	bne.n	8007746 <_kill_r+0x1e>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d000      	beq.n	8007746 <_kill_r+0x1e>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	2000057c 	.word	0x2000057c

0800774c <_getpid_r>:
 800774c:	b510      	push	{r4, lr}
 800774e:	f7fb f9ef 	bl	8002b30 <_getpid>
 8007752:	bd10      	pop	{r4, pc}

08007754 <__swhatbuf_r>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	000e      	movs	r6, r1
 8007758:	001d      	movs	r5, r3
 800775a:	230e      	movs	r3, #14
 800775c:	5ec9      	ldrsh	r1, [r1, r3]
 800775e:	0014      	movs	r4, r2
 8007760:	b096      	sub	sp, #88	@ 0x58
 8007762:	2900      	cmp	r1, #0
 8007764:	da0c      	bge.n	8007780 <__swhatbuf_r+0x2c>
 8007766:	89b2      	ldrh	r2, [r6, #12]
 8007768:	2380      	movs	r3, #128	@ 0x80
 800776a:	0011      	movs	r1, r2
 800776c:	4019      	ands	r1, r3
 800776e:	421a      	tst	r2, r3
 8007770:	d114      	bne.n	800779c <__swhatbuf_r+0x48>
 8007772:	2380      	movs	r3, #128	@ 0x80
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	2000      	movs	r0, #0
 8007778:	6029      	str	r1, [r5, #0]
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	b016      	add	sp, #88	@ 0x58
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	466a      	mov	r2, sp
 8007782:	f000 f853 	bl	800782c <_fstat_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	dbed      	blt.n	8007766 <__swhatbuf_r+0x12>
 800778a:	23f0      	movs	r3, #240	@ 0xf0
 800778c:	9901      	ldr	r1, [sp, #4]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	4019      	ands	r1, r3
 8007792:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <__swhatbuf_r+0x50>)
 8007794:	18c9      	adds	r1, r1, r3
 8007796:	424b      	negs	r3, r1
 8007798:	4159      	adcs	r1, r3
 800779a:	e7ea      	b.n	8007772 <__swhatbuf_r+0x1e>
 800779c:	2100      	movs	r1, #0
 800779e:	2340      	movs	r3, #64	@ 0x40
 80077a0:	e7e9      	b.n	8007776 <__swhatbuf_r+0x22>
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	ffffe000 	.word	0xffffe000

080077a8 <__smakebuf_r>:
 80077a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077aa:	2602      	movs	r6, #2
 80077ac:	898b      	ldrh	r3, [r1, #12]
 80077ae:	0005      	movs	r5, r0
 80077b0:	000c      	movs	r4, r1
 80077b2:	b085      	sub	sp, #20
 80077b4:	4233      	tst	r3, r6
 80077b6:	d007      	beq.n	80077c8 <__smakebuf_r+0x20>
 80077b8:	0023      	movs	r3, r4
 80077ba:	3347      	adds	r3, #71	@ 0x47
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	2301      	movs	r3, #1
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	b005      	add	sp, #20
 80077c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c8:	ab03      	add	r3, sp, #12
 80077ca:	aa02      	add	r2, sp, #8
 80077cc:	f7ff ffc2 	bl	8007754 <__swhatbuf_r>
 80077d0:	9f02      	ldr	r7, [sp, #8]
 80077d2:	9001      	str	r0, [sp, #4]
 80077d4:	0039      	movs	r1, r7
 80077d6:	0028      	movs	r0, r5
 80077d8:	f7fe fe64 	bl	80064a4 <_malloc_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d108      	bne.n	80077f2 <__smakebuf_r+0x4a>
 80077e0:	220c      	movs	r2, #12
 80077e2:	5ea3      	ldrsh	r3, [r4, r2]
 80077e4:	059a      	lsls	r2, r3, #22
 80077e6:	d4ed      	bmi.n	80077c4 <__smakebuf_r+0x1c>
 80077e8:	2203      	movs	r2, #3
 80077ea:	4393      	bics	r3, r2
 80077ec:	431e      	orrs	r6, r3
 80077ee:	81a6      	strh	r6, [r4, #12]
 80077f0:	e7e2      	b.n	80077b8 <__smakebuf_r+0x10>
 80077f2:	2380      	movs	r3, #128	@ 0x80
 80077f4:	89a2      	ldrh	r2, [r4, #12]
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	6120      	str	r0, [r4, #16]
 8007800:	6167      	str	r7, [r4, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <__smakebuf_r+0x78>
 8007806:	0028      	movs	r0, r5
 8007808:	230e      	movs	r3, #14
 800780a:	5ee1      	ldrsh	r1, [r4, r3]
 800780c:	f000 f820 	bl	8007850 <_isatty_r>
 8007810:	2800      	cmp	r0, #0
 8007812:	d005      	beq.n	8007820 <__smakebuf_r+0x78>
 8007814:	2303      	movs	r3, #3
 8007816:	89a2      	ldrh	r2, [r4, #12]
 8007818:	439a      	bics	r2, r3
 800781a:	3b02      	subs	r3, #2
 800781c:	4313      	orrs	r3, r2
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	9a01      	ldr	r2, [sp, #4]
 8007824:	4313      	orrs	r3, r2
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	e7cc      	b.n	80077c4 <__smakebuf_r+0x1c>
	...

0800782c <_fstat_r>:
 800782c:	2300      	movs	r3, #0
 800782e:	b570      	push	{r4, r5, r6, lr}
 8007830:	4d06      	ldr	r5, [pc, #24]	@ (800784c <_fstat_r+0x20>)
 8007832:	0004      	movs	r4, r0
 8007834:	0008      	movs	r0, r1
 8007836:	0011      	movs	r1, r2
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f7fb f9a6 	bl	8002b8a <_fstat>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d103      	bne.n	800784a <_fstat_r+0x1e>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d000      	beq.n	800784a <_fstat_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	2000057c 	.word	0x2000057c

08007850 <_isatty_r>:
 8007850:	2300      	movs	r3, #0
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	4d06      	ldr	r5, [pc, #24]	@ (8007870 <_isatty_r+0x20>)
 8007856:	0004      	movs	r4, r0
 8007858:	0008      	movs	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7fb f99a 	bl	8002b94 <_isatty>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d103      	bne.n	800786c <_isatty_r+0x1c>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d000      	beq.n	800786c <_isatty_r+0x1c>
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	46c0      	nop			@ (mov r8, r8)
 8007870:	2000057c 	.word	0x2000057c

08007874 <_init>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

08007880 <_fini>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr
